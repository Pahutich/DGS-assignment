{"id":"../node_modules/box2d.package.ts/Collision/Shapes/b2Shape.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"../../Common/b2Math","loc":{"line":21,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Collision\\Shapes\\b2Shape.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexports.__esModule = true;\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nvar b2Math_1 = require(\"../../Common/b2Math\");\r\n/// This holds the mass data computed for a shape.\r\nvar b2MassData = /** @class */ (function () {\r\n    function b2MassData() {\r\n        /// The mass of the shape, usually in kilograms.\r\n        this.mass = 0;\r\n        /// The position of the shape's centroid relative to the shape's origin.\r\n        this.center = new b2Math_1.b2Vec2(0, 0);\r\n        /// The rotational inertia of the shape about the local origin.\r\n        this.I = 0;\r\n    }\r\n    return b2MassData;\r\n}());\r\nexports.b2MassData = b2MassData;\r\nvar b2ShapeType;\r\n(function (b2ShapeType) {\r\n    b2ShapeType[b2ShapeType[\"e_unknown\"] = -1] = \"e_unknown\";\r\n    b2ShapeType[b2ShapeType[\"e_circleShape\"] = 0] = \"e_circleShape\";\r\n    b2ShapeType[b2ShapeType[\"e_edgeShape\"] = 1] = \"e_edgeShape\";\r\n    b2ShapeType[b2ShapeType[\"e_polygonShape\"] = 2] = \"e_polygonShape\";\r\n    b2ShapeType[b2ShapeType[\"e_chainShape\"] = 3] = \"e_chainShape\";\r\n    b2ShapeType[b2ShapeType[\"e_shapeTypeCount\"] = 4] = \"e_shapeTypeCount\";\r\n})(b2ShapeType = exports.b2ShapeType || (exports.b2ShapeType = {}));\r\n/// A shape is used for collision detection. You can create a shape however you like.\r\n/// Shapes used for simulation in b2World are created automatically when a b2Fixture\r\n/// is created. Shapes may encapsulate a one or more child shapes.\r\nvar b2Shape = /** @class */ (function () {\r\n    function b2Shape(type, radius) {\r\n        this.m_type = b2ShapeType.e_unknown;\r\n        /// Radius of a shape. For polygonal shapes this must be b2_polygonRadius. There is no support for\r\n        /// making rounded polygons.\r\n        this.m_radius = 0;\r\n        this.m_type = type;\r\n        this.m_radius = radius;\r\n    }\r\n    b2Shape.prototype.Copy = function (other) {\r\n        // DEBUG: b2Assert(this.m_type === other.m_type);\r\n        this.m_radius = other.m_radius;\r\n        return this;\r\n    };\r\n    /// Get the type of this shape. You can use this to down cast to the concrete shape.\r\n    /// @return the shape type.\r\n    b2Shape.prototype.GetType = function () {\r\n        return this.m_type;\r\n    };\r\n    return b2Shape;\r\n}());\r\nexports.b2Shape = b2Shape;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2Shape.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Collision/Shapes/b2Shape.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;EAgBE;;AAEF,6DAA6D;AAC7D,8CAA8D;AAI9D,kDAAkD;AAClD;IAAA;QACE,gDAAgD;QACzC,SAAI,GAAW,CAAC,CAAC;QAExB,wEAAwE;QACxD,WAAM,GAAW,IAAI,eAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAElD,+DAA+D;QACxD,MAAC,GAAW,CAAC,CAAC;IACvB,CAAC;IAAD,iBAAC;AAAD,CAAC,AATD,IASC;AATY,gCAAU;AAWvB,IAAY,WAOX;AAPD,WAAY,WAAW;IACrB,wDAAc,CAAA;IACd,+DAAiB,CAAA;IACjB,2DAAe,CAAA;IACf,iEAAkB,CAAA;IAClB,6DAAgB,CAAA;IAChB,qEAAoB,CAAA;AACtB,CAAC,EAPW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAOtB;AAED,qFAAqF;AACrF,oFAAoF;AACpF,kEAAkE;AAClE;IAOE,iBAAY,IAAiB,EAAE,MAAc;QAN7B,WAAM,GAAgB,WAAW,CAAC,SAAS,CAAC;QAE7D,kGAAkG;QAClG,4BAA4B;QACpB,aAAQ,GAAW,CAAC,CAAC;QAG1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;IACzB,CAAC;IAKM,sBAAI,GAAX,UAAY,KAAc;QACxB,iDAAiD;QACjD,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC;QAC/B,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oFAAoF;IACpF,2BAA2B;IACpB,yBAAO,GAAd;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IA2CH,cAAC;AAAD,CAAC,AApED,IAoEC;AApEqB,0BAAO","sourcesContent":["/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Transform, XY } from \"../../Common/b2Math\";\r\nimport { b2AABB, b2RayCastInput, b2RayCastOutput } from \"../b2Collision\";\r\nimport { b2DistanceProxy } from \"../b2Distance\";\r\n\r\n/// This holds the mass data computed for a shape.\r\nexport class b2MassData {\r\n  /// The mass of the shape, usually in kilograms.\r\n  public mass: number = 0;\r\n\r\n  /// The position of the shape's centroid relative to the shape's origin.\r\n  public readonly center: b2Vec2 = new b2Vec2(0, 0);\r\n\r\n  /// The rotational inertia of the shape about the local origin.\r\n  public I: number = 0;\r\n}\r\n\r\nexport enum b2ShapeType {\r\n  e_unknown = -1,\r\n  e_circleShape = 0,\r\n  e_edgeShape = 1,\r\n  e_polygonShape = 2,\r\n  e_chainShape = 3,\r\n  e_shapeTypeCount = 4,\r\n}\r\n\r\n/// A shape is used for collision detection. You can create a shape however you like.\r\n/// Shapes used for simulation in b2World are created automatically when a b2Fixture\r\n/// is created. Shapes may encapsulate a one or more child shapes.\r\nexport abstract class b2Shape {\r\n  public readonly m_type: b2ShapeType = b2ShapeType.e_unknown;\r\n\r\n\t/// Radius of a shape. For polygonal shapes this must be b2_polygonRadius. There is no support for\r\n\t/// making rounded polygons.\r\n  public m_radius: number = 0;\r\n\r\n  constructor(type: b2ShapeType, radius: number) {\r\n    this.m_type = type;\r\n    this.m_radius = radius;\r\n  }\r\n\r\n  /// Clone the concrete shape.\r\n  public abstract Clone(): b2Shape;\r\n\r\n  public Copy(other: b2Shape): b2Shape {\r\n    // DEBUG: b2Assert(this.m_type === other.m_type);\r\n    this.m_radius = other.m_radius;\r\n    return this;\r\n  }\r\n\r\n  /// Get the type of this shape. You can use this to down cast to the concrete shape.\r\n  /// @return the shape type.\r\n  public GetType(): b2ShapeType {\r\n    return this.m_type;\r\n  }\r\n\r\n  /// Get the number of child primitives.\r\n  public abstract GetChildCount(): number;\r\n\r\n  /// Test a point for containment in this shape. This only works for convex shapes.\r\n  /// @param xf the shape world transform.\r\n  /// @param p a point in world coordinates.\r\n  public abstract TestPoint(xf: b2Transform, p: XY): boolean;\r\n\r\n  // #if B2_ENABLE_PARTICLE\r\n  /// Compute the distance from the current shape to the specified point. This only works for convex shapes.\r\n  /// @param xf the shape world transform.\r\n  /// @param p a point in world coordinates.\r\n  /// @param distance returns the distance from the current shape.\r\n  /// @param normal returns the direction in which the distance increases.\r\n  public abstract ComputeDistance(xf: b2Transform, p: b2Vec2, normal: b2Vec2, childIndex: number): number;\r\n  // #endif\r\n\r\n  /// Cast a ray against a child shape.\r\n  /// @param output the ray-cast results.\r\n  /// @param input the ray-cast input parameters.\r\n  /// @param transform the transform to be applied to the shape.\r\n  /// @param childIndex the child shape index\r\n  public abstract RayCast(output: b2RayCastOutput, input: b2RayCastInput, transform: b2Transform, childIndex: number): boolean;\r\n\r\n  /// Given a transform, compute the associated axis aligned bounding box for a child shape.\r\n  /// @param aabb returns the axis aligned box.\r\n  /// @param xf the world transform of the shape.\r\n  /// @param childIndex the child shape\r\n  public abstract ComputeAABB(aabb: b2AABB, xf: b2Transform, childIndex: number): void;\r\n\r\n  /// Compute the mass properties of this shape using its dimensions and density.\r\n  /// The inertia tensor is computed about the local origin.\r\n  /// @param massData returns the mass data for this shape.\r\n  /// @param density the density in kilograms per meter squared.\r\n  public abstract ComputeMass(massData: b2MassData, density: number): void;\r\n\r\n  public abstract SetupDistanceProxy(proxy: b2DistanceProxy, index: number): void;\r\n\r\n  public abstract ComputeSubmergedArea(normal: b2Vec2, offset: number, xf: b2Transform, c: b2Vec2): number;\r\n\r\n  public abstract Dump(log: (format: string, ...args: any[]) => void): void;\r\n}\r\n"]}},"error":null,"hash":"421676b9e20ca2f9daf83ab088ce62b9","cacheData":{"env":{}}}