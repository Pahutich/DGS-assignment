{"id":"../node_modules/box2d.package.ts/Dynamics/Joints/b2WeldJoint.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"../../Common/b2Settings","loc":{"line":30,"column":27},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2WeldJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Settings.ts"},{"name":"../../Common/b2Math","loc":{"line":31,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2WeldJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"},{"name":"./b2Joint","loc":{"line":32,"column":24},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2WeldJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2Joint.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\nvar b2Settings_1 = require(\"../../Common/b2Settings\");\r\nvar b2Math_1 = require(\"../../Common/b2Math\");\r\nvar b2Joint_1 = require(\"./b2Joint\");\r\n/// Weld joint definition. You need to specify local anchor points\r\n/// where they are attached and the relative body angle. The position\r\n/// of the anchor points is important for computing the reaction torque.\r\nvar b2WeldJointDef = /** @class */ (function (_super) {\r\n    __extends(b2WeldJointDef, _super);\r\n    function b2WeldJointDef() {\r\n        var _this = _super.call(this, b2Joint_1.b2JointType.e_weldJoint) || this;\r\n        _this.localAnchorA = new b2Math_1.b2Vec2();\r\n        _this.localAnchorB = new b2Math_1.b2Vec2();\r\n        _this.referenceAngle = 0;\r\n        _this.frequencyHz = 0;\r\n        _this.dampingRatio = 0;\r\n        return _this;\r\n    }\r\n    b2WeldJointDef.prototype.Initialize = function (bA, bB, anchor) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\r\n    };\r\n    return b2WeldJointDef;\r\n}(b2Joint_1.b2JointDef));\r\nexports.b2WeldJointDef = b2WeldJointDef;\r\nvar b2WeldJoint = /** @class */ (function (_super) {\r\n    __extends(b2WeldJoint, _super);\r\n    function b2WeldJoint(def) {\r\n        var _this = _super.call(this, def) || this;\r\n        _this.m_frequencyHz = 0;\r\n        _this.m_dampingRatio = 0;\r\n        _this.m_bias = 0;\r\n        // Solver shared\r\n        _this.m_localAnchorA = new b2Math_1.b2Vec2();\r\n        _this.m_localAnchorB = new b2Math_1.b2Vec2();\r\n        _this.m_referenceAngle = 0;\r\n        _this.m_gamma = 0;\r\n        _this.m_impulse = new b2Math_1.b2Vec3(0, 0, 0);\r\n        // Solver temp\r\n        _this.m_indexA = 0;\r\n        _this.m_indexB = 0;\r\n        _this.m_rA = new b2Math_1.b2Vec2();\r\n        _this.m_rB = new b2Math_1.b2Vec2();\r\n        _this.m_localCenterA = new b2Math_1.b2Vec2();\r\n        _this.m_localCenterB = new b2Math_1.b2Vec2();\r\n        _this.m_invMassA = 0;\r\n        _this.m_invMassB = 0;\r\n        _this.m_invIA = 0;\r\n        _this.m_invIB = 0;\r\n        _this.m_mass = new b2Math_1.b2Mat33();\r\n        _this.m_qA = new b2Math_1.b2Rot();\r\n        _this.m_qB = new b2Math_1.b2Rot();\r\n        _this.m_lalcA = new b2Math_1.b2Vec2();\r\n        _this.m_lalcB = new b2Math_1.b2Vec2();\r\n        _this.m_K = new b2Math_1.b2Mat33();\r\n        _this.m_frequencyHz = b2Settings_1.b2Maybe(def.frequencyHz, 0);\r\n        _this.m_dampingRatio = b2Settings_1.b2Maybe(def.dampingRatio, 0);\r\n        _this.m_localAnchorA.Copy(b2Settings_1.b2Maybe(def.localAnchorA, b2Math_1.b2Vec2.ZERO));\r\n        _this.m_localAnchorB.Copy(b2Settings_1.b2Maybe(def.localAnchorB, b2Math_1.b2Vec2.ZERO));\r\n        _this.m_referenceAngle = b2Settings_1.b2Maybe(def.referenceAngle, 0);\r\n        _this.m_impulse.SetZero();\r\n        return _this;\r\n    }\r\n    b2WeldJoint.prototype.InitVelocityConstraints = function (data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        var aA = data.positions[this.m_indexA].a;\r\n        var vA = data.velocities[this.m_indexA].v;\r\n        var wA = data.velocities[this.m_indexA].w;\r\n        var aB = data.positions[this.m_indexB].a;\r\n        var vB = data.velocities[this.m_indexB].v;\r\n        var wB = data.velocities[this.m_indexB].w;\r\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        b2Math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // J = [-I -r1_skew I r2_skew]\r\n        //     [ 0       -1 0       1]\r\n        // r_skew = [-ry; rx]\r\n        // Matlab\r\n        // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n        //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n        //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n        var mA = this.m_invMassA, mB = this.m_invMassB;\r\n        var iA = this.m_invIA, iB = this.m_invIB;\r\n        var K = this.m_K;\r\n        K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\r\n        K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\r\n        K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\r\n        K.ex.y = K.ey.x;\r\n        K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\r\n        K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\r\n        K.ex.z = K.ez.x;\r\n        K.ey.z = K.ez.y;\r\n        K.ez.z = iA + iB;\r\n        if (this.m_frequencyHz > 0) {\r\n            K.GetInverse22(this.m_mass);\r\n            var invM = iA + iB;\r\n            var m = invM > 0 ? 1 / invM : 0;\r\n            var C = aB - aA - this.m_referenceAngle;\r\n            // Frequency\r\n            var omega = 2 * b2Settings_1.b2_pi * this.m_frequencyHz;\r\n            // Damping coefficient\r\n            var d = 2 * m * this.m_dampingRatio * omega;\r\n            // Spring stiffness\r\n            var k = m * omega * omega;\r\n            // magic formulas\r\n            var h = data.step.dt;\r\n            this.m_gamma = h * (d + h * k);\r\n            this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\r\n            this.m_bias = C * h * k * this.m_gamma;\r\n            invM += this.m_gamma;\r\n            this.m_mass.ez.z = invM !== 0 ? 1 / invM : 0;\r\n        }\r\n        else {\r\n            K.GetSymInverse33(this.m_mass);\r\n            this.m_gamma = 0;\r\n            this.m_bias = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Scale impulses to support a variable time step.\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            // b2Vec2 P(m_impulse.x, m_impulse.y);\r\n            var P = b2WeldJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Math_1.b2Vec2.CrossVV(this.m_rA, P) + this.m_impulse.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Math_1.b2Vec2.CrossVV(this.m_rB, P) + this.m_impulse.z);\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    };\r\n    b2WeldJoint.prototype.SolveVelocityConstraints = function (data) {\r\n        var vA = data.velocities[this.m_indexA].v;\r\n        var wA = data.velocities[this.m_indexA].w;\r\n        var vB = data.velocities[this.m_indexB].v;\r\n        var wB = data.velocities[this.m_indexB].w;\r\n        var mA = this.m_invMassA, mB = this.m_invMassB;\r\n        var iA = this.m_invIA, iB = this.m_invIB;\r\n        if (this.m_frequencyHz > 0) {\r\n            var Cdot2 = wB - wA;\r\n            var impulse2 = -this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z);\r\n            this.m_impulse.z += impulse2;\r\n            wA -= iA * impulse2;\r\n            wB += iB * impulse2;\r\n            // b2Vec2 Cdot1 = vB + b2Vec2.CrossSV(wB, this.m_rB) - vA - b2Vec2.CrossSV(wA, this.m_rA);\r\n            var Cdot1 = b2Math_1.b2Vec2.SubVV(b2Math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Math_1.b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\r\n            // b2Vec2 impulse1 = -b2Mul22(m_mass, Cdot1);\r\n            var impulse1 = b2Math_1.b2Mat33.MulM33XY(this.m_mass, Cdot1.x, Cdot1.y, b2WeldJoint.SolveVelocityConstraints_s_impulse1).SelfNeg();\r\n            this.m_impulse.x += impulse1.x;\r\n            this.m_impulse.y += impulse1.y;\r\n            // b2Vec2 P = impulse1;\r\n            var P = impulse1;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            // wA -= iA * b2Cross(m_rA, P);\r\n            wA -= iA * b2Math_1.b2Vec2.CrossVV(this.m_rA, P);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            // wB += iB * b2Cross(m_rB, P);\r\n            wB += iB * b2Math_1.b2Vec2.CrossVV(this.m_rB, P);\r\n        }\r\n        else {\r\n            // b2Vec2 Cdot1 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA);\r\n            var Cdot1 = b2Math_1.b2Vec2.SubVV(b2Math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Math_1.b2Vec2.s_t1), b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\r\n            var Cdot2 = wB - wA;\r\n            // b2Vec3 const Cdot(Cdot1.x, Cdot1.y, Cdot2);\r\n            // b2Vec3 impulse = -b2Mul(m_mass, Cdot);\r\n            var impulse = b2Math_1.b2Mat33.MulM33XYZ(this.m_mass, Cdot1.x, Cdot1.y, Cdot2, b2WeldJoint.SolveVelocityConstraints_s_impulse).SelfNeg();\r\n            this.m_impulse.SelfAdd(impulse);\r\n            // b2Vec2 P(impulse.x, impulse.y);\r\n            var P = b2WeldJoint.SolveVelocityConstraints_s_P.Set(impulse.x, impulse.y);\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * (b2Math_1.b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * (b2Math_1.b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    };\r\n    b2WeldJoint.prototype.SolvePositionConstraints = function (data) {\r\n        var cA = data.positions[this.m_indexA].c;\r\n        var aA = data.positions[this.m_indexA].a;\r\n        var cB = data.positions[this.m_indexB].c;\r\n        var aB = data.positions[this.m_indexB].a;\r\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        var mA = this.m_invMassA, mB = this.m_invMassB;\r\n        var iA = this.m_invIA, iB = this.m_invIB;\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        var rA = b2Math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        var rB = b2Math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        var positionError, angularError;\r\n        var K = this.m_K;\r\n        K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\r\n        K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\r\n        K.ez.x = -rA.y * iA - rB.y * iB;\r\n        K.ex.y = K.ey.x;\r\n        K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\r\n        K.ez.y = rA.x * iA + rB.x * iB;\r\n        K.ex.z = K.ez.x;\r\n        K.ey.z = K.ez.y;\r\n        K.ez.z = iA + iB;\r\n        if (this.m_frequencyHz > 0) {\r\n            // b2Vec2 C1 =  cB + rB - cA - rA;\r\n            var C1 = b2Math_1.b2Vec2.SubVV(b2Math_1.b2Vec2.AddVV(cB, rB, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.AddVV(cA, rA, b2Math_1.b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);\r\n            positionError = C1.Length();\r\n            angularError = 0;\r\n            // b2Vec2 P = -K.Solve22(C1);\r\n            var P = K.Solve22(C1.x, C1.y, b2WeldJoint.SolvePositionConstraints_s_P).SelfNeg();\r\n            // cA -= mA * P;\r\n            cA.SelfMulSub(mA, P);\r\n            aA -= iA * b2Math_1.b2Vec2.CrossVV(rA, P);\r\n            // cB += mB * P;\r\n            cB.SelfMulAdd(mB, P);\r\n            aB += iB * b2Math_1.b2Vec2.CrossVV(rB, P);\r\n        }\r\n        else {\r\n            // b2Vec2 C1 =  cB + rB - cA - rA;\r\n            var C1 = b2Math_1.b2Vec2.SubVV(b2Math_1.b2Vec2.AddVV(cB, rB, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.AddVV(cA, rA, b2Math_1.b2Vec2.s_t1), b2WeldJoint.SolvePositionConstraints_s_C1);\r\n            var C2 = aB - aA - this.m_referenceAngle;\r\n            positionError = C1.Length();\r\n            angularError = b2Math_1.b2Abs(C2);\r\n            // b2Vec3 C(C1.x, C1.y, C2);\r\n            // b2Vec3 impulse = -K.Solve33(C);\r\n            var impulse = K.Solve33(C1.x, C1.y, C2, b2WeldJoint.SolvePositionConstraints_s_impulse).SelfNeg();\r\n            // b2Vec2 P(impulse.x, impulse.y);\r\n            var P = b2WeldJoint.SolvePositionConstraints_s_P.Set(impulse.x, impulse.y);\r\n            // cA -= mA * P;\r\n            cA.SelfMulSub(mA, P);\r\n            aA -= iA * (b2Math_1.b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\r\n            // cB += mB * P;\r\n            cB.SelfMulAdd(mB, P);\r\n            aB += iB * (b2Math_1.b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\r\n        }\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return positionError <= b2Settings_1.b2_linearSlop && angularError <= b2Settings_1.b2_angularSlop;\r\n    };\r\n    b2WeldJoint.prototype.GetAnchorA = function (out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    };\r\n    b2WeldJoint.prototype.GetAnchorB = function (out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    };\r\n    b2WeldJoint.prototype.GetReactionForce = function (inv_dt, out) {\r\n        // b2Vec2 P(this.m_impulse.x, this.m_impulse.y);\r\n        // return inv_dt * P;\r\n        out.x = inv_dt * this.m_impulse.x;\r\n        out.y = inv_dt * this.m_impulse.y;\r\n        return out;\r\n    };\r\n    b2WeldJoint.prototype.GetReactionTorque = function (inv_dt) {\r\n        return inv_dt * this.m_impulse.z;\r\n    };\r\n    b2WeldJoint.prototype.GetLocalAnchorA = function () { return this.m_localAnchorA; };\r\n    b2WeldJoint.prototype.GetLocalAnchorB = function () { return this.m_localAnchorB; };\r\n    b2WeldJoint.prototype.GetReferenceAngle = function () { return this.m_referenceAngle; };\r\n    b2WeldJoint.prototype.SetFrequency = function (hz) { this.m_frequencyHz = hz; };\r\n    b2WeldJoint.prototype.GetFrequency = function () { return this.m_frequencyHz; };\r\n    b2WeldJoint.prototype.SetDampingRatio = function (ratio) { this.m_dampingRatio = ratio; };\r\n    b2WeldJoint.prototype.GetDampingRatio = function () { return this.m_dampingRatio; };\r\n    b2WeldJoint.prototype.Dump = function (log) {\r\n        var indexA = this.m_bodyA.m_islandIndex;\r\n        var indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2WeldJointDef = new b2WeldJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\r\n        log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n        log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    };\r\n    b2WeldJoint.InitVelocityConstraints_s_P = new b2Math_1.b2Vec2();\r\n    b2WeldJoint.SolveVelocityConstraints_s_Cdot1 = new b2Math_1.b2Vec2();\r\n    b2WeldJoint.SolveVelocityConstraints_s_impulse1 = new b2Math_1.b2Vec2();\r\n    b2WeldJoint.SolveVelocityConstraints_s_impulse = new b2Math_1.b2Vec3();\r\n    b2WeldJoint.SolveVelocityConstraints_s_P = new b2Math_1.b2Vec2();\r\n    b2WeldJoint.SolvePositionConstraints_s_C1 = new b2Math_1.b2Vec2();\r\n    b2WeldJoint.SolvePositionConstraints_s_P = new b2Math_1.b2Vec2();\r\n    b2WeldJoint.SolvePositionConstraints_s_impulse = new b2Math_1.b2Vec3();\r\n    return b2WeldJoint;\r\n}(b2Joint_1.b2Joint));\r\nexports.b2WeldJoint = b2WeldJoint;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2WeldJoint.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Dynamics/Joints/b2WeldJoint.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\nimport { b2_pi, b2_linearSlop, b2_angularSlop, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Vec2, b2Vec3, b2Mat33, b2Rot, XY } from \"../../Common/b2Math\";\r\nimport { b2Body } from \"../b2Body\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2IJointDef } from \"./b2Joint\";\r\nimport { b2SolverData } from \"../b2TimeStep\";\r\n\r\nexport interface b2IWeldJointDef extends b2IJointDef {\r\n  localAnchorA?: XY;\r\n\r\n  localAnchorB?: XY;\r\n\r\n  referenceAngle?: number;\r\n\r\n  frequencyHz?: number;\r\n\r\n  dampingRatio?: number;\r\n}\r\n\r\n/// Weld joint definition. You need to specify local anchor points\r\n/// where they are attached and the relative body angle. The position\r\n/// of the anchor points is important for computing the reaction torque.\r\nexport class b2WeldJointDef extends b2JointDef implements b2IWeldJointDef {\r\n  public readonly localAnchorA: b2Vec2 = new b2Vec2();\r\n\r\n  public readonly localAnchorB: b2Vec2 = new b2Vec2();\r\n\r\n  public referenceAngle: number = 0;\r\n\r\n  public frequencyHz: number = 0;\r\n\r\n  public dampingRatio: number = 0;\r\n\r\n  constructor() {\r\n    super(b2JointType.e_weldJoint);\r\n  }\r\n\r\n  public Initialize(bA: b2Body, bB: b2Body, anchor: b2Vec2): void {\r\n    this.bodyA = bA;\r\n    this.bodyB = bB;\r\n    this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n    this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n    this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();\r\n  }\r\n}\r\n\r\nexport class b2WeldJoint extends b2Joint {\r\n  public m_frequencyHz: number = 0;\r\n  public m_dampingRatio: number = 0;\r\n  public m_bias: number = 0;\r\n\r\n  // Solver shared\r\n  public readonly m_localAnchorA: b2Vec2 = new b2Vec2();\r\n  public readonly m_localAnchorB: b2Vec2 = new b2Vec2();\r\n  public m_referenceAngle: number = 0;\r\n  public m_gamma: number = 0;\r\n  public readonly m_impulse: b2Vec3 = new b2Vec3(0, 0, 0);\r\n\r\n  // Solver temp\r\n  public m_indexA: number = 0;\r\n  public m_indexB: number = 0;\r\n  public readonly m_rA: b2Vec2 = new b2Vec2();\r\n  public readonly m_rB: b2Vec2 = new b2Vec2();\r\n  public readonly m_localCenterA: b2Vec2 = new b2Vec2();\r\n  public readonly m_localCenterB: b2Vec2 = new b2Vec2();\r\n  public m_invMassA: number = 0;\r\n  public m_invMassB: number = 0;\r\n  public m_invIA: number = 0;\r\n  public m_invIB: number = 0;\r\n  public readonly m_mass: b2Mat33 = new b2Mat33();\r\n\r\n  public readonly m_qA: b2Rot = new b2Rot();\r\n  public readonly m_qB: b2Rot = new b2Rot();\r\n  public readonly m_lalcA: b2Vec2 = new b2Vec2();\r\n  public readonly m_lalcB: b2Vec2 = new b2Vec2();\r\n  public readonly m_K: b2Mat33 = new b2Mat33();\r\n\r\n  constructor(def: b2IWeldJointDef) {\r\n    super(def);\r\n\r\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\r\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\r\n\r\n    this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\r\n    this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\r\n    this.m_referenceAngle = b2Maybe(def.referenceAngle, 0);\r\n    this.m_impulse.SetZero();\r\n  }\r\n\r\n  private static InitVelocityConstraints_s_P = new b2Vec2();\r\n  public InitVelocityConstraints(data: b2SolverData): void {\r\n    this.m_indexA = this.m_bodyA.m_islandIndex;\r\n    this.m_indexB = this.m_bodyB.m_islandIndex;\r\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n    this.m_invMassA = this.m_bodyA.m_invMass;\r\n    this.m_invMassB = this.m_bodyB.m_invMass;\r\n    this.m_invIA = this.m_bodyA.m_invI;\r\n    this.m_invIB = this.m_bodyB.m_invI;\r\n\r\n    const aA: number = data.positions[this.m_indexA].a;\r\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\r\n    let wA: number = data.velocities[this.m_indexA].w;\r\n\r\n    const aB: number = data.positions[this.m_indexB].a;\r\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\r\n    let wB: number = data.velocities[this.m_indexB].w;\r\n\r\n    const qA: b2Rot = this.m_qA.SetAngle(aA), qB: b2Rot = this.m_qB.SetAngle(aB);\r\n\r\n    // m_rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n    b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n    // m_rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n    b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n\r\n    // J = [-I -r1_skew I r2_skew]\r\n    //     [ 0       -1 0       1]\r\n    // r_skew = [-ry; rx]\r\n\r\n    // Matlab\r\n    // K = [ mA+r1y^2*iA+mB+r2y^2*iB,  -r1y*iA*r1x-r2y*iB*r2x,          -r1y*iA-r2y*iB]\r\n    //     [  -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB,           r1x*iA+r2x*iB]\r\n    //     [          -r1y*iA-r2y*iB,           r1x*iA+r2x*iB,                   iA+iB]\r\n\r\n    const mA: number = this.m_invMassA, mB: number = this.m_invMassB;\r\n    const iA: number = this.m_invIA, iB: number = this.m_invIB;\r\n\r\n    const K: b2Mat33 = this.m_K;\r\n    K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y * iB;\r\n    K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\r\n    K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\r\n    K.ex.y = K.ey.x;\r\n    K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x * iB;\r\n    K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\r\n    K.ex.z = K.ez.x;\r\n    K.ey.z = K.ez.y;\r\n    K.ez.z = iA + iB;\r\n\r\n    if (this.m_frequencyHz > 0) {\r\n      K.GetInverse22(this.m_mass);\r\n\r\n      let invM: number = iA + iB;\r\n      const m: number = invM > 0 ? 1 / invM : 0;\r\n\r\n      const C: number = aB - aA - this.m_referenceAngle;\r\n\r\n      // Frequency\r\n      const omega: number = 2 * b2_pi * this.m_frequencyHz;\r\n\r\n      // Damping coefficient\r\n      const d: number = 2 * m * this.m_dampingRatio * omega;\r\n\r\n      // Spring stiffness\r\n      const k: number = m * omega * omega;\r\n\r\n      // magic formulas\r\n      const h: number = data.step.dt;\r\n      this.m_gamma = h * (d + h * k);\r\n      this.m_gamma = this.m_gamma !== 0 ? 1 / this.m_gamma : 0;\r\n      this.m_bias = C * h * k * this.m_gamma;\r\n\r\n      invM += this.m_gamma;\r\n      this.m_mass.ez.z = invM !== 0 ? 1 / invM : 0;\r\n    } else {\r\n      K.GetSymInverse33(this.m_mass);\r\n      this.m_gamma = 0;\r\n      this.m_bias = 0;\r\n    }\r\n\r\n    if (data.step.warmStarting) {\r\n      // Scale impulses to support a variable time step.\r\n      this.m_impulse.SelfMul(data.step.dtRatio);\r\n\r\n      // b2Vec2 P(m_impulse.x, m_impulse.y);\r\n      const P: b2Vec2 = b2WeldJoint.InitVelocityConstraints_s_P.Set(this.m_impulse.x, this.m_impulse.y);\r\n\r\n      // vA -= mA * P;\r\n      vA.SelfMulSub(mA, P);\r\n      wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + this.m_impulse.z);\r\n\r\n      // vB += mB * P;\r\n      vB.SelfMulAdd(mB, P);\r\n      wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + this.m_impulse.z);\r\n    } else {\r\n      this.m_impulse.SetZero();\r\n    }\r\n\r\n    // data.velocities[this.m_indexA].v = vA;\r\n    data.velocities[this.m_indexA].w = wA;\r\n    // data.velocities[this.m_indexB].v = vB;\r\n    data.velocities[this.m_indexB].w = wB;\r\n  }\r\n\r\n  private static SolveVelocityConstraints_s_Cdot1 = new b2Vec2();\r\n  private static SolveVelocityConstraints_s_impulse1 = new b2Vec2();\r\n  private static SolveVelocityConstraints_s_impulse = new b2Vec3();\r\n  private static SolveVelocityConstraints_s_P = new b2Vec2();\r\n  public SolveVelocityConstraints(data: b2SolverData): void {\r\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\r\n    let wA: number = data.velocities[this.m_indexA].w;\r\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\r\n    let wB: number = data.velocities[this.m_indexB].w;\r\n\r\n    const mA: number = this.m_invMassA, mB: number = this.m_invMassB;\r\n    const iA: number = this.m_invIA, iB: number = this.m_invIB;\r\n\r\n    if (this.m_frequencyHz > 0) {\r\n      const Cdot2: number = wB - wA;\r\n\r\n      const impulse2: number = -this.m_mass.ez.z * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z);\r\n      this.m_impulse.z += impulse2;\r\n\r\n      wA -= iA * impulse2;\r\n      wB += iB * impulse2;\r\n\r\n      // b2Vec2 Cdot1 = vB + b2Vec2.CrossSV(wB, this.m_rB) - vA - b2Vec2.CrossSV(wA, this.m_rA);\r\n      const Cdot1: b2Vec2 = b2Vec2.SubVV(\r\n        b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0),\r\n        b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1),\r\n        b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\r\n\r\n      // b2Vec2 impulse1 = -b2Mul22(m_mass, Cdot1);\r\n      const impulse1: b2Vec2 = b2Mat33.MulM33XY(this.m_mass, Cdot1.x, Cdot1.y, b2WeldJoint.SolveVelocityConstraints_s_impulse1).SelfNeg();\r\n      this.m_impulse.x += impulse1.x;\r\n      this.m_impulse.y += impulse1.y;\r\n\r\n      // b2Vec2 P = impulse1;\r\n      const P: b2Vec2 = impulse1;\r\n\r\n      // vA -= mA * P;\r\n      vA.SelfMulSub(mA, P);\r\n      // wA -= iA * b2Cross(m_rA, P);\r\n      wA -= iA * b2Vec2.CrossVV(this.m_rA, P);\r\n\r\n      // vB += mB * P;\r\n      vB.SelfMulAdd(mB, P);\r\n      // wB += iB * b2Cross(m_rB, P);\r\n      wB += iB * b2Vec2.CrossVV(this.m_rB, P);\r\n    } else {\r\n      // b2Vec2 Cdot1 = vB + b2Cross(wB, this.m_rB) - vA - b2Cross(wA, this.m_rA);\r\n      const Cdot1: b2Vec2 = b2Vec2.SubVV(\r\n        b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2Vec2.s_t0),\r\n        b2Vec2.AddVCrossSV(vA, wA, this.m_rA, b2Vec2.s_t1),\r\n        b2WeldJoint.SolveVelocityConstraints_s_Cdot1);\r\n      const Cdot2: number = wB - wA;\r\n      // b2Vec3 const Cdot(Cdot1.x, Cdot1.y, Cdot2);\r\n\r\n      // b2Vec3 impulse = -b2Mul(m_mass, Cdot);\r\n      const impulse: b2Vec3 = b2Mat33.MulM33XYZ(this.m_mass, Cdot1.x, Cdot1.y, Cdot2, b2WeldJoint.SolveVelocityConstraints_s_impulse).SelfNeg();\r\n      this.m_impulse.SelfAdd(impulse);\r\n\r\n      // b2Vec2 P(impulse.x, impulse.y);\r\n      const P: b2Vec2 = b2WeldJoint.SolveVelocityConstraints_s_P.Set(impulse.x, impulse.y);\r\n\r\n      // vA -= mA * P;\r\n      vA.SelfMulSub(mA, P);\r\n      wA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\r\n\r\n      // vB += mB * P;\r\n      vB.SelfMulAdd(mB, P);\r\n      wB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\r\n    }\r\n\r\n    // data.velocities[this.m_indexA].v = vA;\r\n    data.velocities[this.m_indexA].w = wA;\r\n    // data.velocities[this.m_indexB].v = vB;\r\n    data.velocities[this.m_indexB].w = wB;\r\n  }\r\n\r\n  private static SolvePositionConstraints_s_C1 = new b2Vec2();\r\n  private static SolvePositionConstraints_s_P = new b2Vec2();\r\n  private static SolvePositionConstraints_s_impulse = new b2Vec3();\r\n  public SolvePositionConstraints(data: b2SolverData): boolean {\r\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\r\n    let aA: number = data.positions[this.m_indexA].a;\r\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\r\n    let aB: number = data.positions[this.m_indexB].a;\r\n\r\n    const qA: b2Rot = this.m_qA.SetAngle(aA), qB: b2Rot = this.m_qB.SetAngle(aB);\r\n\r\n    const mA: number = this.m_invMassA, mB: number = this.m_invMassB;\r\n    const iA: number = this.m_invIA, iB: number = this.m_invIB;\r\n\r\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n\r\n    let positionError: number, angularError: number;\r\n\r\n    const K: b2Mat33 = this.m_K;\r\n    K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\r\n    K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\r\n    K.ez.x = -rA.y * iA - rB.y * iB;\r\n    K.ex.y = K.ey.x;\r\n    K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\r\n    K.ez.y = rA.x * iA + rB.x * iB;\r\n    K.ex.z = K.ez.x;\r\n    K.ey.z = K.ez.y;\r\n    K.ez.z = iA + iB;\r\n\r\n    if (this.m_frequencyHz > 0) {\r\n      // b2Vec2 C1 =  cB + rB - cA - rA;\r\n      const C1 =\r\n        b2Vec2.SubVV(\r\n          b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\r\n          b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\r\n          b2WeldJoint.SolvePositionConstraints_s_C1);\r\n      positionError = C1.Length();\r\n      angularError = 0;\r\n\r\n      // b2Vec2 P = -K.Solve22(C1);\r\n      const P: b2Vec2 = K.Solve22(C1.x, C1.y, b2WeldJoint.SolvePositionConstraints_s_P).SelfNeg();\r\n\r\n      // cA -= mA * P;\r\n      cA.SelfMulSub(mA, P);\r\n      aA -= iA * b2Vec2.CrossVV(rA, P);\r\n\r\n      // cB += mB * P;\r\n      cB.SelfMulAdd(mB, P);\r\n      aB += iB * b2Vec2.CrossVV(rB, P);\r\n    } else {\r\n      // b2Vec2 C1 =  cB + rB - cA - rA;\r\n      const C1 =\r\n        b2Vec2.SubVV(\r\n          b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\r\n          b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\r\n          b2WeldJoint.SolvePositionConstraints_s_C1);\r\n      const C2: number = aB - aA - this.m_referenceAngle;\r\n\r\n      positionError = C1.Length();\r\n      angularError = b2Abs(C2);\r\n\r\n      // b2Vec3 C(C1.x, C1.y, C2);\r\n\r\n      // b2Vec3 impulse = -K.Solve33(C);\r\n      const impulse: b2Vec3 = K.Solve33(C1.x, C1.y, C2, b2WeldJoint.SolvePositionConstraints_s_impulse).SelfNeg();\r\n\r\n      // b2Vec2 P(impulse.x, impulse.y);\r\n      const P: b2Vec2 = b2WeldJoint.SolvePositionConstraints_s_P.Set(impulse.x, impulse.y);\r\n\r\n      // cA -= mA * P;\r\n      cA.SelfMulSub(mA, P);\r\n      aA -= iA * (b2Vec2.CrossVV(this.m_rA, P) + impulse.z);\r\n\r\n      // cB += mB * P;\r\n      cB.SelfMulAdd(mB, P);\r\n      aB += iB * (b2Vec2.CrossVV(this.m_rB, P) + impulse.z);\r\n    }\r\n\r\n    // data.positions[this.m_indexA].c = cA;\r\n    data.positions[this.m_indexA].a = aA;\r\n    // data.positions[this.m_indexB].c = cB;\r\n    data.positions[this.m_indexB].a = aB;\r\n\r\n    return positionError <= b2_linearSlop && angularError <= b2_angularSlop;\r\n  }\r\n\r\n  public GetAnchorA<T extends XY>(out: T): T {\r\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n  }\r\n\r\n  public GetAnchorB<T extends XY>(out: T): T {\r\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n  }\r\n\r\n  public GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\r\n    // b2Vec2 P(this.m_impulse.x, this.m_impulse.y);\r\n    // return inv_dt * P;\r\n    out.x = inv_dt * this.m_impulse.x;\r\n    out.y = inv_dt * this.m_impulse.y;\r\n    return out;\r\n  }\r\n\r\n  public GetReactionTorque(inv_dt: number): number {\r\n    return inv_dt * this.m_impulse.z;\r\n  }\r\n\r\n  public GetLocalAnchorA(): Readonly<b2Vec2> { return this.m_localAnchorA; }\r\n\r\n  public GetLocalAnchorB(): Readonly<b2Vec2> { return this.m_localAnchorB; }\r\n\r\n  public GetReferenceAngle(): number { return this.m_referenceAngle; }\r\n\r\n  public SetFrequency(hz: number): void { this.m_frequencyHz = hz; }\r\n  public GetFrequency(): number { return this.m_frequencyHz; }\r\n\r\n  public SetDampingRatio(ratio: number) { this.m_dampingRatio = ratio; }\r\n  public GetDampingRatio() { return this.m_dampingRatio; }\r\n\r\n  public Dump(log: (format: string, ...args: any[]) => void) {\r\n    const indexA = this.m_bodyA.m_islandIndex;\r\n    const indexB = this.m_bodyB.m_islandIndex;\r\n\r\n    log(\"  const jd: b2WeldJointDef = new b2WeldJointDef();\\n\");\r\n    log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n    log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n    log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n    log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n    log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n    log(\"  jd.referenceAngle = %.15f;\\n\", this.m_referenceAngle);\r\n    log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n    log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n    log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n  }\r\n}\r\n"]}},"error":null,"hash":"564b36d33aa07bfa7a956dbcfc8f9b19","cacheData":{"env":{}}}