{"id":"../node_modules/box2d.package.ts/Dynamics/Joints/b2WheelJoint.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"../../Common/b2Settings","loc":{"line":31,"column":27},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2WheelJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Settings.ts"},{"name":"../../Common/b2Math","loc":{"line":32,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2WheelJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"},{"name":"./b2Joint","loc":{"line":33,"column":24},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2WheelJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2Joint.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nvar b2Settings_1 = require(\"../../Common/b2Settings\");\r\nvar b2Math_1 = require(\"../../Common/b2Math\");\r\nvar b2Joint_1 = require(\"./b2Joint\");\r\n/// Wheel joint definition. This requires defining a line of\r\n/// motion using an axis and an anchor point. The definition uses local\r\n/// anchor points and a local axis so that the initial configuration\r\n/// can violate the constraint slightly. The joint translation is zero\r\n/// when the local anchor points coincide in world space. Using local\r\n/// anchors and a local axis helps when saving and loading a game.\r\nvar b2WheelJointDef = /** @class */ (function (_super) {\r\n    __extends(b2WheelJointDef, _super);\r\n    function b2WheelJointDef() {\r\n        var _this = _super.call(this, b2Joint_1.b2JointType.e_wheelJoint) || this;\r\n        _this.localAnchorA = new b2Math_1.b2Vec2(0, 0);\r\n        _this.localAnchorB = new b2Math_1.b2Vec2(0, 0);\r\n        _this.localAxisA = new b2Math_1.b2Vec2(1, 0);\r\n        _this.enableMotor = false;\r\n        _this.maxMotorTorque = 0;\r\n        _this.motorSpeed = 0;\r\n        _this.frequencyHz = 2;\r\n        _this.dampingRatio = 0.7;\r\n        return _this;\r\n    }\r\n    b2WheelJointDef.prototype.Initialize = function (bA, bB, anchor, axis) {\r\n        this.bodyA = bA;\r\n        this.bodyB = bB;\r\n        this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n        this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n        this.bodyA.GetLocalVector(axis, this.localAxisA);\r\n    };\r\n    return b2WheelJointDef;\r\n}(b2Joint_1.b2JointDef));\r\nexports.b2WheelJointDef = b2WheelJointDef;\r\nvar b2WheelJoint = /** @class */ (function (_super) {\r\n    __extends(b2WheelJoint, _super);\r\n    function b2WheelJoint(def) {\r\n        var _this = _super.call(this, def) || this;\r\n        _this.m_frequencyHz = 0;\r\n        _this.m_dampingRatio = 0;\r\n        // Solver shared\r\n        _this.m_localAnchorA = new b2Math_1.b2Vec2();\r\n        _this.m_localAnchorB = new b2Math_1.b2Vec2();\r\n        _this.m_localXAxisA = new b2Math_1.b2Vec2();\r\n        _this.m_localYAxisA = new b2Math_1.b2Vec2();\r\n        _this.m_impulse = 0;\r\n        _this.m_motorImpulse = 0;\r\n        _this.m_springImpulse = 0;\r\n        _this.m_maxMotorTorque = 0;\r\n        _this.m_motorSpeed = 0;\r\n        _this.m_enableMotor = false;\r\n        // Solver temp\r\n        _this.m_indexA = 0;\r\n        _this.m_indexB = 0;\r\n        _this.m_localCenterA = new b2Math_1.b2Vec2();\r\n        _this.m_localCenterB = new b2Math_1.b2Vec2();\r\n        _this.m_invMassA = 0;\r\n        _this.m_invMassB = 0;\r\n        _this.m_invIA = 0;\r\n        _this.m_invIB = 0;\r\n        _this.m_ax = new b2Math_1.b2Vec2();\r\n        _this.m_ay = new b2Math_1.b2Vec2();\r\n        _this.m_sAx = 0;\r\n        _this.m_sBx = 0;\r\n        _this.m_sAy = 0;\r\n        _this.m_sBy = 0;\r\n        _this.m_mass = 0;\r\n        _this.m_motorMass = 0;\r\n        _this.m_springMass = 0;\r\n        _this.m_bias = 0;\r\n        _this.m_gamma = 0;\r\n        _this.m_qA = new b2Math_1.b2Rot();\r\n        _this.m_qB = new b2Math_1.b2Rot();\r\n        _this.m_lalcA = new b2Math_1.b2Vec2();\r\n        _this.m_lalcB = new b2Math_1.b2Vec2();\r\n        _this.m_rA = new b2Math_1.b2Vec2();\r\n        _this.m_rB = new b2Math_1.b2Vec2();\r\n        _this.m_frequencyHz = b2Settings_1.b2Maybe(def.frequencyHz, 2);\r\n        _this.m_dampingRatio = b2Settings_1.b2Maybe(def.dampingRatio, 0.7);\r\n        _this.m_localAnchorA.Copy(b2Settings_1.b2Maybe(def.localAnchorA, b2Math_1.b2Vec2.ZERO));\r\n        _this.m_localAnchorB.Copy(b2Settings_1.b2Maybe(def.localAnchorB, b2Math_1.b2Vec2.ZERO));\r\n        _this.m_localXAxisA.Copy(b2Settings_1.b2Maybe(def.localAxisA, b2Math_1.b2Vec2.UNITX));\r\n        b2Math_1.b2Vec2.CrossOneV(_this.m_localXAxisA, _this.m_localYAxisA);\r\n        _this.m_maxMotorTorque = b2Settings_1.b2Maybe(def.maxMotorTorque, 0);\r\n        _this.m_motorSpeed = b2Settings_1.b2Maybe(def.motorSpeed, 0);\r\n        _this.m_enableMotor = b2Settings_1.b2Maybe(def.enableMotor, false);\r\n        _this.m_ax.SetZero();\r\n        _this.m_ay.SetZero();\r\n        return _this;\r\n    }\r\n    b2WheelJoint.prototype.GetMotorSpeed = function () {\r\n        return this.m_motorSpeed;\r\n    };\r\n    b2WheelJoint.prototype.GetMaxMotorTorque = function () {\r\n        return this.m_maxMotorTorque;\r\n    };\r\n    b2WheelJoint.prototype.SetSpringFrequencyHz = function (hz) {\r\n        this.m_frequencyHz = hz;\r\n    };\r\n    b2WheelJoint.prototype.GetSpringFrequencyHz = function () {\r\n        return this.m_frequencyHz;\r\n    };\r\n    b2WheelJoint.prototype.SetSpringDampingRatio = function (ratio) {\r\n        this.m_dampingRatio = ratio;\r\n    };\r\n    b2WheelJoint.prototype.GetSpringDampingRatio = function () {\r\n        return this.m_dampingRatio;\r\n    };\r\n    b2WheelJoint.prototype.InitVelocityConstraints = function (data) {\r\n        this.m_indexA = this.m_bodyA.m_islandIndex;\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassA = this.m_bodyA.m_invMass;\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIA = this.m_bodyA.m_invI;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        var mA = this.m_invMassA, mB = this.m_invMassB;\r\n        var iA = this.m_invIA, iB = this.m_invIB;\r\n        var cA = data.positions[this.m_indexA].c;\r\n        var aA = data.positions[this.m_indexA].a;\r\n        var vA = data.velocities[this.m_indexA].v;\r\n        var wA = data.velocities[this.m_indexA].w;\r\n        var cB = data.positions[this.m_indexB].c;\r\n        var aB = data.positions[this.m_indexB].a;\r\n        var vB = data.velocities[this.m_indexB].v;\r\n        var wB = data.velocities[this.m_indexB].w;\r\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // Compute the effective masses.\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        var rA = b2Math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        var rB = b2Math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = cB + rB - cA - rA;\r\n        var d = b2Math_1.b2Vec2.SubVV(b2Math_1.b2Vec2.AddVV(cB, rB, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.AddVV(cA, rA, b2Math_1.b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_d);\r\n        // Point to line constraint\r\n        {\r\n            // m_ay = b2Mul(qA, m_localYAxisA);\r\n            b2Math_1.b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\r\n            // m_sAy = b2Cross(d + rA, m_ay);\r\n            this.m_sAy = b2Math_1.b2Vec2.CrossVV(b2Math_1.b2Vec2.AddVV(d, rA, b2Math_1.b2Vec2.s_t0), this.m_ay);\r\n            // m_sBy = b2Cross(rB, m_ay);\r\n            this.m_sBy = b2Math_1.b2Vec2.CrossVV(rB, this.m_ay);\r\n            this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy * this.m_sBy;\r\n            if (this.m_mass > 0) {\r\n                this.m_mass = 1 / this.m_mass;\r\n            }\r\n        }\r\n        // Spring constraint\r\n        this.m_springMass = 0;\r\n        this.m_bias = 0;\r\n        this.m_gamma = 0;\r\n        if (this.m_frequencyHz > 0) {\r\n            // m_ax = b2Mul(qA, m_localXAxisA);\r\n            b2Math_1.b2Rot.MulRV(qA, this.m_localXAxisA, this.m_ax);\r\n            // m_sAx = b2Cross(d + rA, m_ax);\r\n            this.m_sAx = b2Math_1.b2Vec2.CrossVV(b2Math_1.b2Vec2.AddVV(d, rA, b2Math_1.b2Vec2.s_t0), this.m_ax);\r\n            // m_sBx = b2Cross(rB, m_ax);\r\n            this.m_sBx = b2Math_1.b2Vec2.CrossVV(rB, this.m_ax);\r\n            var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx * this.m_sBx;\r\n            if (invMass > 0) {\r\n                this.m_springMass = 1 / invMass;\r\n                var C = b2Math_1.b2Vec2.DotVV(d, this.m_ax);\r\n                // Frequency\r\n                var omega = 2 * b2Settings_1.b2_pi * this.m_frequencyHz;\r\n                // Damping coefficient\r\n                var damp = 2 * this.m_springMass * this.m_dampingRatio * omega;\r\n                // Spring stiffness\r\n                var k = this.m_springMass * omega * omega;\r\n                // magic formulas\r\n                var h = data.step.dt;\r\n                this.m_gamma = h * (damp + h * k);\r\n                if (this.m_gamma > 0) {\r\n                    this.m_gamma = 1 / this.m_gamma;\r\n                }\r\n                this.m_bias = C * h * k * this.m_gamma;\r\n                this.m_springMass = invMass + this.m_gamma;\r\n                if (this.m_springMass > 0) {\r\n                    this.m_springMass = 1 / this.m_springMass;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.m_springImpulse = 0;\r\n        }\r\n        // Rotational motor\r\n        if (this.m_enableMotor) {\r\n            this.m_motorMass = iA + iB;\r\n            if (this.m_motorMass > 0) {\r\n                this.m_motorMass = 1 / this.m_motorMass;\r\n            }\r\n        }\r\n        else {\r\n            this.m_motorMass = 0;\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        if (data.step.warmStarting) {\r\n            // Account for variable time step.\r\n            this.m_impulse *= data.step.dtRatio;\r\n            this.m_springImpulse *= data.step.dtRatio;\r\n            this.m_motorImpulse *= data.step.dtRatio;\r\n            // b2Vec2 P = m_impulse * m_ay + m_springImpulse * m_ax;\r\n            var P = b2Math_1.b2Vec2.AddVV(b2Math_1.b2Vec2.MulSV(this.m_impulse, this.m_ay, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.MulSV(this.m_springImpulse, this.m_ax, b2Math_1.b2Vec2.s_t1), b2WheelJoint.InitVelocityConstraints_s_P);\r\n            // float32 LA = m_impulse * m_sAy + m_springImpulse * m_sAx + m_motorImpulse;\r\n            var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\r\n            // float32 LB = m_impulse * m_sBy + m_springImpulse * m_sBx + m_motorImpulse;\r\n            var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\r\n            // vA -= m_invMassA * P;\r\n            vA.SelfMulSub(this.m_invMassA, P);\r\n            wA -= this.m_invIA * LA;\r\n            // vB += m_invMassB * P;\r\n            vB.SelfMulAdd(this.m_invMassB, P);\r\n            wB += this.m_invIB * LB;\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n            this.m_springImpulse = 0;\r\n            this.m_motorImpulse = 0;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    };\r\n    b2WheelJoint.prototype.SolveVelocityConstraints = function (data) {\r\n        var mA = this.m_invMassA, mB = this.m_invMassB;\r\n        var iA = this.m_invIA, iB = this.m_invIB;\r\n        var vA = data.velocities[this.m_indexA].v;\r\n        var wA = data.velocities[this.m_indexA].w;\r\n        var vB = data.velocities[this.m_indexB].v;\r\n        var wB = data.velocities[this.m_indexB].w;\r\n        // Solve spring constraint\r\n        {\r\n            var Cdot = b2Math_1.b2Vec2.DotVV(this.m_ax, b2Math_1.b2Vec2.SubVV(vB, vA, b2Math_1.b2Vec2.s_t0)) + this.m_sBx * wB - this.m_sAx * wA;\r\n            var impulse = -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);\r\n            this.m_springImpulse += impulse;\r\n            // b2Vec2 P = impulse * m_ax;\r\n            var P = b2Math_1.b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);\r\n            var LA = impulse * this.m_sAx;\r\n            var LB = impulse * this.m_sBx;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // Solve rotational motor constraint\r\n        {\r\n            var Cdot = wB - wA - this.m_motorSpeed;\r\n            var impulse = -this.m_motorMass * Cdot;\r\n            var oldImpulse = this.m_motorImpulse;\r\n            var maxImpulse = data.step.dt * this.m_maxMotorTorque;\r\n            this.m_motorImpulse = b2Math_1.b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\r\n            impulse = this.m_motorImpulse - oldImpulse;\r\n            wA -= iA * impulse;\r\n            wB += iB * impulse;\r\n        }\r\n        // Solve point to line constraint\r\n        {\r\n            var Cdot = b2Math_1.b2Vec2.DotVV(this.m_ay, b2Math_1.b2Vec2.SubVV(vB, vA, b2Math_1.b2Vec2.s_t0)) + this.m_sBy * wB - this.m_sAy * wA;\r\n            var impulse = -this.m_mass * Cdot;\r\n            this.m_impulse += impulse;\r\n            // b2Vec2 P = impulse * m_ay;\r\n            var P = b2Math_1.b2Vec2.MulSV(impulse, this.m_ay, b2WheelJoint.SolveVelocityConstraints_s_P);\r\n            var LA = impulse * this.m_sAy;\r\n            var LB = impulse * this.m_sBy;\r\n            // vA -= mA * P;\r\n            vA.SelfMulSub(mA, P);\r\n            wA -= iA * LA;\r\n            // vB += mB * P;\r\n            vB.SelfMulAdd(mB, P);\r\n            wB += iB * LB;\r\n        }\r\n        // data.velocities[this.m_indexA].v = vA;\r\n        data.velocities[this.m_indexA].w = wA;\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    };\r\n    b2WheelJoint.prototype.SolvePositionConstraints = function (data) {\r\n        var cA = data.positions[this.m_indexA].c;\r\n        var aA = data.positions[this.m_indexA].a;\r\n        var cB = data.positions[this.m_indexB].c;\r\n        var aB = data.positions[this.m_indexB].a;\r\n        var qA = this.m_qA.SetAngle(aA), qB = this.m_qB.SetAngle(aB);\r\n        // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n        var rA = b2Math_1.b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        var rB = b2Math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 d = (cB - cA) + rB - rA;\r\n        var d = b2Math_1.b2Vec2.AddVV(b2Math_1.b2Vec2.SubVV(cB, cA, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.SubVV(rB, rA, b2Math_1.b2Vec2.s_t1), b2WheelJoint.SolvePositionConstraints_s_d);\r\n        // b2Vec2 ay = b2Mul(qA, m_localYAxisA);\r\n        var ay = b2Math_1.b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\r\n        // float32 sAy = b2Cross(d + rA, ay);\r\n        var sAy = b2Math_1.b2Vec2.CrossVV(b2Math_1.b2Vec2.AddVV(d, rA, b2Math_1.b2Vec2.s_t0), ay);\r\n        // float32 sBy = b2Cross(rB, ay);\r\n        var sBy = b2Math_1.b2Vec2.CrossVV(rB, ay);\r\n        // float32 C = b2Dot(d, ay);\r\n        var C = b2Math_1.b2Vec2.DotVV(d, this.m_ay);\r\n        var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;\r\n        var impulse;\r\n        if (k !== 0) {\r\n            impulse = -C / k;\r\n        }\r\n        else {\r\n            impulse = 0;\r\n        }\r\n        // b2Vec2 P = impulse * ay;\r\n        var P = b2Math_1.b2Vec2.MulSV(impulse, ay, b2WheelJoint.SolvePositionConstraints_s_P);\r\n        var LA = impulse * sAy;\r\n        var LB = impulse * sBy;\r\n        // cA -= m_invMassA * P;\r\n        cA.SelfMulSub(this.m_invMassA, P);\r\n        aA -= this.m_invIA * LA;\r\n        // cB += m_invMassB * P;\r\n        cB.SelfMulAdd(this.m_invMassB, P);\r\n        aB += this.m_invIB * LB;\r\n        // data.positions[this.m_indexA].c = cA;\r\n        data.positions[this.m_indexA].a = aA;\r\n        // data.positions[this.m_indexB].c = cB;\r\n        data.positions[this.m_indexB].a = aB;\r\n        return b2Math_1.b2Abs(C) <= b2Settings_1.b2_linearSlop;\r\n    };\r\n    b2WheelJoint.prototype.GetDefinition = function (def) {\r\n        // DEBUG: b2Assert(false); // TODO\r\n        return def;\r\n    };\r\n    b2WheelJoint.prototype.GetAnchorA = function (out) {\r\n        return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n    };\r\n    b2WheelJoint.prototype.GetAnchorB = function (out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    };\r\n    b2WheelJoint.prototype.GetReactionForce = function (inv_dt, out) {\r\n        // return inv_dt * (m_impulse * m_ay + m_springImpulse * m_ax);\r\n        out.x = inv_dt * (this.m_impulse * this.m_ay.x + this.m_springImpulse * this.m_ax.x);\r\n        out.y = inv_dt * (this.m_impulse * this.m_ay.y + this.m_springImpulse * this.m_ax.y);\r\n        return out;\r\n    };\r\n    b2WheelJoint.prototype.GetReactionTorque = function (inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    };\r\n    b2WheelJoint.prototype.GetLocalAnchorA = function () { return this.m_localAnchorA; };\r\n    b2WheelJoint.prototype.GetLocalAnchorB = function () { return this.m_localAnchorB; };\r\n    b2WheelJoint.prototype.GetLocalAxisA = function () { return this.m_localXAxisA; };\r\n    b2WheelJoint.prototype.GetJointTranslation = function () {\r\n        return this.GetPrismaticJointTranslation();\r\n    };\r\n    b2WheelJoint.prototype.GetJointLinearSpeed = function () {\r\n        return this.GetPrismaticJointSpeed();\r\n    };\r\n    b2WheelJoint.prototype.GetJointAngle = function () {\r\n        return this.GetRevoluteJointAngle();\r\n    };\r\n    b2WheelJoint.prototype.GetJointAngularSpeed = function () {\r\n        return this.GetRevoluteJointSpeed();\r\n    };\r\n    b2WheelJoint.prototype.GetPrismaticJointTranslation = function () {\r\n        var bA = this.m_bodyA;\r\n        var bB = this.m_bodyB;\r\n        var pA = bA.GetWorldPoint(this.m_localAnchorA, new b2Math_1.b2Vec2());\r\n        var pB = bB.GetWorldPoint(this.m_localAnchorB, new b2Math_1.b2Vec2());\r\n        var d = b2Math_1.b2Vec2.SubVV(pB, pA, new b2Math_1.b2Vec2());\r\n        var axis = bA.GetWorldVector(this.m_localXAxisA, new b2Math_1.b2Vec2());\r\n        var translation = b2Math_1.b2Vec2.DotVV(d, axis);\r\n        return translation;\r\n    };\r\n    b2WheelJoint.prototype.GetPrismaticJointSpeed = function () {\r\n        var bA = this.m_bodyA;\r\n        var bB = this.m_bodyB;\r\n        // b2Vec2 rA = b2Mul(bA->m_xf.q, m_localAnchorA - bA->m_sweep.localCenter);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\r\n        var rA = b2Math_1.b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\r\n        // b2Vec2 rB = b2Mul(bB->m_xf.q, m_localAnchorB - bB->m_sweep.localCenter);\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\r\n        var rB = b2Math_1.b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\r\n        // b2Vec2 pA = bA->m_sweep.c + rA;\r\n        var pA = b2Math_1.b2Vec2.AddVV(bA.m_sweep.c, rA, b2Math_1.b2Vec2.s_t0); // pA uses s_t0\r\n        // b2Vec2 pB = bB->m_sweep.c + rB;\r\n        var pB = b2Math_1.b2Vec2.AddVV(bB.m_sweep.c, rB, b2Math_1.b2Vec2.s_t1); // pB uses s_t1\r\n        // b2Vec2 d = pB - pA;\r\n        var d = b2Math_1.b2Vec2.SubVV(pB, pA, b2Math_1.b2Vec2.s_t2); // d uses s_t2\r\n        // b2Vec2 axis = b2Mul(bA.m_xf.q, m_localXAxisA);\r\n        var axis = bA.GetWorldVector(this.m_localXAxisA, new b2Math_1.b2Vec2());\r\n        var vA = bA.m_linearVelocity;\r\n        var vB = bB.m_linearVelocity;\r\n        var wA = bA.m_angularVelocity;\r\n        var wB = bB.m_angularVelocity;\r\n        // float32 speed = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA));\r\n        var speed = b2Math_1.b2Vec2.DotVV(d, b2Math_1.b2Vec2.CrossSV(wA, axis, b2Math_1.b2Vec2.s_t0)) +\r\n            b2Math_1.b2Vec2.DotVV(axis, b2Math_1.b2Vec2.SubVV(b2Math_1.b2Vec2.AddVCrossSV(vB, wB, rB, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.AddVCrossSV(vA, wA, rA, b2Math_1.b2Vec2.s_t1), b2Math_1.b2Vec2.s_t0));\r\n        return speed;\r\n    };\r\n    b2WheelJoint.prototype.GetRevoluteJointAngle = function () {\r\n        // b2Body* bA = this.m_bodyA;\r\n        // b2Body* bB = this.m_bodyB;\r\n        // return bB->this.m_sweep.a - bA->this.m_sweep.a;\r\n        return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a;\r\n    };\r\n    b2WheelJoint.prototype.GetRevoluteJointSpeed = function () {\r\n        var wA = this.m_bodyA.m_angularVelocity;\r\n        var wB = this.m_bodyB.m_angularVelocity;\r\n        return wB - wA;\r\n    };\r\n    b2WheelJoint.prototype.IsMotorEnabled = function () {\r\n        return this.m_enableMotor;\r\n    };\r\n    b2WheelJoint.prototype.EnableMotor = function (flag) {\r\n        if (flag !== this.m_enableMotor) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_enableMotor = flag;\r\n        }\r\n    };\r\n    b2WheelJoint.prototype.SetMotorSpeed = function (speed) {\r\n        if (speed !== this.m_motorSpeed) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_motorSpeed = speed;\r\n        }\r\n    };\r\n    b2WheelJoint.prototype.SetMaxMotorTorque = function (force) {\r\n        if (force !== this.m_maxMotorTorque) {\r\n            this.m_bodyA.SetAwake(true);\r\n            this.m_bodyB.SetAwake(true);\r\n            this.m_maxMotorTorque = force;\r\n        }\r\n    };\r\n    b2WheelJoint.prototype.GetMotorTorque = function (inv_dt) {\r\n        return inv_dt * this.m_motorImpulse;\r\n    };\r\n    b2WheelJoint.prototype.Dump = function (log) {\r\n        var indexA = this.m_bodyA.m_islandIndex;\r\n        var indexB = this.m_bodyB.m_islandIndex;\r\n        log(\"  const jd: b2WheelJointDef = new b2WheelJointDef();\\n\");\r\n        log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n        log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n        log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n        log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n        log(\"  jd.localAxisA.Set(%.15f, %.15f);\\n\", this.m_localXAxisA.x, this.m_localXAxisA.y);\r\n        log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\r\n        log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\r\n        log(\"  jd.maxMotorTorque = %.15f;\\n\", this.m_maxMotorTorque);\r\n        log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n        log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n        log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n    };\r\n    b2WheelJoint.InitVelocityConstraints_s_d = new b2Math_1.b2Vec2();\r\n    b2WheelJoint.InitVelocityConstraints_s_P = new b2Math_1.b2Vec2();\r\n    b2WheelJoint.SolveVelocityConstraints_s_P = new b2Math_1.b2Vec2();\r\n    b2WheelJoint.SolvePositionConstraints_s_d = new b2Math_1.b2Vec2();\r\n    b2WheelJoint.SolvePositionConstraints_s_P = new b2Math_1.b2Vec2();\r\n    return b2WheelJoint;\r\n}(b2Joint_1.b2Joint));\r\nexports.b2WheelJoint = b2WheelJoint;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2WheelJoint.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Dynamics/Joints/b2WheelJoint.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n* Copyright (c) 2006-2011 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2_pi, b2_linearSlop, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Abs, b2Clamp, b2Vec2, b2Rot, XY } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2IJointDef } from \"./b2Joint\";\r\nimport { b2SolverData } from \"../b2TimeStep\";\r\nimport { b2Body } from \"../b2Body\";\r\n\r\nexport interface b2IWheelJointDef extends b2IJointDef {\r\n  localAnchorA?: XY;\r\n\r\n  localAnchorB?: XY;\r\n\r\n  localAxisA?: XY;\r\n\r\n  enableMotor?: boolean;\r\n\r\n  maxMotorTorque?: number;\r\n\r\n  motorSpeed?: number;\r\n\r\n  frequencyHz?: number;\r\n\r\n  dampingRatio?: number;\r\n}\r\n\r\n/// Wheel joint definition. This requires defining a line of\r\n/// motion using an axis and an anchor point. The definition uses local\r\n/// anchor points and a local axis so that the initial configuration\r\n/// can violate the constraint slightly. The joint translation is zero\r\n/// when the local anchor points coincide in world space. Using local\r\n/// anchors and a local axis helps when saving and loading a game.\r\nexport class b2WheelJointDef extends b2JointDef implements b2IWheelJointDef {\r\n  public readonly localAnchorA: b2Vec2 = new b2Vec2(0, 0);\r\n\r\n  public readonly localAnchorB: b2Vec2 = new b2Vec2(0, 0);\r\n\r\n  public readonly localAxisA: b2Vec2 = new b2Vec2(1, 0);\r\n\r\n  public enableMotor = false;\r\n\r\n  public maxMotorTorque: number = 0;\r\n\r\n  public motorSpeed: number = 0;\r\n\r\n  public frequencyHz: number = 2;\r\n\r\n  public dampingRatio: number = 0.7;\r\n\r\n  constructor() {\r\n    super(b2JointType.e_wheelJoint);\r\n  }\r\n\r\n  public Initialize(bA: b2Body, bB: b2Body, anchor: b2Vec2, axis: b2Vec2): void {\r\n    this.bodyA = bA;\r\n    this.bodyB = bB;\r\n    this.bodyA.GetLocalPoint(anchor, this.localAnchorA);\r\n    this.bodyB.GetLocalPoint(anchor, this.localAnchorB);\r\n    this.bodyA.GetLocalVector(axis, this.localAxisA);\r\n  }\r\n}\r\n\r\nexport class b2WheelJoint extends b2Joint {\r\n  public m_frequencyHz: number = 0;\r\n  public m_dampingRatio: number = 0;\r\n\r\n  // Solver shared\r\n  public readonly m_localAnchorA: b2Vec2 = new b2Vec2();\r\n  public readonly m_localAnchorB: b2Vec2 = new b2Vec2();\r\n  public readonly m_localXAxisA: b2Vec2 = new b2Vec2();\r\n  public readonly m_localYAxisA: b2Vec2 = new b2Vec2();\r\n\r\n  public m_impulse: number = 0;\r\n  public m_motorImpulse: number = 0;\r\n  public m_springImpulse: number = 0;\r\n\r\n  public m_maxMotorTorque: number = 0;\r\n  public m_motorSpeed: number = 0;\r\n  public m_enableMotor = false;\r\n\r\n  // Solver temp\r\n  public m_indexA: number = 0;\r\n  public m_indexB: number = 0;\r\n  public readonly m_localCenterA: b2Vec2 = new b2Vec2();\r\n  public readonly m_localCenterB: b2Vec2 = new b2Vec2();\r\n  public m_invMassA: number = 0;\r\n  public m_invMassB: number = 0;\r\n  public m_invIA: number = 0;\r\n  public m_invIB: number = 0;\r\n\r\n  public readonly m_ax: b2Vec2 = new b2Vec2();\r\n  public readonly m_ay: b2Vec2 = new b2Vec2();\r\n  public m_sAx: number = 0;\r\n  public m_sBx: number = 0;\r\n  public m_sAy: number = 0;\r\n  public m_sBy: number = 0;\r\n\r\n  public m_mass: number = 0;\r\n  public m_motorMass: number = 0;\r\n  public m_springMass: number = 0;\r\n\r\n  public m_bias: number = 0;\r\n  public m_gamma: number = 0;\r\n\r\n  public readonly m_qA: b2Rot = new b2Rot();\r\n  public readonly m_qB: b2Rot = new b2Rot();\r\n  public readonly m_lalcA: b2Vec2 = new b2Vec2();\r\n  public readonly m_lalcB: b2Vec2 = new b2Vec2();\r\n  public readonly m_rA: b2Vec2 = new b2Vec2();\r\n  public readonly m_rB: b2Vec2 = new b2Vec2();\r\n\r\n  constructor(def: b2IWheelJointDef) {\r\n    super(def);\r\n\r\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 2);\r\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0.7);\r\n\r\n    this.m_localAnchorA.Copy(b2Maybe(def.localAnchorA, b2Vec2.ZERO));\r\n    this.m_localAnchorB.Copy(b2Maybe(def.localAnchorB, b2Vec2.ZERO));\r\n    this.m_localXAxisA.Copy(b2Maybe(def.localAxisA, b2Vec2.UNITX));\r\n    b2Vec2.CrossOneV(this.m_localXAxisA, this.m_localYAxisA);\r\n\r\n    this.m_maxMotorTorque = b2Maybe(def.maxMotorTorque, 0);\r\n    this.m_motorSpeed = b2Maybe(def.motorSpeed, 0);\r\n    this.m_enableMotor = b2Maybe(def.enableMotor, false);\r\n\r\n    this.m_ax.SetZero();\r\n    this.m_ay.SetZero();\r\n  }\r\n\r\n  public GetMotorSpeed(): number {\r\n    return this.m_motorSpeed;\r\n  }\r\n\r\n  public GetMaxMotorTorque(): number {\r\n    return this.m_maxMotorTorque;\r\n  }\r\n\r\n  public SetSpringFrequencyHz(hz: number): void {\r\n    this.m_frequencyHz = hz;\r\n  }\r\n\r\n  public GetSpringFrequencyHz(): number {\r\n    return this.m_frequencyHz;\r\n  }\r\n\r\n  public SetSpringDampingRatio(ratio: number): void {\r\n    this.m_dampingRatio = ratio;\r\n  }\r\n\r\n  public GetSpringDampingRatio(): number {\r\n    return this.m_dampingRatio;\r\n  }\r\n\r\n  private static InitVelocityConstraints_s_d = new b2Vec2();\r\n  private static InitVelocityConstraints_s_P = new b2Vec2();\r\n  public InitVelocityConstraints(data: b2SolverData): void {\r\n    this.m_indexA = this.m_bodyA.m_islandIndex;\r\n    this.m_indexB = this.m_bodyB.m_islandIndex;\r\n    this.m_localCenterA.Copy(this.m_bodyA.m_sweep.localCenter);\r\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n    this.m_invMassA = this.m_bodyA.m_invMass;\r\n    this.m_invMassB = this.m_bodyB.m_invMass;\r\n    this.m_invIA = this.m_bodyA.m_invI;\r\n    this.m_invIB = this.m_bodyB.m_invI;\r\n\r\n    const mA: number = this.m_invMassA, mB: number = this.m_invMassB;\r\n    const iA: number = this.m_invIA, iB: number = this.m_invIB;\r\n\r\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\r\n    const aA: number = data.positions[this.m_indexA].a;\r\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\r\n    let wA: number = data.velocities[this.m_indexA].w;\r\n\r\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\r\n    const aB: number = data.positions[this.m_indexB].a;\r\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\r\n    let wB: number = data.velocities[this.m_indexB].w;\r\n\r\n    const qA: b2Rot = this.m_qA.SetAngle(aA), qB: b2Rot = this.m_qB.SetAngle(aB);\r\n\r\n    // Compute the effective masses.\r\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n    // b2Vec2 d = cB + rB - cA - rA;\r\n    const d: b2Vec2 = b2Vec2.SubVV(\r\n      b2Vec2.AddVV(cB, rB, b2Vec2.s_t0),\r\n      b2Vec2.AddVV(cA, rA, b2Vec2.s_t1),\r\n      b2WheelJoint.InitVelocityConstraints_s_d);\r\n\r\n    // Point to line constraint\r\n    {\r\n      // m_ay = b2Mul(qA, m_localYAxisA);\r\n      b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\r\n      // m_sAy = b2Cross(d + rA, m_ay);\r\n      this.m_sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ay);\r\n      // m_sBy = b2Cross(rB, m_ay);\r\n      this.m_sBy = b2Vec2.CrossVV(rB, this.m_ay);\r\n\r\n      this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy * this.m_sBy;\r\n\r\n      if (this.m_mass > 0) {\r\n        this.m_mass = 1 / this.m_mass;\r\n      }\r\n    }\r\n\r\n    // Spring constraint\r\n    this.m_springMass = 0;\r\n    this.m_bias = 0;\r\n    this.m_gamma = 0;\r\n    if (this.m_frequencyHz > 0) {\r\n      // m_ax = b2Mul(qA, m_localXAxisA);\r\n      b2Rot.MulRV(qA, this.m_localXAxisA, this.m_ax);\r\n      // m_sAx = b2Cross(d + rA, m_ax);\r\n      this.m_sAx = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), this.m_ax);\r\n      // m_sBx = b2Cross(rB, m_ax);\r\n      this.m_sBx = b2Vec2.CrossVV(rB, this.m_ax);\r\n\r\n      const invMass: number = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx * this.m_sBx;\r\n\r\n      if (invMass > 0) {\r\n        this.m_springMass = 1 / invMass;\r\n\r\n        const C: number = b2Vec2.DotVV(d, this.m_ax);\r\n\r\n        // Frequency\r\n        const omega: number = 2 * b2_pi * this.m_frequencyHz;\r\n\r\n        // Damping coefficient\r\n        const damp: number = 2 * this.m_springMass * this.m_dampingRatio * omega;\r\n\r\n        // Spring stiffness\r\n        const k: number = this.m_springMass * omega * omega;\r\n\r\n        // magic formulas\r\n        const h: number = data.step.dt;\r\n        this.m_gamma = h * (damp + h * k);\r\n        if (this.m_gamma > 0) {\r\n          this.m_gamma = 1 / this.m_gamma;\r\n        }\r\n\r\n        this.m_bias = C * h * k * this.m_gamma;\r\n\r\n        this.m_springMass = invMass + this.m_gamma;\r\n        if (this.m_springMass > 0) {\r\n          this.m_springMass = 1 / this.m_springMass;\r\n        }\r\n      }\r\n    } else {\r\n      this.m_springImpulse = 0;\r\n    }\r\n\r\n    // Rotational motor\r\n    if (this.m_enableMotor) {\r\n      this.m_motorMass = iA + iB;\r\n      if (this.m_motorMass > 0) {\r\n        this.m_motorMass = 1 / this.m_motorMass;\r\n      }\r\n    } else {\r\n      this.m_motorMass = 0;\r\n      this.m_motorImpulse = 0;\r\n    }\r\n\r\n    if (data.step.warmStarting) {\r\n      // Account for variable time step.\r\n      this.m_impulse *= data.step.dtRatio;\r\n      this.m_springImpulse *= data.step.dtRatio;\r\n      this.m_motorImpulse *= data.step.dtRatio;\r\n\r\n      // b2Vec2 P = m_impulse * m_ay + m_springImpulse * m_ax;\r\n      const P: b2Vec2 = b2Vec2.AddVV(\r\n        b2Vec2.MulSV(this.m_impulse, this.m_ay, b2Vec2.s_t0),\r\n        b2Vec2.MulSV(this.m_springImpulse, this.m_ax, b2Vec2.s_t1),\r\n        b2WheelJoint.InitVelocityConstraints_s_P);\r\n      // float32 LA = m_impulse * m_sAy + m_springImpulse * m_sAx + m_motorImpulse;\r\n      const LA: number = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\r\n      // float32 LB = m_impulse * m_sBy + m_springImpulse * m_sBx + m_motorImpulse;\r\n      const LB: number = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\r\n\r\n      // vA -= m_invMassA * P;\r\n      vA.SelfMulSub(this.m_invMassA, P);\r\n      wA -= this.m_invIA * LA;\r\n\r\n      // vB += m_invMassB * P;\r\n      vB.SelfMulAdd(this.m_invMassB, P);\r\n      wB += this.m_invIB * LB;\r\n    } else {\r\n      this.m_impulse = 0;\r\n      this.m_springImpulse = 0;\r\n      this.m_motorImpulse = 0;\r\n    }\r\n\r\n    // data.velocities[this.m_indexA].v = vA;\r\n    data.velocities[this.m_indexA].w = wA;\r\n    // data.velocities[this.m_indexB].v = vB;\r\n    data.velocities[this.m_indexB].w = wB;\r\n  }\r\n\r\n  private static SolveVelocityConstraints_s_P = new b2Vec2();\r\n  public SolveVelocityConstraints(data: b2SolverData): void {\r\n    const mA: number = this.m_invMassA, mB: number = this.m_invMassB;\r\n    const iA: number = this.m_invIA, iB: number = this.m_invIB;\r\n\r\n    const vA: b2Vec2 = data.velocities[this.m_indexA].v;\r\n    let wA: number = data.velocities[this.m_indexA].w;\r\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\r\n    let wB: number = data.velocities[this.m_indexB].w;\r\n\r\n    // Solve spring constraint\r\n    {\r\n      const Cdot: number = b2Vec2.DotVV(this.m_ax, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_sBx * wB - this.m_sAx * wA;\r\n      const impulse: number = -this.m_springMass * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse);\r\n      this.m_springImpulse += impulse;\r\n\r\n      // b2Vec2 P = impulse * m_ax;\r\n      const P: b2Vec2 = b2Vec2.MulSV(impulse, this.m_ax, b2WheelJoint.SolveVelocityConstraints_s_P);\r\n      const LA: number = impulse * this.m_sAx;\r\n      const LB: number = impulse * this.m_sBx;\r\n\r\n      // vA -= mA * P;\r\n      vA.SelfMulSub(mA, P);\r\n      wA -= iA * LA;\r\n\r\n      // vB += mB * P;\r\n      vB.SelfMulAdd(mB, P);\r\n      wB += iB * LB;\r\n    }\r\n\r\n    // Solve rotational motor constraint\r\n    {\r\n      const Cdot: number = wB - wA - this.m_motorSpeed;\r\n      let impulse: number = -this.m_motorMass * Cdot;\r\n\r\n      const oldImpulse: number = this.m_motorImpulse;\r\n      const maxImpulse: number = data.step.dt * this.m_maxMotorTorque;\r\n      this.m_motorImpulse = b2Clamp(this.m_motorImpulse + impulse, -maxImpulse, maxImpulse);\r\n      impulse = this.m_motorImpulse - oldImpulse;\r\n\r\n      wA -= iA * impulse;\r\n      wB += iB * impulse;\r\n    }\r\n\r\n    // Solve point to line constraint\r\n    {\r\n      const Cdot: number = b2Vec2.DotVV(this.m_ay, b2Vec2.SubVV(vB, vA, b2Vec2.s_t0)) + this.m_sBy * wB - this.m_sAy * wA;\r\n      const impulse: number = -this.m_mass * Cdot;\r\n      this.m_impulse += impulse;\r\n\r\n      // b2Vec2 P = impulse * m_ay;\r\n      const P: b2Vec2 = b2Vec2.MulSV(impulse, this.m_ay, b2WheelJoint.SolveVelocityConstraints_s_P);\r\n      const LA: number = impulse * this.m_sAy;\r\n      const LB: number = impulse * this.m_sBy;\r\n\r\n      // vA -= mA * P;\r\n      vA.SelfMulSub(mA, P);\r\n      wA -= iA * LA;\r\n\r\n      // vB += mB * P;\r\n      vB.SelfMulAdd(mB, P);\r\n      wB += iB * LB;\r\n    }\r\n\r\n    // data.velocities[this.m_indexA].v = vA;\r\n    data.velocities[this.m_indexA].w = wA;\r\n    // data.velocities[this.m_indexB].v = vB;\r\n    data.velocities[this.m_indexB].w = wB;\r\n  }\r\n\r\n  private static SolvePositionConstraints_s_d = new b2Vec2();\r\n  private static SolvePositionConstraints_s_P = new b2Vec2();\r\n  public SolvePositionConstraints(data: b2SolverData): boolean {\r\n    const cA: b2Vec2 = data.positions[this.m_indexA].c;\r\n    let aA: number = data.positions[this.m_indexA].a;\r\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\r\n    let aB: number = data.positions[this.m_indexB].a;\r\n\r\n    const qA: b2Rot = this.m_qA.SetAngle(aA), qB: b2Rot = this.m_qB.SetAngle(aB);\r\n\r\n    // b2Vec2 rA = b2Mul(qA, m_localAnchorA - m_localCenterA);\r\n    b2Vec2.SubVV(this.m_localAnchorA, this.m_localCenterA, this.m_lalcA);\r\n    const rA: b2Vec2 = b2Rot.MulRV(qA, this.m_lalcA, this.m_rA);\r\n    // b2Vec2 rB = b2Mul(qB, m_localAnchorB - m_localCenterB);\r\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n    const rB: b2Vec2 = b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n    // b2Vec2 d = (cB - cA) + rB - rA;\r\n    const d: b2Vec2 = b2Vec2.AddVV(\r\n      b2Vec2.SubVV(cB, cA, b2Vec2.s_t0),\r\n      b2Vec2.SubVV(rB, rA, b2Vec2.s_t1),\r\n      b2WheelJoint.SolvePositionConstraints_s_d);\r\n\r\n    // b2Vec2 ay = b2Mul(qA, m_localYAxisA);\r\n    const ay: b2Vec2 = b2Rot.MulRV(qA, this.m_localYAxisA, this.m_ay);\r\n\r\n    // float32 sAy = b2Cross(d + rA, ay);\r\n    const sAy = b2Vec2.CrossVV(b2Vec2.AddVV(d, rA, b2Vec2.s_t0), ay);\r\n    // float32 sBy = b2Cross(rB, ay);\r\n    const sBy = b2Vec2.CrossVV(rB, ay);\r\n\r\n    // float32 C = b2Dot(d, ay);\r\n    const C: number = b2Vec2.DotVV(d, this.m_ay);\r\n\r\n    const k: number = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy;\r\n\r\n    let impulse: number;\r\n    if (k !== 0) {\r\n      impulse = - C / k;\r\n    } else {\r\n      impulse = 0;\r\n    }\r\n\r\n    // b2Vec2 P = impulse * ay;\r\n    const P: b2Vec2 = b2Vec2.MulSV(impulse, ay, b2WheelJoint.SolvePositionConstraints_s_P);\r\n    const LA: number = impulse * sAy;\r\n    const LB: number = impulse * sBy;\r\n\r\n    // cA -= m_invMassA * P;\r\n    cA.SelfMulSub(this.m_invMassA, P);\r\n    aA -= this.m_invIA * LA;\r\n    // cB += m_invMassB * P;\r\n    cB.SelfMulAdd(this.m_invMassB, P);\r\n    aB += this.m_invIB * LB;\r\n\r\n    // data.positions[this.m_indexA].c = cA;\r\n    data.positions[this.m_indexA].a = aA;\r\n    // data.positions[this.m_indexB].c = cB;\r\n    data.positions[this.m_indexB].a = aB;\r\n\r\n    return b2Abs(C) <= b2_linearSlop;\r\n  }\r\n\r\n  public GetDefinition(def: b2WheelJointDef): b2WheelJointDef {\r\n    // DEBUG: b2Assert(false); // TODO\r\n    return def;\r\n  }\r\n\r\n  public GetAnchorA<T extends XY>(out: T): T {\r\n    return this.m_bodyA.GetWorldPoint(this.m_localAnchorA, out);\r\n  }\r\n\r\n  public GetAnchorB<T extends XY>(out: T): T {\r\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n  }\r\n\r\n  public GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\r\n    // return inv_dt * (m_impulse * m_ay + m_springImpulse * m_ax);\r\n    out.x = inv_dt * (this.m_impulse * this.m_ay.x + this.m_springImpulse * this.m_ax.x);\r\n    out.y = inv_dt * (this.m_impulse * this.m_ay.y + this.m_springImpulse * this.m_ax.y);\r\n    return out;\r\n  }\r\n\r\n  public GetReactionTorque(inv_dt: number): number {\r\n    return inv_dt * this.m_motorImpulse;\r\n  }\r\n\r\n  public GetLocalAnchorA(): Readonly<b2Vec2> { return this.m_localAnchorA; }\r\n\r\n  public GetLocalAnchorB(): Readonly<b2Vec2> { return this.m_localAnchorB; }\r\n\r\n  public GetLocalAxisA(): Readonly<b2Vec2> { return this.m_localXAxisA; }\r\n\r\n  public GetJointTranslation(): number {\r\n    return this.GetPrismaticJointTranslation();\r\n  }\r\n\r\n  public GetJointLinearSpeed(): number {\r\n    return this.GetPrismaticJointSpeed();\r\n  }\r\n\r\n  public GetJointAngle(): number {\r\n    return this.GetRevoluteJointAngle();\r\n  }\r\n\r\n  public GetJointAngularSpeed(): number {\r\n    return this.GetRevoluteJointSpeed();\r\n  }\r\n\r\n  public GetPrismaticJointTranslation(): number {\r\n    const bA: b2Body = this.m_bodyA;\r\n    const bB: b2Body = this.m_bodyB;\r\n\r\n    const pA: b2Vec2 = bA.GetWorldPoint(this.m_localAnchorA, new b2Vec2());\r\n    const pB: b2Vec2 = bB.GetWorldPoint(this.m_localAnchorB, new b2Vec2());\r\n    const d: b2Vec2 = b2Vec2.SubVV(pB, pA, new b2Vec2());\r\n    const axis: b2Vec2 = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());\r\n\r\n    const translation: number = b2Vec2.DotVV(d, axis);\r\n    return translation;\r\n  }\r\n\r\n  public GetPrismaticJointSpeed(): number {\r\n    const bA: b2Body = this.m_bodyA;\r\n    const bB: b2Body = this.m_bodyB;\r\n\r\n    // b2Vec2 rA = b2Mul(bA->m_xf.q, m_localAnchorA - bA->m_sweep.localCenter);\r\n    b2Vec2.SubVV(this.m_localAnchorA, bA.m_sweep.localCenter, this.m_lalcA);\r\n    const rA = b2Rot.MulRV(bA.m_xf.q, this.m_lalcA, this.m_rA);\r\n    // b2Vec2 rB = b2Mul(bB->m_xf.q, m_localAnchorB - bB->m_sweep.localCenter);\r\n    b2Vec2.SubVV(this.m_localAnchorB, bB.m_sweep.localCenter, this.m_lalcB);\r\n    const rB = b2Rot.MulRV(bB.m_xf.q, this.m_lalcB, this.m_rB);\r\n    // b2Vec2 pA = bA->m_sweep.c + rA;\r\n    const pA = b2Vec2.AddVV(bA.m_sweep.c, rA, b2Vec2.s_t0); // pA uses s_t0\r\n    // b2Vec2 pB = bB->m_sweep.c + rB;\r\n    const pB = b2Vec2.AddVV(bB.m_sweep.c, rB, b2Vec2.s_t1); // pB uses s_t1\r\n    // b2Vec2 d = pB - pA;\r\n    const d = b2Vec2.SubVV(pB, pA, b2Vec2.s_t2); // d uses s_t2\r\n    // b2Vec2 axis = b2Mul(bA.m_xf.q, m_localXAxisA);\r\n    const axis = bA.GetWorldVector(this.m_localXAxisA, new b2Vec2());\r\n\r\n    const vA = bA.m_linearVelocity;\r\n    const vB = bB.m_linearVelocity;\r\n    const wA = bA.m_angularVelocity;\r\n    const wB = bB.m_angularVelocity;\r\n\r\n    // float32 speed = b2Dot(d, b2Cross(wA, axis)) + b2Dot(axis, vB + b2Cross(wB, rB) - vA - b2Cross(wA, rA));\r\n    const speed =\r\n      b2Vec2.DotVV(d, b2Vec2.CrossSV(wA, axis, b2Vec2.s_t0)) +\r\n      b2Vec2.DotVV(\r\n        axis,\r\n        b2Vec2.SubVV(\r\n          b2Vec2.AddVCrossSV(vB, wB, rB, b2Vec2.s_t0),\r\n          b2Vec2.AddVCrossSV(vA, wA, rA, b2Vec2.s_t1),\r\n          b2Vec2.s_t0));\r\n    return speed;\r\n  }\r\n\r\n  public GetRevoluteJointAngle(): number {\r\n    // b2Body* bA = this.m_bodyA;\r\n    // b2Body* bB = this.m_bodyB;\r\n    // return bB->this.m_sweep.a - bA->this.m_sweep.a;\r\n    return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a;\r\n  }\r\n\r\n  public GetRevoluteJointSpeed(): number {\r\n    const wA: number = this.m_bodyA.m_angularVelocity;\r\n    const wB: number = this.m_bodyB.m_angularVelocity;\r\n    return wB - wA;\r\n  }\r\n\r\n  public IsMotorEnabled(): boolean {\r\n    return this.m_enableMotor;\r\n  }\r\n\r\n  public EnableMotor(flag: boolean): void {\r\n    if (flag !== this.m_enableMotor) {\r\n      this.m_bodyA.SetAwake(true);\r\n      this.m_bodyB.SetAwake(true);\r\n      this.m_enableMotor = flag;\r\n    }\r\n  }\r\n\r\n  public SetMotorSpeed(speed: number): void {\r\n    if (speed !== this.m_motorSpeed) {\r\n      this.m_bodyA.SetAwake(true);\r\n      this.m_bodyB.SetAwake(true);\r\n      this.m_motorSpeed = speed;\r\n    }\r\n  }\r\n\r\n  public SetMaxMotorTorque(force: number): void {\r\n    if (force !== this.m_maxMotorTorque) {\r\n      this.m_bodyA.SetAwake(true);\r\n      this.m_bodyB.SetAwake(true);\r\n      this.m_maxMotorTorque = force;\r\n    }\r\n  }\r\n\r\n  public GetMotorTorque(inv_dt: number): number {\r\n    return inv_dt * this.m_motorImpulse;\r\n  }\r\n\r\n  public Dump(log: (format: string, ...args: any[]) => void): void {\r\n    const indexA = this.m_bodyA.m_islandIndex;\r\n    const indexB = this.m_bodyB.m_islandIndex;\r\n\r\n    log(\"  const jd: b2WheelJointDef = new b2WheelJointDef();\\n\");\r\n    log(\"  jd.bodyA = bodies[%d];\\n\", indexA);\r\n    log(\"  jd.bodyB = bodies[%d];\\n\", indexB);\r\n    log(\"  jd.collideConnected = %s;\\n\", (this.m_collideConnected) ? (\"true\") : (\"false\"));\r\n    log(\"  jd.localAnchorA.Set(%.15f, %.15f);\\n\", this.m_localAnchorA.x, this.m_localAnchorA.y);\r\n    log(\"  jd.localAnchorB.Set(%.15f, %.15f);\\n\", this.m_localAnchorB.x, this.m_localAnchorB.y);\r\n    log(\"  jd.localAxisA.Set(%.15f, %.15f);\\n\", this.m_localXAxisA.x, this.m_localXAxisA.y);\r\n    log(\"  jd.enableMotor = %s;\\n\", (this.m_enableMotor) ? (\"true\") : (\"false\"));\r\n    log(\"  jd.motorSpeed = %.15f;\\n\", this.m_motorSpeed);\r\n    log(\"  jd.maxMotorTorque = %.15f;\\n\", this.m_maxMotorTorque);\r\n    log(\"  jd.frequencyHz = %.15f;\\n\", this.m_frequencyHz);\r\n    log(\"  jd.dampingRatio = %.15f;\\n\", this.m_dampingRatio);\r\n    log(\"  joints[%d] = this.m_world.CreateJoint(jd);\\n\", this.m_index);\r\n  }\r\n}\r\n"]}},"error":null,"hash":"06939a9ab519b49057a36ded1d08df75","cacheData":{"env":{}}}