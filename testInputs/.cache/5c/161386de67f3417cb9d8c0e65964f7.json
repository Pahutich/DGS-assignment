{"id":"../node_modules/box2d.package.ts/Common/b2Settings.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883}],"generated":{"js":"\"use strict\";\r\n/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexports.__esModule = true;\r\nfunction b2Assert(condition) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    if (!condition) {\r\n        // debugger;\r\n        throw new (Error.bind.apply(Error, [void 0].concat(args)))();\r\n    }\r\n}\r\nexports.b2Assert = b2Assert;\r\nfunction b2Maybe(value, def) {\r\n    return value !== undefined ? value : def;\r\n}\r\nexports.b2Maybe = b2Maybe;\r\nexports.b2_maxFloat = 1E+37; // FLT_MAX instead of Number.MAX_VALUE;\r\nexports.b2_epsilon = 1E-5; // FLT_EPSILON instead of Number.MIN_VALUE;\r\nexports.b2_epsilon_sq = (exports.b2_epsilon * exports.b2_epsilon);\r\nexports.b2_pi = 3.14159265359; // Math.PI;\r\n/// @file\r\n/// Global tuning constants based on meters-kilograms-seconds (MKS) units.\r\n///\r\n// Collision\r\n/// The maximum number of contact points between two convex shapes. Do\r\n/// not change this value.\r\nexports.b2_maxManifoldPoints = 2;\r\n/// The maximum number of vertices on a convex polygon. You cannot increase\r\n/// this too much because b2BlockAllocator has a maximum object size.\r\nexports.b2_maxPolygonVertices = 8;\r\n/// This is used to fatten AABBs in the dynamic tree. This allows proxies\r\n/// to move by a small amount without triggering a tree adjustment.\r\n/// This is in meters.\r\nexports.b2_aabbExtension = 0.1;\r\n/// This is used to fatten AABBs in the dynamic tree. This is used to predict\r\n/// the future position based on the current displacement.\r\n/// This is a dimensionless multiplier.\r\nexports.b2_aabbMultiplier = 2;\r\n/// A small length used as a collision and constraint tolerance. Usually it is\r\n/// chosen to be numerically significant, but visually insignificant.\r\nexports.b2_linearSlop = 0.008; // 0.005;\r\n/// A small angle used as a collision and constraint tolerance. Usually it is\r\n/// chosen to be numerically significant, but visually insignificant.\r\nexports.b2_angularSlop = 2 / 180 * exports.b2_pi;\r\n/// The radius of the polygon/edge shape skin. This should not be modified. Making\r\n/// this smaller means polygons will have an insufficient buffer for continuous collision.\r\n/// Making it larger may create artifacts for vertex collision.\r\nexports.b2_polygonRadius = 2 * exports.b2_linearSlop;\r\n/// Maximum number of sub-steps per contact in continuous physics simulation.\r\nexports.b2_maxSubSteps = 8;\r\n// Dynamics\r\n/// Maximum number of contacts to be handled to solve a TOI impact.\r\nexports.b2_maxTOIContacts = 32;\r\n/// A velocity threshold for elastic collisions. Any collision with a relative linear\r\n/// velocity below this threshold will be treated as inelastic.\r\nexports.b2_velocityThreshold = 1;\r\n/// The maximum linear position correction used when solving constraints. This helps to\r\n/// prevent overshoot.\r\nexports.b2_maxLinearCorrection = 0.2;\r\n/// The maximum angular position correction used when solving constraints. This helps to\r\n/// prevent overshoot.\r\nexports.b2_maxAngularCorrection = 8 / 180 * exports.b2_pi;\r\n/// The maximum linear velocity of a body. This limit is very large and is used\r\n/// to prevent numerical problems. You shouldn't need to adjust this.\r\nexports.b2_maxTranslation = 2;\r\nexports.b2_maxTranslationSquared = exports.b2_maxTranslation * exports.b2_maxTranslation;\r\n/// The maximum angular velocity of a body. This limit is very large and is used\r\n/// to prevent numerical problems. You shouldn't need to adjust this.\r\nexports.b2_maxRotation = 0.5 * exports.b2_pi;\r\nexports.b2_maxRotationSquared = exports.b2_maxRotation * exports.b2_maxRotation;\r\n/// This scale factor controls how fast overlap is resolved. Ideally this would be 1 so\r\n/// that overlap is removed in one time step. However using values close to 1 often lead\r\n/// to overshoot.\r\nexports.b2_baumgarte = 0.2;\r\nexports.b2_toiBaumgarte = 0.75;\r\n// #if B2_ENABLE_PARTICLE\r\n// Particle\r\n/// A symbolic constant that stands for particle allocation error.\r\nexports.b2_invalidParticleIndex = -1;\r\nexports.b2_maxParticleIndex = 0x7FFFFFFF;\r\n/// The default distance between particles, multiplied by the particle diameter.\r\nexports.b2_particleStride = 0.75;\r\n/// The minimum particle weight that produces pressure.\r\nexports.b2_minParticleWeight = 1.0;\r\n/// The upper limit for particle pressure.\r\nexports.b2_maxParticlePressure = 0.25;\r\n/// The upper limit for force between particles.\r\nexports.b2_maxParticleForce = 0.5;\r\n/// The maximum distance between particles in a triad, multiplied by the particle diameter.\r\nexports.b2_maxTriadDistance = 2.0;\r\nexports.b2_maxTriadDistanceSquared = (exports.b2_maxTriadDistance * exports.b2_maxTriadDistance);\r\n/// The initial size of particle data buffers.\r\nexports.b2_minParticleSystemBufferCapacity = 256;\r\n/// The time into the future that collisions against barrier particles will be detected.\r\nexports.b2_barrierCollisionTime = 2.5;\r\n// #endif\r\n// Sleep\r\n/// The time that a body must be still before it will go to sleep.\r\nexports.b2_timeToSleep = 0.5;\r\n/// A body cannot sleep if its linear velocity is above this tolerance.\r\nexports.b2_linearSleepTolerance = 0.01;\r\n/// A body cannot sleep if its angular velocity is above this tolerance.\r\nexports.b2_angularSleepTolerance = 2 / 180 * exports.b2_pi;\r\n// Memory Allocation\r\n/// Implement this function to use your own memory allocator.\r\nfunction b2Alloc(size) {\r\n    return null;\r\n}\r\nexports.b2Alloc = b2Alloc;\r\n/// If you implement b2Alloc, you should also implement this function.\r\nfunction b2Free(mem) {\r\n}\r\nexports.b2Free = b2Free;\r\n/// Logging function.\r\nfunction b2Log(message) {\r\n    var args = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        args[_i - 1] = arguments[_i];\r\n    }\r\n    // console.log(message, ...args);\r\n}\r\nexports.b2Log = b2Log;\r\n/// Version numbering scheme.\r\n/// See http://en.wikipedia.org/wiki/Software_versioning\r\nvar b2Version = /** @class */ (function () {\r\n    function b2Version(major, minor, revision) {\r\n        if (major === void 0) { major = 0; }\r\n        if (minor === void 0) { minor = 0; }\r\n        if (revision === void 0) { revision = 0; }\r\n        this.major = 0; ///< significant changes\r\n        this.minor = 0; ///< incremental changes\r\n        this.revision = 0; ///< bug fixes\r\n        this.major = major;\r\n        this.minor = minor;\r\n        this.revision = revision;\r\n    }\r\n    b2Version.prototype.toString = function () {\r\n        return this.major + \".\" + this.minor + \".\" + this.revision;\r\n    };\r\n    return b2Version;\r\n}());\r\nexports.b2Version = b2Version;\r\n/// Current version.\r\nexports.b2_version = new b2Version(2, 3, 2);\r\nexports.b2_branch = \"master\";\r\nexports.b2_commit = \"fbf51801d80fc389d43dc46524520e89043b6faf\";\r\nfunction b2ParseInt(v) {\r\n    return parseInt(v, 10);\r\n}\r\nexports.b2ParseInt = b2ParseInt;\r\nfunction b2ParseUInt(v) {\r\n    return Math.abs(parseInt(v, 10));\r\n}\r\nexports.b2ParseUInt = b2ParseUInt;\r\nfunction b2MakeArray(length, init) {\r\n    var a = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        a[i] = init(i);\r\n    }\r\n    return a;\r\n}\r\nexports.b2MakeArray = b2MakeArray;\r\nfunction b2MakeNullArray(length) {\r\n    var a = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        a[i] = null;\r\n    }\r\n    return a;\r\n}\r\nexports.b2MakeNullArray = b2MakeNullArray;\r\nfunction b2MakeNumberArray(length, init) {\r\n    if (init === void 0) { init = 0; }\r\n    var a = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        a[i] = init;\r\n    }\r\n    return a;\r\n}\r\nexports.b2MakeNumberArray = b2MakeNumberArray;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2Settings.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Common/b2Settings.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\nexport function b2Assert(condition: boolean, ...args: any[]): void {\r\n  if (!condition) {\r\n    // debugger;\r\n    throw new Error(...args);\r\n  }\r\n}\r\n\r\nexport function b2Maybe<T>(value: T | undefined, def: T): T {\r\n  return value !== undefined ? value : def;\r\n}\r\n\r\nexport const b2_maxFloat: number = 1E+37; // FLT_MAX instead of Number.MAX_VALUE;\r\nexport const b2_epsilon: number = 1E-5; // FLT_EPSILON instead of Number.MIN_VALUE;\r\nexport const b2_epsilon_sq: number = (b2_epsilon * b2_epsilon);\r\nexport const b2_pi: number = 3.14159265359; // Math.PI;\r\n\r\n/// @file\r\n/// Global tuning constants based on meters-kilograms-seconds (MKS) units.\r\n///\r\n\r\n// Collision\r\n\r\n/// The maximum number of contact points between two convex shapes. Do\r\n/// not change this value.\r\nexport const b2_maxManifoldPoints: number = 2;\r\n\r\n/// The maximum number of vertices on a convex polygon. You cannot increase\r\n/// this too much because b2BlockAllocator has a maximum object size.\r\nexport const b2_maxPolygonVertices: number = 8;\r\n\r\n/// This is used to fatten AABBs in the dynamic tree. This allows proxies\r\n/// to move by a small amount without triggering a tree adjustment.\r\n/// This is in meters.\r\nexport const b2_aabbExtension: number = 0.1;\r\n\r\n/// This is used to fatten AABBs in the dynamic tree. This is used to predict\r\n/// the future position based on the current displacement.\r\n/// This is a dimensionless multiplier.\r\nexport const b2_aabbMultiplier: number = 2;\r\n\r\n/// A small length used as a collision and constraint tolerance. Usually it is\r\n/// chosen to be numerically significant, but visually insignificant.\r\nexport const b2_linearSlop: number = 0.008; // 0.005;\r\n\r\n/// A small angle used as a collision and constraint tolerance. Usually it is\r\n/// chosen to be numerically significant, but visually insignificant.\r\nexport const b2_angularSlop: number = 2 / 180 * b2_pi;\r\n\r\n/// The radius of the polygon/edge shape skin. This should not be modified. Making\r\n/// this smaller means polygons will have an insufficient buffer for continuous collision.\r\n/// Making it larger may create artifacts for vertex collision.\r\nexport const b2_polygonRadius: number = 2 * b2_linearSlop;\r\n\r\n/// Maximum number of sub-steps per contact in continuous physics simulation.\r\nexport const b2_maxSubSteps: number = 8;\r\n\r\n// Dynamics\r\n\r\n/// Maximum number of contacts to be handled to solve a TOI impact.\r\nexport const b2_maxTOIContacts: number = 32;\r\n\r\n/// A velocity threshold for elastic collisions. Any collision with a relative linear\r\n/// velocity below this threshold will be treated as inelastic.\r\nexport const b2_velocityThreshold: number = 1;\r\n\r\n/// The maximum linear position correction used when solving constraints. This helps to\r\n/// prevent overshoot.\r\nexport const b2_maxLinearCorrection: number = 0.2;\r\n\r\n/// The maximum angular position correction used when solving constraints. This helps to\r\n/// prevent overshoot.\r\nexport const b2_maxAngularCorrection: number = 8 / 180 * b2_pi;\r\n\r\n/// The maximum linear velocity of a body. This limit is very large and is used\r\n/// to prevent numerical problems. You shouldn't need to adjust this.\r\nexport const b2_maxTranslation: number = 2;\r\nexport const b2_maxTranslationSquared: number = b2_maxTranslation * b2_maxTranslation;\r\n\r\n/// The maximum angular velocity of a body. This limit is very large and is used\r\n/// to prevent numerical problems. You shouldn't need to adjust this.\r\nexport const b2_maxRotation: number = 0.5 * b2_pi;\r\nexport const b2_maxRotationSquared: number = b2_maxRotation * b2_maxRotation;\r\n\r\n/// This scale factor controls how fast overlap is resolved. Ideally this would be 1 so\r\n/// that overlap is removed in one time step. However using values close to 1 often lead\r\n/// to overshoot.\r\nexport const b2_baumgarte: number = 0.2;\r\nexport const b2_toiBaumgarte: number = 0.75;\r\n\r\n// #if B2_ENABLE_PARTICLE\r\n\r\n// Particle\r\n\r\n/// A symbolic constant that stands for particle allocation error.\r\nexport const b2_invalidParticleIndex: number = -1;\r\n\r\nexport const b2_maxParticleIndex: number = 0x7FFFFFFF;\r\n\r\n/// The default distance between particles, multiplied by the particle diameter.\r\nexport const b2_particleStride: number = 0.75;\r\n\r\n/// The minimum particle weight that produces pressure.\r\nexport const b2_minParticleWeight: number = 1.0;\r\n\r\n/// The upper limit for particle pressure.\r\nexport const b2_maxParticlePressure: number = 0.25;\r\n\r\n/// The upper limit for force between particles.\r\nexport const b2_maxParticleForce: number = 0.5;\r\n\r\n/// The maximum distance between particles in a triad, multiplied by the particle diameter.\r\nexport const b2_maxTriadDistance: number = 2.0;\r\nexport const b2_maxTriadDistanceSquared: number = (b2_maxTriadDistance * b2_maxTriadDistance);\r\n\r\n/// The initial size of particle data buffers.\r\nexport const b2_minParticleSystemBufferCapacity: number = 256;\r\n\r\n/// The time into the future that collisions against barrier particles will be detected.\r\nexport const b2_barrierCollisionTime: number = 2.5;\r\n\r\n// #endif\r\n\r\n// Sleep\r\n\r\n/// The time that a body must be still before it will go to sleep.\r\nexport const b2_timeToSleep: number = 0.5;\r\n\r\n/// A body cannot sleep if its linear velocity is above this tolerance.\r\nexport const b2_linearSleepTolerance: number = 0.01;\r\n\r\n/// A body cannot sleep if its angular velocity is above this tolerance.\r\nexport const b2_angularSleepTolerance: number = 2 / 180 * b2_pi;\r\n\r\n// Memory Allocation\r\n\r\n/// Implement this function to use your own memory allocator.\r\nexport function b2Alloc(size: number): any {\r\n  return null;\r\n}\r\n\r\n/// If you implement b2Alloc, you should also implement this function.\r\nexport function b2Free(mem: any): void {\r\n}\r\n\r\n/// Logging function.\r\nexport function b2Log(message: string, ...args: any[]): void {\r\n  // console.log(message, ...args);\r\n}\r\n\r\n/// Version numbering scheme.\r\n/// See http://en.wikipedia.org/wiki/Software_versioning\r\nexport class b2Version {\r\n  public major: number = 0; ///< significant changes\r\n  public minor: number = 0; ///< incremental changes\r\n  public revision: number = 0; ///< bug fixes\r\n\r\n  constructor(major: number = 0, minor: number = 0, revision: number = 0) {\r\n    this.major = major;\r\n    this.minor = minor;\r\n    this.revision = revision;\r\n  }\r\n\r\n  public toString(): string {\r\n    return this.major + \".\" + this.minor + \".\" + this.revision;\r\n  }\r\n}\r\n\r\n/// Current version.\r\nexport const b2_version: b2Version = new b2Version(2, 3, 2);\r\n\r\nexport const b2_branch: string = \"master\";\r\nexport const b2_commit: string = \"fbf51801d80fc389d43dc46524520e89043b6faf\";\r\n\r\nexport function b2ParseInt(v: string): number {\r\n  return parseInt(v, 10);\r\n}\r\n\r\nexport function b2ParseUInt(v: string): number {\r\n  return Math.abs(parseInt(v, 10));\r\n}\r\n\r\nexport function b2MakeArray<T>(length: number, init: (i: number) => T): T[] {\r\n  const a: T[] = new Array<T>(length);\r\n  for (let i: number = 0; i < length; ++i) {\r\n    a[i] = init(i);\r\n  }\r\n  return a;\r\n}\r\n\r\nexport function b2MakeNullArray<T>(length: number): Array<T | null> {\r\n  const a: Array<T | null> = new Array<T | null>(length);\r\n  for (let i: number = 0; i < length; ++i) {\r\n    a[i] = null;\r\n  }\r\n  return a;\r\n}\r\n\r\nexport function b2MakeNumberArray(length: number, init: number = 0): number[] {\r\n  const a: number[] = new Array<number>(length);\r\n  for (let i: number = 0; i < length; ++i) {\r\n    a[i] = init;\r\n  }\r\n  return a;\r\n}\r\n"]}},"error":null,"hash":"78c66b6c4da76bee76e5b7acafdee4d0","cacheData":{"env":{}}}