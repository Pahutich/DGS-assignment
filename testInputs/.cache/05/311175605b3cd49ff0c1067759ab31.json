{"id":"../node_modules/box2d.package.ts/Dynamics/Contacts/b2ContactFactory.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"../../Collision/Shapes/b2Shape","loc":{"line":4,"column":24},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ContactFactory.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Collision\\Shapes\\b2Shape.ts"},{"name":"./b2CircleContact","loc":{"line":5,"column":32},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ContactFactory.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2CircleContact.ts"},{"name":"./b2PolygonContact","loc":{"line":6,"column":33},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ContactFactory.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2PolygonContact.ts"},{"name":"./b2PolygonAndCircleContact","loc":{"line":7,"column":42},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ContactFactory.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2PolygonAndCircleContact.ts"},{"name":"./b2EdgeAndCircleContact","loc":{"line":8,"column":39},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ContactFactory.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2EdgeAndCircleContact.ts"},{"name":"./b2EdgeAndPolygonContact","loc":{"line":9,"column":40},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ContactFactory.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2EdgeAndPolygonContact.ts"},{"name":"./b2ChainAndCircleContact","loc":{"line":10,"column":40},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ContactFactory.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ChainAndCircleContact.ts"},{"name":"./b2ChainAndPolygonContact","loc":{"line":11,"column":41},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ContactFactory.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Contacts\\b2ChainAndPolygonContact.ts"}],"generated":{"js":"\"use strict\";\r\nexports.__esModule = true;\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nvar b2Shape_1 = require(\"../../Collision/Shapes/b2Shape\");\r\nvar b2CircleContact_1 = require(\"./b2CircleContact\");\r\nvar b2PolygonContact_1 = require(\"./b2PolygonContact\");\r\nvar b2PolygonAndCircleContact_1 = require(\"./b2PolygonAndCircleContact\");\r\nvar b2EdgeAndCircleContact_1 = require(\"./b2EdgeAndCircleContact\");\r\nvar b2EdgeAndPolygonContact_1 = require(\"./b2EdgeAndPolygonContact\");\r\nvar b2ChainAndCircleContact_1 = require(\"./b2ChainAndCircleContact\");\r\nvar b2ChainAndPolygonContact_1 = require(\"./b2ChainAndPolygonContact\");\r\nvar b2ContactRegister = /** @class */ (function () {\r\n    function b2ContactRegister() {\r\n        this.pool = [];\r\n        this.createFcn = null;\r\n        this.destroyFcn = null;\r\n        this.primary = false;\r\n    }\r\n    return b2ContactRegister;\r\n}());\r\nexports.b2ContactRegister = b2ContactRegister;\r\nvar b2ContactFactory = /** @class */ (function () {\r\n    function b2ContactFactory() {\r\n        this.m_registers = [];\r\n        this.InitializeRegisters();\r\n    }\r\n    b2ContactFactory.prototype.AddType = function (createFcn, destroyFcn, typeA, typeB) {\r\n        var pool = [];\r\n        function poolCreateFcn() {\r\n            return pool.pop() || createFcn();\r\n        }\r\n        function poolDestroyFcn(contact) {\r\n            pool.push(contact);\r\n        }\r\n        this.m_registers[typeA][typeB].pool = pool;\r\n        this.m_registers[typeA][typeB].createFcn = poolCreateFcn; // createFcn;\r\n        this.m_registers[typeA][typeB].destroyFcn = poolDestroyFcn; // destroyFcn;\r\n        this.m_registers[typeA][typeB].primary = true;\r\n        if (typeA !== typeB) {\r\n            this.m_registers[typeB][typeA].pool = pool;\r\n            this.m_registers[typeB][typeA].createFcn = poolCreateFcn; // createFcn;\r\n            this.m_registers[typeB][typeA].destroyFcn = poolDestroyFcn; // destroyFcn;\r\n            this.m_registers[typeB][typeA].primary = false;\r\n        }\r\n    };\r\n    b2ContactFactory.prototype.InitializeRegisters = function () {\r\n        for (var i = 0; i < b2Shape_1.b2ShapeType.e_shapeTypeCount; i++) {\r\n            this.m_registers[i] = [];\r\n            for (var j = 0; j < b2Shape_1.b2ShapeType.e_shapeTypeCount; j++) {\r\n                this.m_registers[i][j] = new b2ContactRegister();\r\n            }\r\n        }\r\n        this.AddType(b2CircleContact_1.b2CircleContact.Create, b2CircleContact_1.b2CircleContact.Destroy, b2Shape_1.b2ShapeType.e_circleShape, b2Shape_1.b2ShapeType.e_circleShape);\r\n        this.AddType(b2PolygonAndCircleContact_1.b2PolygonAndCircleContact.Create, b2PolygonAndCircleContact_1.b2PolygonAndCircleContact.Destroy, b2Shape_1.b2ShapeType.e_polygonShape, b2Shape_1.b2ShapeType.e_circleShape);\r\n        this.AddType(b2PolygonContact_1.b2PolygonContact.Create, b2PolygonContact_1.b2PolygonContact.Destroy, b2Shape_1.b2ShapeType.e_polygonShape, b2Shape_1.b2ShapeType.e_polygonShape);\r\n        this.AddType(b2EdgeAndCircleContact_1.b2EdgeAndCircleContact.Create, b2EdgeAndCircleContact_1.b2EdgeAndCircleContact.Destroy, b2Shape_1.b2ShapeType.e_edgeShape, b2Shape_1.b2ShapeType.e_circleShape);\r\n        this.AddType(b2EdgeAndPolygonContact_1.b2EdgeAndPolygonContact.Create, b2EdgeAndPolygonContact_1.b2EdgeAndPolygonContact.Destroy, b2Shape_1.b2ShapeType.e_edgeShape, b2Shape_1.b2ShapeType.e_polygonShape);\r\n        this.AddType(b2ChainAndCircleContact_1.b2ChainAndCircleContact.Create, b2ChainAndCircleContact_1.b2ChainAndCircleContact.Destroy, b2Shape_1.b2ShapeType.e_chainShape, b2Shape_1.b2ShapeType.e_circleShape);\r\n        this.AddType(b2ChainAndPolygonContact_1.b2ChainAndPolygonContact.Create, b2ChainAndPolygonContact_1.b2ChainAndPolygonContact.Destroy, b2Shape_1.b2ShapeType.e_chainShape, b2Shape_1.b2ShapeType.e_polygonShape);\r\n    };\r\n    b2ContactFactory.prototype.Create = function (fixtureA, indexA, fixtureB, indexB) {\r\n        var typeA = fixtureA.GetType();\r\n        var typeB = fixtureB.GetType();\r\n        // DEBUG: b2Assert(0 <= typeA && typeA < b2ShapeType.e_shapeTypeCount);\r\n        // DEBUG: b2Assert(0 <= typeB && typeB < b2ShapeType.e_shapeTypeCount);\r\n        var reg = this.m_registers[typeA][typeB];\r\n        if (reg.createFcn) {\r\n            var c = reg.createFcn();\r\n            if (reg.primary) {\r\n                c.Reset(fixtureA, indexA, fixtureB, indexB);\r\n            }\r\n            else {\r\n                c.Reset(fixtureB, indexB, fixtureA, indexA);\r\n            }\r\n            return c;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    b2ContactFactory.prototype.Destroy = function (contact) {\r\n        var typeA = contact.m_fixtureA.GetType();\r\n        var typeB = contact.m_fixtureB.GetType();\r\n        // DEBUG: b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\r\n        // DEBUG: b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\r\n        var reg = this.m_registers[typeA][typeB];\r\n        if (reg.destroyFcn) {\r\n            reg.destroyFcn(contact);\r\n        }\r\n    };\r\n    return b2ContactFactory;\r\n}());\r\nexports.b2ContactFactory = b2ContactFactory;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2ContactFactory.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Dynamics/Contacts/b2ContactFactory.ts"],"names":[],"mappings":"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","sourcesContent":["// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2ShapeType } from \"../../Collision/Shapes/b2Shape\";\r\nimport { b2Contact } from \"./b2Contact\";\r\nimport { b2CircleContact } from \"./b2CircleContact\";\r\nimport { b2PolygonContact } from \"./b2PolygonContact\";\r\nimport { b2PolygonAndCircleContact } from \"./b2PolygonAndCircleContact\";\r\nimport { b2EdgeAndCircleContact } from \"./b2EdgeAndCircleContact\";\r\nimport { b2EdgeAndPolygonContact } from \"./b2EdgeAndPolygonContact\";\r\nimport { b2ChainAndCircleContact } from \"./b2ChainAndCircleContact\";\r\nimport { b2ChainAndPolygonContact } from \"./b2ChainAndPolygonContact\";\r\nimport { b2Fixture } from \"../b2Fixture\";\r\n\r\nexport class b2ContactRegister {\r\n  public pool: b2Contact[] = [];\r\n  public createFcn: (() => b2Contact) | null = null;\r\n  public destroyFcn: ((contact: b2Contact) => void) | null = null;\r\n  public primary: boolean = false;\r\n}\r\n\r\nexport class b2ContactFactory {\r\n  public readonly m_registers: b2ContactRegister[][] = [];\r\n\r\n  constructor() {\r\n    this.InitializeRegisters();\r\n  }\r\n\r\n  private AddType(createFcn: () => b2Contact, destroyFcn: (contact: b2Contact) => void, typeA: b2ShapeType, typeB: b2ShapeType): void {\r\n    const pool: b2Contact[] = [];\r\n\r\n    function poolCreateFcn(): b2Contact {\r\n      return pool.pop() || createFcn();\r\n    }\r\n\r\n    function poolDestroyFcn(contact: b2Contact): void {\r\n      pool.push(contact);\r\n    }\r\n\r\n    this.m_registers[typeA][typeB].pool = pool;\r\n    this.m_registers[typeA][typeB].createFcn = poolCreateFcn; // createFcn;\r\n    this.m_registers[typeA][typeB].destroyFcn = poolDestroyFcn; // destroyFcn;\r\n    this.m_registers[typeA][typeB].primary = true;\r\n\r\n    if (typeA !== typeB) {\r\n      this.m_registers[typeB][typeA].pool = pool;\r\n      this.m_registers[typeB][typeA].createFcn = poolCreateFcn; // createFcn;\r\n      this.m_registers[typeB][typeA].destroyFcn = poolDestroyFcn; // destroyFcn;\r\n      this.m_registers[typeB][typeA].primary = false;\r\n    }\r\n  }\r\n\r\n  private InitializeRegisters(): void {\r\n    for (let i: number = 0; i < b2ShapeType.e_shapeTypeCount; i++) {\r\n      this.m_registers[i] = [];\r\n      for (let j: number = 0; j < b2ShapeType.e_shapeTypeCount; j++) {\r\n        this.m_registers[i][j] = new b2ContactRegister();\r\n      }\r\n    }\r\n\r\n    this.AddType(          b2CircleContact.Create,           b2CircleContact.Destroy, b2ShapeType.e_circleShape,  b2ShapeType.e_circleShape);\r\n    this.AddType(b2PolygonAndCircleContact.Create, b2PolygonAndCircleContact.Destroy, b2ShapeType.e_polygonShape, b2ShapeType.e_circleShape);\r\n    this.AddType(         b2PolygonContact.Create,          b2PolygonContact.Destroy, b2ShapeType.e_polygonShape, b2ShapeType.e_polygonShape);\r\n    this.AddType(   b2EdgeAndCircleContact.Create,    b2EdgeAndCircleContact.Destroy, b2ShapeType.e_edgeShape,    b2ShapeType.e_circleShape);\r\n    this.AddType(  b2EdgeAndPolygonContact.Create,   b2EdgeAndPolygonContact.Destroy, b2ShapeType.e_edgeShape,    b2ShapeType.e_polygonShape);\r\n    this.AddType(  b2ChainAndCircleContact.Create,   b2ChainAndCircleContact.Destroy, b2ShapeType.e_chainShape,   b2ShapeType.e_circleShape);\r\n    this.AddType( b2ChainAndPolygonContact.Create,  b2ChainAndPolygonContact.Destroy, b2ShapeType.e_chainShape,   b2ShapeType.e_polygonShape);\r\n  }\r\n\r\n  public Create(fixtureA: b2Fixture, indexA: number, fixtureB: b2Fixture, indexB: number): b2Contact | null {\r\n    const typeA: b2ShapeType = fixtureA.GetType();\r\n    const typeB: b2ShapeType = fixtureB.GetType();\r\n\r\n    // DEBUG: b2Assert(0 <= typeA && typeA < b2ShapeType.e_shapeTypeCount);\r\n    // DEBUG: b2Assert(0 <= typeB && typeB < b2ShapeType.e_shapeTypeCount);\r\n\r\n    const reg: b2ContactRegister = this.m_registers[typeA][typeB];\r\n    if (reg.createFcn) {\r\n      const c: b2Contact = reg.createFcn();\r\n      if (reg.primary) {\r\n        c.Reset(fixtureA, indexA, fixtureB, indexB);\r\n      } else {\r\n        c.Reset(fixtureB, indexB, fixtureA, indexA);\r\n      }\r\n      return c;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public Destroy(contact: b2Contact): void {\r\n    const typeA: b2ShapeType = contact.m_fixtureA.GetType();\r\n    const typeB: b2ShapeType = contact.m_fixtureB.GetType();\r\n\r\n    // DEBUG: b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\r\n    // DEBUG: b2Assert(0 <= typeA && typeB < b2ShapeType.e_shapeTypeCount);\r\n\r\n    const reg: b2ContactRegister = this.m_registers[typeA][typeB];\r\n    if (reg.destroyFcn) {\r\n      reg.destroyFcn(contact);\r\n    }\r\n  }\r\n}\r\n"]}},"error":null,"hash":"8187719c62653aa52162849852f73e03","cacheData":{"env":{}}}