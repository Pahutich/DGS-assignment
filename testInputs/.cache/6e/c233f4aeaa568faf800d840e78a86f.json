{"id":"../node_modules/box2d.package.ts/Dynamics/Joints/b2AreaJoint.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"../../Common/b2Settings","loc":{"line":14,"column":27},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2AreaJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Settings.ts"},{"name":"../../Common/b2Math","loc":{"line":15,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2AreaJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"},{"name":"./b2Joint","loc":{"line":16,"column":24},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2AreaJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2Joint.ts"},{"name":"./b2DistanceJoint","loc":{"line":17,"column":32},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2AreaJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2DistanceJoint.ts"}],"generated":{"js":"\"use strict\";\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nvar b2Settings_1 = require(\"../../Common/b2Settings\");\r\nvar b2Math_1 = require(\"../../Common/b2Math\");\r\nvar b2Joint_1 = require(\"./b2Joint\");\r\nvar b2DistanceJoint_1 = require(\"./b2DistanceJoint\");\r\nvar b2AreaJointDef = /** @class */ (function (_super) {\r\n    __extends(b2AreaJointDef, _super);\r\n    function b2AreaJointDef() {\r\n        var _this = _super.call(this, b2Joint_1.b2JointType.e_areaJoint) || this;\r\n        _this.bodies = [];\r\n        _this.frequencyHz = 0;\r\n        _this.dampingRatio = 0;\r\n        return _this;\r\n    }\r\n    b2AreaJointDef.prototype.AddBody = function (body) {\r\n        this.bodies.push(body);\r\n        if (this.bodies.length === 1) {\r\n            this.bodyA = body;\r\n        }\r\n        else if (this.bodies.length === 2) {\r\n            this.bodyB = body;\r\n        }\r\n    };\r\n    return b2AreaJointDef;\r\n}(b2Joint_1.b2JointDef));\r\nexports.b2AreaJointDef = b2AreaJointDef;\r\nvar b2AreaJoint = /** @class */ (function (_super) {\r\n    __extends(b2AreaJoint, _super);\r\n    function b2AreaJoint(def) {\r\n        var _this = _super.call(this, def) || this;\r\n        _this.m_frequencyHz = 0;\r\n        _this.m_dampingRatio = 0;\r\n        // Solver shared\r\n        _this.m_impulse = 0;\r\n        _this.m_targetArea = 0;\r\n        _this.m_delta = new b2Math_1.b2Vec2();\r\n        // DEBUG: b2Assert(def.bodies.length >= 3, \"You cannot create an area joint with less than three bodies.\");\r\n        _this.m_bodies = def.bodies;\r\n        _this.m_frequencyHz = b2Settings_1.b2Maybe(def.frequencyHz, 0);\r\n        _this.m_dampingRatio = b2Settings_1.b2Maybe(def.dampingRatio, 0);\r\n        _this.m_targetLengths = b2Settings_1.b2MakeNumberArray(def.bodies.length);\r\n        _this.m_normals = b2Math_1.b2Vec2.MakeArray(def.bodies.length);\r\n        _this.m_joints = []; // b2MakeNullArray(def.bodies.length);\r\n        _this.m_deltas = b2Math_1.b2Vec2.MakeArray(def.bodies.length);\r\n        var djd = new b2DistanceJoint_1.b2DistanceJointDef();\r\n        djd.frequencyHz = _this.m_frequencyHz;\r\n        djd.dampingRatio = _this.m_dampingRatio;\r\n        _this.m_targetArea = 0;\r\n        for (var i = 0; i < _this.m_bodies.length; ++i) {\r\n            var body = _this.m_bodies[i];\r\n            var next = _this.m_bodies[(i + 1) % _this.m_bodies.length];\r\n            var body_c = body.GetWorldCenter();\r\n            var next_c = next.GetWorldCenter();\r\n            _this.m_targetLengths[i] = b2Math_1.b2Vec2.DistanceVV(body_c, next_c);\r\n            _this.m_targetArea += b2Math_1.b2Vec2.CrossVV(body_c, next_c);\r\n            djd.Initialize(body, next, body_c, next_c);\r\n            _this.m_joints[i] = body.GetWorld().CreateJoint(djd);\r\n        }\r\n        _this.m_targetArea *= 0.5;\r\n        return _this;\r\n    }\r\n    b2AreaJoint.prototype.GetAnchorA = function (out) {\r\n        return out;\r\n    };\r\n    b2AreaJoint.prototype.GetAnchorB = function (out) {\r\n        return out;\r\n    };\r\n    b2AreaJoint.prototype.GetReactionForce = function (inv_dt, out) {\r\n        return out;\r\n    };\r\n    b2AreaJoint.prototype.GetReactionTorque = function (inv_dt) {\r\n        return 0;\r\n    };\r\n    b2AreaJoint.prototype.SetFrequency = function (hz) {\r\n        this.m_frequencyHz = hz;\r\n        for (var i = 0; i < this.m_joints.length; ++i) {\r\n            this.m_joints[i].SetFrequency(hz);\r\n        }\r\n    };\r\n    b2AreaJoint.prototype.GetFrequency = function () {\r\n        return this.m_frequencyHz;\r\n    };\r\n    b2AreaJoint.prototype.SetDampingRatio = function (ratio) {\r\n        this.m_dampingRatio = ratio;\r\n        for (var i = 0; i < this.m_joints.length; ++i) {\r\n            this.m_joints[i].SetDampingRatio(ratio);\r\n        }\r\n    };\r\n    b2AreaJoint.prototype.GetDampingRatio = function () {\r\n        return this.m_dampingRatio;\r\n    };\r\n    b2AreaJoint.prototype.Dump = function (log) {\r\n        log(\"Area joint dumping is not supported.\\n\");\r\n    };\r\n    b2AreaJoint.prototype.InitVelocityConstraints = function (data) {\r\n        for (var i = 0; i < this.m_bodies.length; ++i) {\r\n            var prev = this.m_bodies[(i + this.m_bodies.length - 1) % this.m_bodies.length];\r\n            var next = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n            var prev_c = data.positions[prev.m_islandIndex].c;\r\n            var next_c = data.positions[next.m_islandIndex].c;\r\n            var delta = this.m_deltas[i];\r\n            b2Math_1.b2Vec2.SubVV(next_c, prev_c, delta);\r\n        }\r\n        if (data.step.warmStarting) {\r\n            this.m_impulse *= data.step.dtRatio;\r\n            for (var i = 0; i < this.m_bodies.length; ++i) {\r\n                var body = this.m_bodies[i];\r\n                var body_v = data.velocities[body.m_islandIndex].v;\r\n                var delta = this.m_deltas[i];\r\n                body_v.x += body.m_invMass * delta.y * 0.5 * this.m_impulse;\r\n                body_v.y += body.m_invMass * -delta.x * 0.5 * this.m_impulse;\r\n            }\r\n        }\r\n        else {\r\n            this.m_impulse = 0;\r\n        }\r\n    };\r\n    b2AreaJoint.prototype.SolveVelocityConstraints = function (data) {\r\n        var dotMassSum = 0;\r\n        var crossMassSum = 0;\r\n        for (var i = 0; i < this.m_bodies.length; ++i) {\r\n            var body = this.m_bodies[i];\r\n            var body_v = data.velocities[body.m_islandIndex].v;\r\n            var delta = this.m_deltas[i];\r\n            dotMassSum += delta.LengthSquared() / body.GetMass();\r\n            crossMassSum += b2Math_1.b2Vec2.CrossVV(body_v, delta);\r\n        }\r\n        var lambda = -2 * crossMassSum / dotMassSum;\r\n        // lambda = b2Clamp(lambda, -b2_maxLinearCorrection, b2_maxLinearCorrection);\r\n        this.m_impulse += lambda;\r\n        for (var i = 0; i < this.m_bodies.length; ++i) {\r\n            var body = this.m_bodies[i];\r\n            var body_v = data.velocities[body.m_islandIndex].v;\r\n            var delta = this.m_deltas[i];\r\n            body_v.x += body.m_invMass * delta.y * 0.5 * lambda;\r\n            body_v.y += body.m_invMass * -delta.x * 0.5 * lambda;\r\n        }\r\n    };\r\n    b2AreaJoint.prototype.SolvePositionConstraints = function (data) {\r\n        var perimeter = 0;\r\n        var area = 0;\r\n        for (var i = 0; i < this.m_bodies.length; ++i) {\r\n            var body = this.m_bodies[i];\r\n            var next = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n            var body_c = data.positions[body.m_islandIndex].c;\r\n            var next_c = data.positions[next.m_islandIndex].c;\r\n            var delta = b2Math_1.b2Vec2.SubVV(next_c, body_c, this.m_delta);\r\n            var dist = delta.Length();\r\n            if (dist < b2Settings_1.b2_epsilon) {\r\n                dist = 1;\r\n            }\r\n            this.m_normals[i].x = delta.y / dist;\r\n            this.m_normals[i].y = -delta.x / dist;\r\n            perimeter += dist;\r\n            area += b2Math_1.b2Vec2.CrossVV(body_c, next_c);\r\n        }\r\n        area *= 0.5;\r\n        var deltaArea = this.m_targetArea - area;\r\n        var toExtrude = 0.5 * deltaArea / perimeter;\r\n        var done = true;\r\n        for (var i = 0; i < this.m_bodies.length; ++i) {\r\n            var body = this.m_bodies[i];\r\n            var body_c = data.positions[body.m_islandIndex].c;\r\n            var next_i = (i + 1) % this.m_bodies.length;\r\n            var delta = b2Math_1.b2Vec2.AddVV(this.m_normals[i], this.m_normals[next_i], this.m_delta);\r\n            delta.SelfMul(toExtrude);\r\n            var norm_sq = delta.LengthSquared();\r\n            if (norm_sq > b2Math_1.b2Sq(b2Settings_1.b2_maxLinearCorrection)) {\r\n                delta.SelfMul(b2Settings_1.b2_maxLinearCorrection / b2Math_1.b2Sqrt(norm_sq));\r\n            }\r\n            if (norm_sq > b2Math_1.b2Sq(b2Settings_1.b2_linearSlop)) {\r\n                done = false;\r\n            }\r\n            body_c.x += delta.x;\r\n            body_c.y += delta.y;\r\n        }\r\n        return done;\r\n    };\r\n    return b2AreaJoint;\r\n}(b2Joint_1.b2Joint));\r\nexports.b2AreaJoint = b2AreaJoint;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2AreaJoint.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Dynamics/Joints/b2AreaJoint.ts"],"names":[],"mappings":"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","sourcesContent":["// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2_epsilon, b2_linearSlop, b2_maxLinearCorrection, b2MakeNumberArray, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Sq, b2Sqrt, b2Vec2, XY } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2IJointDef } from \"./b2Joint\";\r\nimport { b2DistanceJoint, b2DistanceJointDef } from \"./b2DistanceJoint\";\r\nimport { b2SolverData } from \"../b2TimeStep\";\r\nimport { b2Body } from \"../b2Body\";\r\n\r\nexport interface b2IAreaJointDef extends b2IJointDef {\r\n  // world: b2World;\r\n\r\n  bodies: b2Body[];\r\n\r\n  frequencyHz?: number;\r\n\r\n  dampingRatio?: number;\r\n}\r\n\r\nexport class b2AreaJointDef extends b2JointDef implements b2IAreaJointDef {\r\n  public bodies: b2Body[] = [];\r\n\r\n  public frequencyHz: number = 0;\r\n\r\n  public dampingRatio: number = 0;\r\n\r\n  constructor() {\r\n    super(b2JointType.e_areaJoint);\r\n  }\r\n\r\n  public AddBody(body: b2Body): void {\r\n    this.bodies.push(body);\r\n\r\n    if (this.bodies.length === 1) {\r\n      this.bodyA = body;\r\n    } else if (this.bodies.length === 2) {\r\n      this.bodyB = body;\r\n    }\r\n  }\r\n}\r\n\r\nexport class b2AreaJoint extends b2Joint {\r\n  public m_bodies: b2Body[];\r\n  public m_frequencyHz: number = 0;\r\n  public m_dampingRatio: number = 0;\r\n\r\n  // Solver shared\r\n  public m_impulse: number = 0;\r\n\r\n  // Solver temp\r\n  public readonly m_targetLengths: number[];\r\n  public m_targetArea: number = 0;\r\n  public readonly m_normals: b2Vec2[];\r\n  public readonly m_joints: b2DistanceJoint[];\r\n  public readonly m_deltas: b2Vec2[];\r\n  public readonly m_delta: b2Vec2 = new b2Vec2();\r\n\r\n  constructor(def: b2IAreaJointDef) {\r\n    super(def);\r\n\r\n    // DEBUG: b2Assert(def.bodies.length >= 3, \"You cannot create an area joint with less than three bodies.\");\r\n\r\n    this.m_bodies = def.bodies;\r\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\r\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\r\n\r\n    this.m_targetLengths = b2MakeNumberArray(def.bodies.length);\r\n    this.m_normals = b2Vec2.MakeArray(def.bodies.length);\r\n    this.m_joints = []; // b2MakeNullArray(def.bodies.length);\r\n    this.m_deltas = b2Vec2.MakeArray(def.bodies.length);\r\n\r\n    const djd: b2DistanceJointDef = new b2DistanceJointDef();\r\n    djd.frequencyHz = this.m_frequencyHz;\r\n    djd.dampingRatio = this.m_dampingRatio;\r\n\r\n    this.m_targetArea = 0;\r\n\r\n    for (let i: number = 0; i < this.m_bodies.length; ++i) {\r\n      const body: b2Body = this.m_bodies[i];\r\n      const next: b2Body = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n\r\n      const body_c: b2Vec2 = body.GetWorldCenter();\r\n      const next_c: b2Vec2 = next.GetWorldCenter();\r\n\r\n      this.m_targetLengths[i] = b2Vec2.DistanceVV(body_c, next_c);\r\n\r\n      this.m_targetArea += b2Vec2.CrossVV(body_c, next_c);\r\n\r\n      djd.Initialize(body, next, body_c, next_c);\r\n      this.m_joints[i] = body.GetWorld().CreateJoint(djd);\r\n    }\r\n\r\n    this.m_targetArea *= 0.5;\r\n  }\r\n\r\n  public GetAnchorA<T extends XY>(out: T): T {\r\n    return out;\r\n  }\r\n\r\n  public GetAnchorB<T extends XY>(out: T): T {\r\n    return out;\r\n  }\r\n\r\n  public GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\r\n    return out;\r\n  }\r\n\r\n  public GetReactionTorque(inv_dt: number): number {\r\n    return 0;\r\n  }\r\n\r\n  public SetFrequency(hz: number): void {\r\n    this.m_frequencyHz = hz;\r\n\r\n    for (let i: number = 0; i < this.m_joints.length; ++i) {\r\n      this.m_joints[i].SetFrequency(hz);\r\n    }\r\n  }\r\n\r\n  public GetFrequency() {\r\n    return this.m_frequencyHz;\r\n  }\r\n\r\n  public SetDampingRatio(ratio: number): void {\r\n    this.m_dampingRatio = ratio;\r\n\r\n    for (let i: number = 0; i < this.m_joints.length; ++i) {\r\n      this.m_joints[i].SetDampingRatio(ratio);\r\n    }\r\n  }\r\n\r\n  public GetDampingRatio() {\r\n    return this.m_dampingRatio;\r\n  }\r\n\r\n  public Dump(log: (format: string, ...args: any[]) => void) {\r\n    log(\"Area joint dumping is not supported.\\n\");\r\n  }\r\n\r\n  public InitVelocityConstraints(data: b2SolverData): void {\r\n    for (let i: number = 0; i < this.m_bodies.length; ++i) {\r\n      const prev: b2Body = this.m_bodies[(i + this.m_bodies.length - 1) % this.m_bodies.length];\r\n      const next: b2Body = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n      const prev_c: b2Vec2 = data.positions[prev.m_islandIndex].c;\r\n      const next_c: b2Vec2 = data.positions[next.m_islandIndex].c;\r\n      const delta: b2Vec2 = this.m_deltas[i];\r\n\r\n      b2Vec2.SubVV(next_c, prev_c, delta);\r\n    }\r\n\r\n    if (data.step.warmStarting) {\r\n      this.m_impulse *= data.step.dtRatio;\r\n\r\n      for (let i: number = 0; i < this.m_bodies.length; ++i) {\r\n        const body: b2Body = this.m_bodies[i];\r\n        const body_v: b2Vec2 = data.velocities[body.m_islandIndex].v;\r\n        const delta: b2Vec2 = this.m_deltas[i];\r\n\r\n        body_v.x += body.m_invMass *  delta.y * 0.5 * this.m_impulse;\r\n        body_v.y += body.m_invMass * -delta.x * 0.5 * this.m_impulse;\r\n      }\r\n    } else {\r\n      this.m_impulse = 0;\r\n    }\r\n  }\r\n\r\n  public SolveVelocityConstraints(data: b2SolverData): void {\r\n    let dotMassSum: number = 0;\r\n    let crossMassSum: number = 0;\r\n\r\n    for (let i: number = 0; i < this.m_bodies.length; ++i) {\r\n      const body: b2Body = this.m_bodies[i];\r\n      const body_v: b2Vec2 = data.velocities[body.m_islandIndex].v;\r\n      const delta: b2Vec2 = this.m_deltas[i];\r\n\r\n      dotMassSum += delta.LengthSquared() / body.GetMass();\r\n      crossMassSum += b2Vec2.CrossVV(body_v, delta);\r\n    }\r\n\r\n    const lambda: number = -2 * crossMassSum / dotMassSum;\r\n    // lambda = b2Clamp(lambda, -b2_maxLinearCorrection, b2_maxLinearCorrection);\r\n\r\n    this.m_impulse += lambda;\r\n\r\n    for (let i: number = 0; i < this.m_bodies.length; ++i) {\r\n      const body: b2Body = this.m_bodies[i];\r\n      const body_v: b2Vec2 = data.velocities[body.m_islandIndex].v;\r\n      const delta: b2Vec2 = this.m_deltas[i];\r\n\r\n      body_v.x += body.m_invMass *  delta.y * 0.5 * lambda;\r\n      body_v.y += body.m_invMass * -delta.x * 0.5 * lambda;\r\n    }\r\n  }\r\n\r\n  public SolvePositionConstraints(data: b2SolverData): boolean {\r\n    let perimeter: number = 0;\r\n    let area: number = 0;\r\n\r\n    for (let i: number = 0; i < this.m_bodies.length; ++i) {\r\n      const body: b2Body = this.m_bodies[i];\r\n      const next: b2Body = this.m_bodies[(i + 1) % this.m_bodies.length];\r\n      const body_c: b2Vec2 = data.positions[body.m_islandIndex].c;\r\n      const next_c: b2Vec2 = data.positions[next.m_islandIndex].c;\r\n\r\n      const delta: b2Vec2 = b2Vec2.SubVV(next_c, body_c, this.m_delta);\r\n\r\n      let dist: number = delta.Length();\r\n      if (dist < b2_epsilon) {\r\n        dist = 1;\r\n      }\r\n\r\n      this.m_normals[i].x =  delta.y / dist;\r\n      this.m_normals[i].y = -delta.x / dist;\r\n\r\n      perimeter += dist;\r\n\r\n      area += b2Vec2.CrossVV(body_c, next_c);\r\n    }\r\n\r\n    area *= 0.5;\r\n\r\n    const deltaArea: number = this.m_targetArea - area;\r\n    const toExtrude: number = 0.5 * deltaArea / perimeter;\r\n    let done: boolean = true;\r\n\r\n    for (let i: number = 0; i < this.m_bodies.length; ++i) {\r\n      const body: b2Body = this.m_bodies[i];\r\n      const body_c: b2Vec2 = data.positions[body.m_islandIndex].c;\r\n      const next_i: number = (i + 1) % this.m_bodies.length;\r\n\r\n      const delta: b2Vec2 = b2Vec2.AddVV(this.m_normals[i], this.m_normals[next_i], this.m_delta);\r\n      delta.SelfMul(toExtrude);\r\n\r\n      const norm_sq: number = delta.LengthSquared();\r\n      if (norm_sq > b2Sq(b2_maxLinearCorrection)) {\r\n        delta.SelfMul(b2_maxLinearCorrection / b2Sqrt(norm_sq));\r\n      }\r\n      if (norm_sq > b2Sq(b2_linearSlop)) {\r\n        done = false;\r\n      }\r\n\r\n      body_c.x += delta.x;\r\n      body_c.y += delta.y;\r\n    }\r\n\r\n    return done;\r\n  }\r\n}\r\n"]}},"error":null,"hash":"434041fab14b2052cf5385ad59c56ba3","cacheData":{"env":{}}}