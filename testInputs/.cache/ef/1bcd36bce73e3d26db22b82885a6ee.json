{"id":"../node_modules/box2d.package.ts/Controllers/b2Controller.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883}],"generated":{"js":"\"use strict\";\r\n/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\nexports.__esModule = true;\r\n/**\r\n * A controller edge is used to connect bodies and controllers\r\n * together in a bipartite graph.\r\n */\r\nvar b2ControllerEdge = /** @class */ (function () {\r\n    function b2ControllerEdge(controller, body) {\r\n        this.prevBody = null; ///< the previous controller edge in the controllers's joint list\r\n        this.nextBody = null; ///< the next controller edge in the controllers's joint list\r\n        this.prevController = null; ///< the previous controller edge in the body's joint list\r\n        this.nextController = null; ///< the next controller edge in the body's joint list\r\n        this.controller = controller;\r\n        this.body = body;\r\n    }\r\n    return b2ControllerEdge;\r\n}());\r\nexports.b2ControllerEdge = b2ControllerEdge;\r\n/**\r\n * Base class for controllers. Controllers are a convience for\r\n * encapsulating common per-step functionality.\r\n */\r\nvar b2Controller = /** @class */ (function () {\r\n    function b2Controller() {\r\n        // m_world: b2World;\r\n        this.m_bodyList = null;\r\n        this.m_bodyCount = 0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n    }\r\n    /**\r\n     * Get the next controller in the world's body list.\r\n     */\r\n    b2Controller.prototype.GetNext = function () {\r\n        return this.m_next;\r\n    };\r\n    /**\r\n     * Get the previous controller in the world's body list.\r\n     */\r\n    b2Controller.prototype.GetPrev = function () {\r\n        return this.m_prev;\r\n    };\r\n    /**\r\n     * Get the parent world of this body.\r\n     */\r\n    // GetWorld() {\r\n    //   return this.m_world;\r\n    // }\r\n    /**\r\n     * Get the attached body list\r\n     */\r\n    b2Controller.prototype.GetBodyList = function () {\r\n        return this.m_bodyList;\r\n    };\r\n    /**\r\n     * Adds a body to the controller list.\r\n     */\r\n    b2Controller.prototype.AddBody = function (body) {\r\n        var edge = new b2ControllerEdge(this, body);\r\n        //Add edge to controller list\r\n        edge.nextBody = this.m_bodyList;\r\n        edge.prevBody = null;\r\n        if (this.m_bodyList) {\r\n            this.m_bodyList.prevBody = edge;\r\n        }\r\n        this.m_bodyList = edge;\r\n        ++this.m_bodyCount;\r\n        //Add edge to body list\r\n        edge.nextController = body.m_controllerList;\r\n        edge.prevController = null;\r\n        if (body.m_controllerList) {\r\n            body.m_controllerList.prevController = edge;\r\n        }\r\n        body.m_controllerList = edge;\r\n        ++body.m_controllerCount;\r\n    };\r\n    /**\r\n     * Removes a body from the controller list.\r\n     */\r\n    b2Controller.prototype.RemoveBody = function (body) {\r\n        //Assert that the controller is not empty\r\n        if (this.m_bodyCount <= 0) {\r\n            throw new Error();\r\n        }\r\n        //Find the corresponding edge\r\n        /*b2ControllerEdge*/\r\n        var edge = this.m_bodyList;\r\n        while (edge && edge.body !== body) {\r\n            edge = edge.nextBody;\r\n        }\r\n        //Assert that we are removing a body that is currently attached to the controller\r\n        if (edge === null) {\r\n            throw new Error();\r\n        }\r\n        //Remove edge from controller list\r\n        if (edge.prevBody) {\r\n            edge.prevBody.nextBody = edge.nextBody;\r\n        }\r\n        if (edge.nextBody) {\r\n            edge.nextBody.prevBody = edge.prevBody;\r\n        }\r\n        if (this.m_bodyList === edge) {\r\n            this.m_bodyList = edge.nextBody;\r\n        }\r\n        --this.m_bodyCount;\r\n        //Remove edge from body list\r\n        if (edge.nextController) {\r\n            edge.nextController.prevController = edge.prevController;\r\n        }\r\n        if (edge.prevController) {\r\n            edge.prevController.nextController = edge.nextController;\r\n        }\r\n        if (body.m_controllerList === edge) {\r\n            body.m_controllerList = edge.nextController;\r\n        }\r\n        --body.m_controllerCount;\r\n    };\r\n    /**\r\n     * Removes all bodies from the controller list.\r\n     */\r\n    b2Controller.prototype.Clear = function () {\r\n        while (this.m_bodyList) {\r\n            this.RemoveBody(this.m_bodyList.body);\r\n        }\r\n        this.m_bodyCount = 0;\r\n    };\r\n    return b2Controller;\r\n}());\r\nexports.b2Controller = b2Controller;\r\n// #endif\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2Controller.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Controllers/b2Controller.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n\r\n// #if B2_ENABLE_CONTROLLER\r\n\r\nimport { b2Body } from \"../Dynamics/b2Body\";\r\nimport { b2TimeStep } from \"../Dynamics/b2TimeStep\";\r\nimport { b2Draw } from \"../Common/b2Draw\";\r\n\r\n/**\r\n * A controller edge is used to connect bodies and controllers\r\n * together in a bipartite graph.\r\n */\r\nexport class b2ControllerEdge {\r\n  public readonly controller: b2Controller; ///< provides quick access to other end of this edge.\r\n  public readonly body: b2Body; ///< the body\r\n  public prevBody: b2ControllerEdge | null = null; ///< the previous controller edge in the controllers's joint list\r\n  public nextBody: b2ControllerEdge | null = null; ///< the next controller edge in the controllers's joint list\r\n  public prevController: b2ControllerEdge | null = null; ///< the previous controller edge in the body's joint list\r\n  public nextController: b2ControllerEdge | null = null; ///< the next controller edge in the body's joint list\r\n  constructor(controller: b2Controller, body: b2Body) {\r\n    this.controller = controller;\r\n    this.body = body;\r\n  }\r\n}\r\n\r\n/**\r\n * Base class for controllers. Controllers are a convience for\r\n * encapsulating common per-step functionality.\r\n */\r\nexport abstract class b2Controller {\r\n  // m_world: b2World;\r\n  public m_bodyList: b2ControllerEdge | null = null;\r\n  public m_bodyCount: number = 0;\r\n  public m_prev: b2Controller | null = null;\r\n  public m_next: b2Controller | null = null;\r\n\r\n  /**\r\n   * Controllers override this to implement per-step functionality.\r\n   */\r\n  public abstract Step(step: b2TimeStep): void;\r\n\r\n  /**\r\n   * Controllers override this to provide debug drawing.\r\n   */\r\n  public abstract Draw(debugDraw: b2Draw): void;\r\n\r\n  /**\r\n   * Get the next controller in the world's body list.\r\n   */\r\n  public GetNext(): b2Controller | null {\r\n    return this.m_next;\r\n  }\r\n\r\n  /**\r\n   * Get the previous controller in the world's body list.\r\n   */\r\n  public GetPrev(): b2Controller | null {\r\n    return this.m_prev;\r\n  }\r\n\r\n  /**\r\n   * Get the parent world of this body.\r\n   */\r\n  // GetWorld() {\r\n  //   return this.m_world;\r\n  // }\r\n\r\n  /**\r\n   * Get the attached body list\r\n   */\r\n  public GetBodyList(): b2ControllerEdge | null {\r\n    return this.m_bodyList;\r\n  }\r\n\r\n  /**\r\n   * Adds a body to the controller list.\r\n   */\r\n  public AddBody(body: b2Body): void {\r\n    const edge = new b2ControllerEdge(this, body);\r\n\r\n    //Add edge to controller list\r\n    edge.nextBody = this.m_bodyList;\r\n    edge.prevBody = null;\r\n    if (this.m_bodyList) {\r\n      this.m_bodyList.prevBody = edge;\r\n    }\r\n    this.m_bodyList = edge;\r\n    ++this.m_bodyCount;\r\n\r\n    //Add edge to body list\r\n    edge.nextController = body.m_controllerList;\r\n    edge.prevController = null;\r\n    if (body.m_controllerList) {\r\n      body.m_controllerList.prevController = edge;\r\n    }\r\n    body.m_controllerList = edge;\r\n    ++body.m_controllerCount;\r\n  }\r\n\r\n  /**\r\n   * Removes a body from the controller list.\r\n   */\r\n  public RemoveBody(body: b2Body): void {\r\n    //Assert that the controller is not empty\r\n    if (this.m_bodyCount <= 0) { throw new Error(); }\r\n\r\n    //Find the corresponding edge\r\n    /*b2ControllerEdge*/\r\n    let edge = this.m_bodyList;\r\n    while (edge && edge.body !== body) {\r\n      edge = edge.nextBody;\r\n    }\r\n\r\n    //Assert that we are removing a body that is currently attached to the controller\r\n    if (edge === null) { throw new Error(); }\r\n\r\n    //Remove edge from controller list\r\n    if (edge.prevBody) {\r\n      edge.prevBody.nextBody = edge.nextBody;\r\n    }\r\n    if (edge.nextBody) {\r\n      edge.nextBody.prevBody = edge.prevBody;\r\n    }\r\n    if (this.m_bodyList === edge) {\r\n      this.m_bodyList = edge.nextBody;\r\n    }\r\n    --this.m_bodyCount;\r\n\r\n    //Remove edge from body list\r\n    if (edge.nextController) {\r\n      edge.nextController.prevController = edge.prevController;\r\n    }\r\n    if (edge.prevController) {\r\n      edge.prevController.nextController = edge.nextController;\r\n    }\r\n    if (body.m_controllerList === edge) {\r\n      body.m_controllerList = edge.nextController;\r\n    }\r\n    --body.m_controllerCount;\r\n  }\r\n\r\n  /**\r\n   * Removes all bodies from the controller list.\r\n   */\r\n  public Clear(): void {\r\n    while (this.m_bodyList) {\r\n      this.RemoveBody(this.m_bodyList.body);\r\n    }\r\n\r\n    this.m_bodyCount = 0;\r\n  }\r\n}\r\n\r\n// #endif\r\n"]}},"error":null,"hash":"b00e8b353f557b5d99ba90ce54f3fe49","cacheData":{"env":{}}}