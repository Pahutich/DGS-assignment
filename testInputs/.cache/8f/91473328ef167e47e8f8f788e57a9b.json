{"id":"../node_modules/box2d.package.ts/Particle/b2ParticleGroup.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"../Common/b2Math","loc":{"line":22,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Particle\\b2ParticleGroup.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"},{"name":"../Common/b2Draw","loc":{"line":23,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Particle\\b2ParticleGroup.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Draw.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\nexports.__esModule = true;\r\n// #if B2_ENABLE_PARTICLE\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nvar b2Math_1 = require(\"../Common/b2Math\");\r\nvar b2Draw_1 = require(\"../Common/b2Draw\");\r\nvar b2ParticleGroupFlag;\r\n(function (b2ParticleGroupFlag) {\r\n    /// Prevents overlapping or leaking.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_solidParticleGroup\"] = 1] = \"b2_solidParticleGroup\";\r\n    /// Keeps its shape.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_rigidParticleGroup\"] = 2] = \"b2_rigidParticleGroup\";\r\n    /// Won't be destroyed if it gets empty.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupCanBeEmpty\"] = 4] = \"b2_particleGroupCanBeEmpty\";\r\n    /// Will be destroyed on next simulation step.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupWillBeDestroyed\"] = 8] = \"b2_particleGroupWillBeDestroyed\";\r\n    /// Updates depth data on next simulation step.\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupNeedsUpdateDepth\"] = 16] = \"b2_particleGroupNeedsUpdateDepth\";\r\n    b2ParticleGroupFlag[b2ParticleGroupFlag[\"b2_particleGroupInternalMask\"] = 24] = \"b2_particleGroupInternalMask\";\r\n})(b2ParticleGroupFlag = exports.b2ParticleGroupFlag || (exports.b2ParticleGroupFlag = {}));\r\nvar b2ParticleGroupDef = /** @class */ (function () {\r\n    function b2ParticleGroupDef() {\r\n        this.flags = 0;\r\n        this.groupFlags = 0;\r\n        this.position = new b2Math_1.b2Vec2();\r\n        this.angle = 0.0;\r\n        this.linearVelocity = new b2Math_1.b2Vec2();\r\n        this.angularVelocity = 0.0;\r\n        this.color = new b2Draw_1.b2Color();\r\n        this.strength = 1.0;\r\n        this.shapeCount = 0;\r\n        this.stride = 0;\r\n        this.particleCount = 0;\r\n        this.lifetime = 0;\r\n        this.userData = null;\r\n        this.group = null;\r\n    }\r\n    return b2ParticleGroupDef;\r\n}());\r\nexports.b2ParticleGroupDef = b2ParticleGroupDef;\r\nvar b2ParticleGroup = /** @class */ (function () {\r\n    function b2ParticleGroup(system) {\r\n        this.m_firstIndex = 0;\r\n        this.m_lastIndex = 0;\r\n        this.m_groupFlags = 0;\r\n        this.m_strength = 1.0;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_timestamp = -1;\r\n        this.m_mass = 0.0;\r\n        this.m_inertia = 0.0;\r\n        this.m_center = new b2Math_1.b2Vec2();\r\n        this.m_linearVelocity = new b2Math_1.b2Vec2();\r\n        this.m_angularVelocity = 0.0;\r\n        this.m_transform = new b2Math_1.b2Transform();\r\n        ///m_transform.SetIdentity();\r\n        this.m_userData = null;\r\n        this.m_system = system;\r\n    }\r\n    b2ParticleGroup.prototype.GetNext = function () {\r\n        return this.m_next;\r\n    };\r\n    b2ParticleGroup.prototype.GetParticleSystem = function () {\r\n        return this.m_system;\r\n    };\r\n    b2ParticleGroup.prototype.GetParticleCount = function () {\r\n        return this.m_lastIndex - this.m_firstIndex;\r\n    };\r\n    b2ParticleGroup.prototype.GetBufferIndex = function () {\r\n        return this.m_firstIndex;\r\n    };\r\n    b2ParticleGroup.prototype.ContainsParticle = function (index) {\r\n        return this.m_firstIndex <= index && index < this.m_lastIndex;\r\n    };\r\n    b2ParticleGroup.prototype.GetAllParticleFlags = function () {\r\n        if (!this.m_system.m_flagsBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        var flags = 0;\r\n        for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n            flags |= this.m_system.m_flagsBuffer.data[i];\r\n        }\r\n        return flags;\r\n    };\r\n    b2ParticleGroup.prototype.GetGroupFlags = function () {\r\n        return this.m_groupFlags;\r\n    };\r\n    b2ParticleGroup.prototype.SetGroupFlags = function (flags) {\r\n        // DEBUG: b2Assert((flags & b2ParticleGroupFlag.b2_particleGroupInternalMask) === 0);\r\n        flags |= this.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupInternalMask;\r\n        this.m_system.SetGroupFlags(this, flags);\r\n    };\r\n    b2ParticleGroup.prototype.GetMass = function () {\r\n        this.UpdateStatistics();\r\n        return this.m_mass;\r\n    };\r\n    b2ParticleGroup.prototype.GetInertia = function () {\r\n        this.UpdateStatistics();\r\n        return this.m_inertia;\r\n    };\r\n    b2ParticleGroup.prototype.GetCenter = function () {\r\n        this.UpdateStatistics();\r\n        return this.m_center;\r\n    };\r\n    b2ParticleGroup.prototype.GetLinearVelocity = function () {\r\n        this.UpdateStatistics();\r\n        return this.m_linearVelocity;\r\n    };\r\n    b2ParticleGroup.prototype.GetAngularVelocity = function () {\r\n        this.UpdateStatistics();\r\n        return this.m_angularVelocity;\r\n    };\r\n    b2ParticleGroup.prototype.GetTransform = function () {\r\n        return this.m_transform;\r\n    };\r\n    b2ParticleGroup.prototype.GetPosition = function () {\r\n        return this.m_transform.p;\r\n    };\r\n    b2ParticleGroup.prototype.GetAngle = function () {\r\n        return this.m_transform.q.GetAngle();\r\n    };\r\n    b2ParticleGroup.prototype.GetLinearVelocityFromWorldPoint = function (worldPoint, out) {\r\n        var s_t0 = b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0;\r\n        this.UpdateStatistics();\r\n        ///  return m_linearVelocity + b2Cross(m_angularVelocity, worldPoint - m_center);\r\n        return b2Math_1.b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Math_1.b2Vec2.SubVV(worldPoint, this.m_center, s_t0), out);\r\n    };\r\n    b2ParticleGroup.prototype.GetUserData = function () {\r\n        return this.m_userData;\r\n    };\r\n    b2ParticleGroup.prototype.SetUserData = function (data) {\r\n        this.m_userData = data;\r\n    };\r\n    b2ParticleGroup.prototype.ApplyForce = function (force) {\r\n        this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, force);\r\n    };\r\n    b2ParticleGroup.prototype.ApplyLinearImpulse = function (impulse) {\r\n        this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, impulse);\r\n    };\r\n    b2ParticleGroup.prototype.DestroyParticles = function (callDestructionListener) {\r\n        if (this.m_system.m_world.IsLocked()) {\r\n            throw new Error();\r\n        }\r\n        for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n            this.m_system.DestroyParticle(i, callDestructionListener);\r\n        }\r\n    };\r\n    b2ParticleGroup.prototype.UpdateStatistics = function () {\r\n        if (!this.m_system.m_positionBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        if (!this.m_system.m_velocityBuffer.data) {\r\n            throw new Error();\r\n        }\r\n        var p = new b2Math_1.b2Vec2();\r\n        var v = new b2Math_1.b2Vec2();\r\n        if (this.m_timestamp !== this.m_system.m_timestamp) {\r\n            var m = this.m_system.GetParticleMass();\r\n            ///  this.m_mass = 0;\r\n            this.m_mass = m * (this.m_lastIndex - this.m_firstIndex);\r\n            this.m_center.SetZero();\r\n            this.m_linearVelocity.SetZero();\r\n            for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n                ///  this.m_mass += m;\r\n                ///  this.m_center += m * this.m_system.m_positionBuffer.data[i];\r\n                this.m_center.SelfMulAdd(m, this.m_system.m_positionBuffer.data[i]);\r\n                ///  this.m_linearVelocity += m * this.m_system.m_velocityBuffer.data[i];\r\n                this.m_linearVelocity.SelfMulAdd(m, this.m_system.m_velocityBuffer.data[i]);\r\n            }\r\n            if (this.m_mass > 0) {\r\n                var inv_mass = 1 / this.m_mass;\r\n                ///this.m_center *= 1 / this.m_mass;\r\n                this.m_center.SelfMul(inv_mass);\r\n                ///this.m_linearVelocity *= 1 / this.m_mass;\r\n                this.m_linearVelocity.SelfMul(inv_mass);\r\n            }\r\n            this.m_inertia = 0;\r\n            this.m_angularVelocity = 0;\r\n            for (var i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n                ///b2Vec2 p = this.m_system.m_positionBuffer.data[i] - this.m_center;\r\n                b2Math_1.b2Vec2.SubVV(this.m_system.m_positionBuffer.data[i], this.m_center, p);\r\n                ///b2Vec2 v = this.m_system.m_velocityBuffer.data[i] - this.m_linearVelocity;\r\n                b2Math_1.b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[i], this.m_linearVelocity, v);\r\n                this.m_inertia += m * b2Math_1.b2Vec2.DotVV(p, p);\r\n                this.m_angularVelocity += m * b2Math_1.b2Vec2.CrossVV(p, v);\r\n            }\r\n            if (this.m_inertia > 0) {\r\n                this.m_angularVelocity *= 1 / this.m_inertia;\r\n            }\r\n            this.m_timestamp = this.m_system.m_timestamp;\r\n        }\r\n    };\r\n    b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0 = new b2Math_1.b2Vec2();\r\n    return b2ParticleGroup;\r\n}());\r\nexports.b2ParticleGroup = b2ParticleGroup;\r\n// #endif\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2ParticleGroup.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Particle/b2ParticleGroup.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;GAgBG;;AAEH,yBAAyB;AAEzB,0DAA0D;AAC1D,2CAA2D;AAC3D,2CAAiD;AAKjD,IAAY,mBAaX;AAbD,WAAY,mBAAmB;IAC7B,oCAAoC;IACpC,+FAA8B,CAAA;IAC9B,oBAAoB;IACpB,+FAA8B,CAAA;IAC9B,wCAAwC;IACxC,yGAAmC,CAAA;IACnC,8CAA8C;IAC9C,mHAAwC,CAAA;IACxC,+CAA+C;IAC/C,sHAAyC,CAAA;IAEzC,8GAAiG,CAAA;AACnG,CAAC,EAbW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAa9B;AAsBD;IAAA;QACS,UAAK,GAAmB,CAAC,CAAC;QAC1B,eAAU,GAAwB,CAAC,CAAC;QAC3B,aAAQ,GAAW,IAAI,eAAM,EAAE,CAAC;QACzC,UAAK,GAAW,GAAG,CAAC;QACX,mBAAc,GAAW,IAAI,eAAM,EAAE,CAAC;QAC/C,oBAAe,GAAW,GAAG,CAAC;QACrB,UAAK,GAAY,IAAI,gBAAO,EAAE,CAAC;QACxC,aAAQ,GAAW,GAAG,CAAC;QAGvB,eAAU,GAAW,CAAC,CAAC;QACvB,WAAM,GAAW,CAAC,CAAC;QACnB,kBAAa,GAAW,CAAC,CAAC;QAE1B,aAAQ,GAAW,CAAC,CAAC;QACrB,aAAQ,GAAQ,IAAI,CAAC;QACrB,UAAK,GAA2B,IAAI,CAAC;IAC9C,CAAC;IAAD,yBAAC;AAAD,CAAC,AAlBD,IAkBC;AAlBY,gDAAkB;AAoB/B;IAmBE,yBAAY,MAAwB;QAhB7B,iBAAY,GAAW,CAAC,CAAC;QACzB,gBAAW,GAAW,CAAC,CAAC;QACxB,iBAAY,GAAwB,CAAC,CAAC;QACtC,eAAU,GAAW,GAAG,CAAC;QACzB,WAAM,GAA2B,IAAI,CAAC;QACtC,WAAM,GAA2B,IAAI,CAAC;QACtC,gBAAW,GAAW,CAAC,CAAC,CAAC;QACzB,WAAM,GAAW,GAAG,CAAC;QACrB,cAAS,GAAW,GAAG,CAAC;QACf,aAAQ,GAAW,IAAI,eAAM,EAAE,CAAC;QAChC,qBAAgB,GAAW,IAAI,eAAM,EAAE,CAAC;QACjD,sBAAiB,GAAW,GAAG,CAAC;QACvB,gBAAW,GAAgB,IAAI,oBAAW,EAAE,CAAC;QAC7D,6BAA6B;QACtB,eAAU,GAAQ,IAAI,CAAC;QAG5B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;IACzB,CAAC;IAEM,iCAAO,GAAd;QACE,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,2CAAiB,GAAxB;QACE,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,0CAAgB,GAAvB;QACE,OAAO,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC;IAC9C,CAAC;IAEM,wCAAc,GAArB;QACE,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAEM,0CAAgB,GAAvB,UAAwB,KAAa;QACnC,OAAO,IAAI,CAAC,YAAY,IAAI,KAAK,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;IAChE,CAAC;IAEM,6CAAmB,GAA1B;QACE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;SAAE;QAC7D,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE;YACzD,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC9C;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,uCAAa,GAApB;QACE,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAEM,uCAAa,GAApB,UAAqB,KAAa;QAChC,qFAAqF;QACrF,KAAK,IAAI,IAAI,CAAC,YAAY,GAAG,mBAAmB,CAAC,4BAA4B,CAAC;QAC9E,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IAC3C,CAAC;IAEM,iCAAO,GAAd;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,oCAAU,GAAjB;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEM,mCAAS,GAAhB;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,2CAAiB,GAAxB;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEM,4CAAkB,GAAzB;QACE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAEM,sCAAY,GAAnB;QACE,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAEM,qCAAW,GAAlB;QACE,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC5B,CAAC;IAEM,kCAAQ,GAAf;QACE,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;IACvC,CAAC;IAEM,yDAA+B,GAAtC,UAAqD,UAAc,EAAE,GAAM;QACzE,IAAM,IAAI,GAAG,eAAe,CAAC,oCAAoC,CAAC;QAClE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,iFAAiF;QACjF,OAAO,eAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,EAAE,eAAM,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;IAC/H,CAAC;IAGM,qCAAW,GAAlB;QACE,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAEM,qCAAW,GAAlB,UAAmB,IAAS;QAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAEM,oCAAU,GAAjB,UAAkB,KAAS;QACzB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC;IAEM,4CAAkB,GAAzB,UAA0B,OAAW;QACnC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACjF,CAAC;IAEM,0CAAgB,GAAvB,UAAwB,uBAAgC;QACtD,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;SAAE;QAE5D,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE;YACzD,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,EAAE,uBAAuB,CAAC,CAAC;SAC3D;IACH,CAAC;IAEM,0CAAgB,GAAvB;QACE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;SAAE;QAChE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,EAAE;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;SAAE;QAChE,IAAM,CAAC,GAAG,IAAI,eAAM,EAAE,CAAC;QACvB,IAAM,CAAC,GAAG,IAAI,eAAM,EAAE,CAAC;QACvB,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE;YAClD,IAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;YAC1C,qBAAqB;YACrB,IAAI,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YACzD,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAChC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE;gBACzD,sBAAsB;gBACtB,iEAAiE;gBACjE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpE,yEAAyE;gBACzE,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7E;YACD,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,IAAM,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;gBACjC,oCAAoC;gBACpC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAChC,4CAA4C;gBAC5C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;aACzC;YACD,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;YAC3B,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE;gBACzD,qEAAqE;gBACrE,eAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;gBACvE,6EAA6E;gBAC7E,eAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;gBAC/E,IAAI,CAAC,SAAS,IAAI,CAAC,GAAG,eAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,iBAAiB,IAAI,CAAC,GAAG,eAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACpD;YACD,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE;gBACtB,IAAI,CAAC,iBAAiB,IAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;aAC9C;YACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;SAC9C;IACH,CAAC;IAlEsB,oDAAoC,GAAG,IAAI,eAAM,EAAE,CAAC;IAmE7E,sBAAC;CAAA,AA5KD,IA4KC;AA5KY,0CAAe;AA8K5B,SAAS","sourcesContent":["/*\r\n * Copyright (c) 2013 Google, Inc.\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n\r\n// #if B2_ENABLE_PARTICLE\r\n\r\n// DEBUG: import { b2Assert } from \"../Common/b2Settings\";\r\nimport { b2Vec2, b2Transform, XY } from \"../Common/b2Math\";\r\nimport { b2Color, RGBA } from \"../Common/b2Draw\";\r\nimport { b2Shape } from \"../Collision/Shapes/b2Shape\";\r\nimport { b2ParticleFlag } from \"./b2Particle\";\r\nimport { b2ParticleSystem } from \"./b2ParticleSystem\";\r\n\r\nexport enum b2ParticleGroupFlag {\r\n  /// Prevents overlapping or leaking.\r\n  b2_solidParticleGroup = 1 << 0,\r\n  /// Keeps its shape.\r\n  b2_rigidParticleGroup = 1 << 1,\r\n  /// Won't be destroyed if it gets empty.\r\n  b2_particleGroupCanBeEmpty = 1 << 2,\r\n  /// Will be destroyed on next simulation step.\r\n  b2_particleGroupWillBeDestroyed = 1 << 3,\r\n  /// Updates depth data on next simulation step.\r\n  b2_particleGroupNeedsUpdateDepth = 1 << 4,\r\n\r\n  b2_particleGroupInternalMask = b2_particleGroupWillBeDestroyed | b2_particleGroupNeedsUpdateDepth,\r\n}\r\n\r\nexport interface b2IParticleGroupDef {\r\n  flags?: b2ParticleFlag;\r\n  groupFlags?: b2ParticleGroupFlag;\r\n  position?: XY;\r\n  angle?: number;\r\n  linearVelocity?: XY;\r\n  angularVelocity?: number;\r\n  color?: RGBA;\r\n  strength?: number;\r\n  shape?: b2Shape;\r\n  shapes?: b2Shape[];\r\n  shapeCount?: number;\r\n  stride?: number;\r\n  particleCount?: number;\r\n  positionData?: XY[];\r\n  lifetime?: number;\r\n  userData?: any;\r\n  group?: b2ParticleGroup | null;\r\n}\r\n\r\nexport class b2ParticleGroupDef implements b2IParticleGroupDef {\r\n  public flags: b2ParticleFlag = 0;\r\n  public groupFlags: b2ParticleGroupFlag = 0;\r\n  public readonly position: b2Vec2 = new b2Vec2();\r\n  public angle: number = 0.0;\r\n  public readonly linearVelocity: b2Vec2 = new b2Vec2();\r\n  public angularVelocity: number = 0.0;\r\n  public readonly color: b2Color = new b2Color();\r\n  public strength: number = 1.0;\r\n  public shape?: b2Shape;\r\n  public shapes?: b2Shape[];\r\n  public shapeCount: number = 0;\r\n  public stride: number = 0;\r\n  public particleCount: number = 0;\r\n  public positionData?: b2Vec2[];\r\n  public lifetime: number = 0;\r\n  public userData: any = null;\r\n  public group: b2ParticleGroup | null = null;\r\n}\r\n\r\nexport class b2ParticleGroup {\r\n\r\n  public readonly m_system: b2ParticleSystem;\r\n  public m_firstIndex: number = 0;\r\n  public m_lastIndex: number = 0;\r\n  public m_groupFlags: b2ParticleGroupFlag = 0;\r\n  public m_strength: number = 1.0;\r\n  public m_prev: b2ParticleGroup | null = null;\r\n  public m_next: b2ParticleGroup | null = null;\r\n  public m_timestamp: number = -1;\r\n  public m_mass: number = 0.0;\r\n  public m_inertia: number = 0.0;\r\n  public readonly m_center: b2Vec2 = new b2Vec2();\r\n  public readonly m_linearVelocity: b2Vec2 = new b2Vec2();\r\n  public m_angularVelocity: number = 0.0;\r\n  public readonly m_transform: b2Transform = new b2Transform();\r\n  ///m_transform.SetIdentity();\r\n  public m_userData: any = null;\r\n\r\n  constructor(system: b2ParticleSystem) {\r\n    this.m_system = system;\r\n  }\r\n\r\n  public GetNext(): b2ParticleGroup | null {\r\n    return this.m_next;\r\n  }\r\n\r\n  public GetParticleSystem(): b2ParticleSystem {\r\n    return this.m_system;\r\n  }\r\n\r\n  public GetParticleCount(): number {\r\n    return this.m_lastIndex - this.m_firstIndex;\r\n  }\r\n\r\n  public GetBufferIndex(): number {\r\n    return this.m_firstIndex;\r\n  }\r\n\r\n  public ContainsParticle(index: number): boolean {\r\n    return this.m_firstIndex <= index && index < this.m_lastIndex;\r\n  }\r\n\r\n  public GetAllParticleFlags(): b2ParticleFlag {\r\n    if (!this.m_system.m_flagsBuffer.data) { throw new Error(); }\r\n    let flags = 0;\r\n    for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n      flags |= this.m_system.m_flagsBuffer.data[i];\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  public GetGroupFlags(): b2ParticleGroupFlag {\r\n    return this.m_groupFlags;\r\n  }\r\n\r\n  public SetGroupFlags(flags: number): void {\r\n    // DEBUG: b2Assert((flags & b2ParticleGroupFlag.b2_particleGroupInternalMask) === 0);\r\n    flags |= this.m_groupFlags & b2ParticleGroupFlag.b2_particleGroupInternalMask;\r\n    this.m_system.SetGroupFlags(this, flags);\r\n  }\r\n\r\n  public GetMass(): number {\r\n    this.UpdateStatistics();\r\n    return this.m_mass;\r\n  }\r\n\r\n  public GetInertia(): number {\r\n    this.UpdateStatistics();\r\n    return this.m_inertia;\r\n  }\r\n\r\n  public GetCenter(): Readonly<b2Vec2> {\r\n    this.UpdateStatistics();\r\n    return this.m_center;\r\n  }\r\n\r\n  public GetLinearVelocity(): Readonly<b2Vec2> {\r\n    this.UpdateStatistics();\r\n    return this.m_linearVelocity;\r\n  }\r\n\r\n  public GetAngularVelocity(): number {\r\n    this.UpdateStatistics();\r\n    return this.m_angularVelocity;\r\n  }\r\n\r\n  public GetTransform(): Readonly<b2Transform> {\r\n    return this.m_transform;\r\n  }\r\n\r\n  public GetPosition(): Readonly<b2Vec2> {\r\n    return this.m_transform.p;\r\n  }\r\n\r\n  public GetAngle(): number {\r\n    return this.m_transform.q.GetAngle();\r\n  }\r\n\r\n  public GetLinearVelocityFromWorldPoint<T extends XY>(worldPoint: XY, out: T): T {\r\n    const s_t0 = b2ParticleGroup.GetLinearVelocityFromWorldPoint_s_t0;\r\n    this.UpdateStatistics();\r\n    ///  return m_linearVelocity + b2Cross(m_angularVelocity, worldPoint - m_center);\r\n    return b2Vec2.AddVCrossSV(this.m_linearVelocity, this.m_angularVelocity, b2Vec2.SubVV(worldPoint, this.m_center, s_t0), out);\r\n  }\r\n  public static readonly GetLinearVelocityFromWorldPoint_s_t0 = new b2Vec2();\r\n\r\n  public GetUserData(): void {\r\n    return this.m_userData;\r\n  }\r\n\r\n  public SetUserData(data: any): void {\r\n    this.m_userData = data;\r\n  }\r\n\r\n  public ApplyForce(force: XY): void {\r\n    this.m_system.ApplyForce(this.m_firstIndex, this.m_lastIndex, force);\r\n  }\r\n\r\n  public ApplyLinearImpulse(impulse: XY): void {\r\n    this.m_system.ApplyLinearImpulse(this.m_firstIndex, this.m_lastIndex, impulse);\r\n  }\r\n\r\n  public DestroyParticles(callDestructionListener: boolean): void {\r\n    if (this.m_system.m_world.IsLocked()) { throw new Error(); }\r\n\r\n    for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n      this.m_system.DestroyParticle(i, callDestructionListener);\r\n    }\r\n  }\r\n\r\n  public UpdateStatistics(): void {\r\n    if (!this.m_system.m_positionBuffer.data) { throw new Error(); }\r\n    if (!this.m_system.m_velocityBuffer.data) { throw new Error(); }\r\n    const p = new b2Vec2();\r\n    const v = new b2Vec2();\r\n    if (this.m_timestamp !== this.m_system.m_timestamp) {\r\n      const m = this.m_system.GetParticleMass();\r\n      ///  this.m_mass = 0;\r\n      this.m_mass = m * (this.m_lastIndex - this.m_firstIndex);\r\n      this.m_center.SetZero();\r\n      this.m_linearVelocity.SetZero();\r\n      for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n        ///  this.m_mass += m;\r\n        ///  this.m_center += m * this.m_system.m_positionBuffer.data[i];\r\n        this.m_center.SelfMulAdd(m, this.m_system.m_positionBuffer.data[i]);\r\n        ///  this.m_linearVelocity += m * this.m_system.m_velocityBuffer.data[i];\r\n        this.m_linearVelocity.SelfMulAdd(m, this.m_system.m_velocityBuffer.data[i]);\r\n      }\r\n      if (this.m_mass > 0) {\r\n        const inv_mass = 1 / this.m_mass;\r\n        ///this.m_center *= 1 / this.m_mass;\r\n        this.m_center.SelfMul(inv_mass);\r\n        ///this.m_linearVelocity *= 1 / this.m_mass;\r\n        this.m_linearVelocity.SelfMul(inv_mass);\r\n      }\r\n      this.m_inertia = 0;\r\n      this.m_angularVelocity = 0;\r\n      for (let i = this.m_firstIndex; i < this.m_lastIndex; i++) {\r\n        ///b2Vec2 p = this.m_system.m_positionBuffer.data[i] - this.m_center;\r\n        b2Vec2.SubVV(this.m_system.m_positionBuffer.data[i], this.m_center, p);\r\n        ///b2Vec2 v = this.m_system.m_velocityBuffer.data[i] - this.m_linearVelocity;\r\n        b2Vec2.SubVV(this.m_system.m_velocityBuffer.data[i], this.m_linearVelocity, v);\r\n        this.m_inertia += m * b2Vec2.DotVV(p, p);\r\n        this.m_angularVelocity += m * b2Vec2.CrossVV(p, v);\r\n      }\r\n      if (this.m_inertia > 0) {\r\n        this.m_angularVelocity *= 1 / this.m_inertia;\r\n      }\r\n      this.m_timestamp = this.m_system.m_timestamp;\r\n    }\r\n  }\r\n}\r\n\r\n// #endif\r\n"]}},"error":null,"hash":"1f69a30a250b4c78153116ccfc6b0916","cacheData":{"env":{}}}