{"id":"../node_modules/box2d.package.ts/Common/b2GrowableStack.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"./b2Settings","loc":{"line":21,"column":27},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2GrowableStack.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Settings.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n* Copyright (c) 2010 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexports.__esModule = true;\r\n// DEBUG: import { b2Assert } from \"./b2Settings\";\r\nvar b2Settings_1 = require(\"./b2Settings\");\r\n/// This is a growable LIFO stack with an initial capacity of N.\r\n/// If the stack size exceeds the initial capacity, the heap is used\r\n/// to increase the size of the stack.\r\nvar b2GrowableStack = /** @class */ (function () {\r\n    function b2GrowableStack(N) {\r\n        this.m_stack = [];\r\n        this.m_count = 0;\r\n        this.m_stack = b2Settings_1.b2MakeArray(N, function (index) { return null; });\r\n        this.m_count = 0;\r\n    }\r\n    b2GrowableStack.prototype.Reset = function () {\r\n        this.m_count = 0;\r\n        return this;\r\n    };\r\n    b2GrowableStack.prototype.Push = function (element) {\r\n        this.m_stack[this.m_count] = element;\r\n        this.m_count++;\r\n    };\r\n    b2GrowableStack.prototype.Pop = function () {\r\n        // DEBUG: b2Assert(this.m_count > 0);\r\n        this.m_count--;\r\n        var element = this.m_stack[this.m_count];\r\n        this.m_stack[this.m_count] = null;\r\n        if (element === null) {\r\n            throw new Error();\r\n        }\r\n        return element;\r\n    };\r\n    b2GrowableStack.prototype.GetCount = function () {\r\n        return this.m_count;\r\n    };\r\n    return b2GrowableStack;\r\n}());\r\nexports.b2GrowableStack = b2GrowableStack;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2GrowableStack.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Common/b2GrowableStack.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;EAgBE;;AAEF,kDAAkD;AAClD,2CAA2C;AAE3C,gEAAgE;AAChE,oEAAoE;AACpE,sCAAsC;AAEtC;IAIE,yBAAY,CAAS;QAHd,YAAO,GAAoB,EAAE,CAAC;QAC9B,YAAO,GAAW,CAAC,CAAC;QAGzB,IAAI,CAAC,OAAO,GAAG,wBAAW,CAAC,CAAC,EAAE,UAAC,KAAK,IAAK,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACnB,CAAC;IAEM,+BAAK,GAAZ;QACE,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,8BAAI,GAAX,UAAY,OAAU;QACpB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;QACrC,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IAEM,6BAAG,GAAV;QACE,qCAAqC;QACrC,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAM,OAAO,GAAa,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC;QAClC,IAAI,OAAO,KAAK,IAAI,EAAE;YAAE,MAAM,IAAI,KAAK,EAAE,CAAC;SAAE;QAC5C,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,kCAAQ,GAAf;QACE,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACH,sBAAC;AAAD,CAAC,AA/BD,IA+BC;AA/BY,0CAAe","sourcesContent":["/*\r\n* Copyright (c) 2010 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\n// DEBUG: import { b2Assert } from \"./b2Settings\";\r\nimport { b2MakeArray } from \"./b2Settings\";\r\n\r\n/// This is a growable LIFO stack with an initial capacity of N.\r\n/// If the stack size exceeds the initial capacity, the heap is used\r\n/// to increase the size of the stack.\r\n\r\nexport class b2GrowableStack<T> {\r\n  public m_stack: Array<T | null> = [];\r\n  public m_count: number = 0;\r\n\r\n  constructor(N: number) {\r\n    this.m_stack = b2MakeArray(N, (index) => null);\r\n    this.m_count = 0;\r\n  }\r\n\r\n  public Reset(): this {\r\n    this.m_count = 0;\r\n    return this;\r\n  }\r\n\r\n  public Push(element: T): void {\r\n    this.m_stack[this.m_count] = element;\r\n    this.m_count++;\r\n  }\r\n\r\n  public Pop(): T {\r\n    // DEBUG: b2Assert(this.m_count > 0);\r\n    this.m_count--;\r\n    const element: T | null = this.m_stack[this.m_count];\r\n    this.m_stack[this.m_count] = null;\r\n    if (element === null) { throw new Error(); }\r\n    return element;\r\n  }\r\n\r\n  public GetCount(): number {\r\n    return this.m_count;\r\n  }\r\n}\r\n"]}},"error":null,"hash":"3872194cc6c27866b4e7db21b0bf1d51","cacheData":{"env":{}}}