{"id":"../node_modules/box2d.package.ts/Controllers/b2TensorDampingController.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"./b2Controller","loc":{"line":31,"column":29},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Controllers\\b2TensorDampingController.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Controllers\\b2Controller.ts"},{"name":"../Common/b2Math","loc":{"line":32,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Controllers\\b2TensorDampingController.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"},{"name":"../Common/b2Settings","loc":{"line":33,"column":27},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Controllers\\b2TensorDampingController.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Settings.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n * Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\n// #if B2_ENABLE_CONTROLLER\r\nvar b2Controller_1 = require(\"./b2Controller\");\r\nvar b2Math_1 = require(\"../Common/b2Math\");\r\nvar b2Settings_1 = require(\"../Common/b2Settings\");\r\n/**\r\n * Applies top down linear damping to the controlled bodies\r\n * The damping is calculated by multiplying velocity by a matrix\r\n * in local co-ordinates.\r\n */\r\nvar b2TensorDampingController = /** @class */ (function (_super) {\r\n    __extends(b2TensorDampingController, _super);\r\n    function b2TensorDampingController() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /// Tensor to use in damping model\r\n        _this.T = new b2Math_1.b2Mat22();\r\n        /*Some examples (matrixes in format (row1; row2))\r\n        (-a 0; 0 -a)    Standard isotropic damping with strength a\r\n        ( 0 a; -a 0)    Electron in fixed field - a force at right angles to velocity with proportional magnitude\r\n        (-a 0; 0 -b)    Differing x and y damping. Useful e.g. for top-down wheels.\r\n        */\r\n        //By the way, tensor in this case just means matrix, don't let the terminology get you down.\r\n        /// Set this to a positive number to clamp the maximum amount of damping done.\r\n        _this.maxTimestep = 0;\r\n        return _this;\r\n    }\r\n    // Typically one wants maxTimestep to be 1/(max eigenvalue of T), so that damping will never cause something to reverse direction\r\n    /**\r\n     * @see b2Controller::Step\r\n     */\r\n    b2TensorDampingController.prototype.Step = function (step) {\r\n        var timestep = step.dt;\r\n        if (timestep <= b2Settings_1.b2_epsilon) {\r\n            return;\r\n        }\r\n        if (timestep > this.maxTimestep && this.maxTimestep > 0) {\r\n            timestep = this.maxTimestep;\r\n        }\r\n        for (var i = this.m_bodyList; i; i = i.nextBody) {\r\n            var body = i.body;\r\n            if (!body.IsAwake()) {\r\n                continue;\r\n            }\r\n            var damping = body.GetWorldVector(b2Math_1.b2Mat22.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity(), b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.s_t1), b2TensorDampingController.Step_s_damping);\r\n            //    body->SetLinearVelocity(body->GetLinearVelocity() + timestep * damping);\r\n            body.SetLinearVelocity(b2Math_1.b2Vec2.AddVV(body.GetLinearVelocity(), b2Math_1.b2Vec2.MulSV(timestep, damping, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.s_t1));\r\n        }\r\n    };\r\n    b2TensorDampingController.prototype.Draw = function (draw) { };\r\n    /**\r\n     * Sets damping independantly along the x and y axes\r\n     */\r\n    b2TensorDampingController.prototype.SetAxisAligned = function (xDamping, yDamping) {\r\n        this.T.ex.x = (-xDamping);\r\n        this.T.ex.y = 0;\r\n        this.T.ey.x = 0;\r\n        this.T.ey.y = (-yDamping);\r\n        if (xDamping > 0 || yDamping > 0) {\r\n            this.maxTimestep = 1 / b2Math_1.b2Max(xDamping, yDamping);\r\n        }\r\n        else {\r\n            this.maxTimestep = 0;\r\n        }\r\n    };\r\n    b2TensorDampingController.Step_s_damping = new b2Math_1.b2Vec2();\r\n    return b2TensorDampingController;\r\n}(b2Controller_1.b2Controller));\r\nexports.b2TensorDampingController = b2TensorDampingController;\r\n// #endif\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2TensorDampingController.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Controllers/b2TensorDampingController.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;GAgBG;;;;;;;;;;;;AAEH,2BAA2B;AAE3B,+CAA8C;AAC9C,2CAA0D;AAE1D,mDAAkD;AAGlD;;;;GAIG;AACH;IAA+C,6CAAY;IAA3D;QAAA,qEA4DC;QA3DG,kCAAkC;QAClB,OAAC,GAAG,IAAI,gBAAO,EAAE,CAAC;QAClC;;;;UAIE;QACF,4FAA4F;QAE5F,8EAA8E;QACvE,iBAAW,GAAG,CAAC,CAAC;;IAiD3B,CAAC;IAhDG,iIAAiI;IAEjI;;OAEG;IACI,wCAAI,GAAX,UAAY,IAAgB;QACxB,IAAI,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC;QACvB,IAAI,QAAQ,IAAI,uBAAU,EAAE;YACxB,OAAO;SACV;QACD,IAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,GAAG,CAAC,EAAE;YACrD,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC;SAC/B;QACD,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE;YAC7C,IAAM,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;gBACjB,SAAS;aACZ;YACD,IAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CACnC,gBAAO,CAAC,KAAK,CACT,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,cAAc,CACnB,IAAI,CAAC,iBAAiB,EAAE,EACxB,eAAM,CAAC,IAAI,CAAC,EACZ,eAAM,CAAC,IAAI,CAAC,EAChB,yBAAyB,CAAC,cAAc,CAAC,CAAC;YAC1C,8EAA8E;YAC9E,IAAI,CAAC,iBAAiB,CAAC,eAAM,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,eAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,eAAM,CAAC,IAAI,CAAC,EAAE,eAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7H;IACL,CAAC;IAGM,wCAAI,GAAX,UAAY,IAAY,IAAG,CAAC;IAE5B;;OAEG;IACI,kDAAc,GAArB,UAAsB,QAAgB,EAAE,QAAgB;QACtD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC1B,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAChB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC1B,IAAI,QAAQ,GAAG,CAAC,IAAI,QAAQ,GAAG,CAAC,EAAE;YAChC,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,cAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;SAClD;aAAM;YACL,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;SACtB;IACH,CAAC;IAjBc,wCAAc,GAAG,IAAI,eAAM,EAAE,CAAC;IAkBjD,gCAAC;CAAA,AA5DD,CAA+C,2BAAY,GA4D1D;AA5DY,8DAAyB;AA8DtC,SAAS","sourcesContent":["/*\r\n * Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n\r\n// #if B2_ENABLE_CONTROLLER\r\n\r\nimport { b2Controller } from \"./b2Controller\";\r\nimport { b2Mat22, b2Vec2, b2Max } from \"../Common/b2Math\";\r\nimport { b2TimeStep } from \"../Dynamics/b2TimeStep\";\r\nimport { b2_epsilon } from \"../Common/b2Settings\";\r\nimport { b2Draw } from \"../Common/b2Draw\";\r\n\r\n/**\r\n * Applies top down linear damping to the controlled bodies\r\n * The damping is calculated by multiplying velocity by a matrix\r\n * in local co-ordinates.\r\n */\r\nexport class b2TensorDampingController extends b2Controller {\r\n    /// Tensor to use in damping model\r\n    public readonly T = new b2Mat22();\r\n    /*Some examples (matrixes in format (row1; row2))\r\n    (-a 0; 0 -a)    Standard isotropic damping with strength a\r\n    ( 0 a; -a 0)    Electron in fixed field - a force at right angles to velocity with proportional magnitude\r\n    (-a 0; 0 -b)    Differing x and y damping. Useful e.g. for top-down wheels.\r\n    */\r\n    //By the way, tensor in this case just means matrix, don't let the terminology get you down.\r\n\r\n    /// Set this to a positive number to clamp the maximum amount of damping done.\r\n    public maxTimestep = 0;\r\n    // Typically one wants maxTimestep to be 1/(max eigenvalue of T), so that damping will never cause something to reverse direction\r\n\r\n    /**\r\n     * @see b2Controller::Step\r\n     */\r\n    public Step(step: b2TimeStep) {\r\n        let timestep = step.dt;\r\n        if (timestep <= b2_epsilon) {\r\n            return;\r\n        }\r\n        if (timestep > this.maxTimestep && this.maxTimestep > 0) {\r\n            timestep = this.maxTimestep;\r\n        }\r\n        for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n            const body = i.body;\r\n            if (!body.IsAwake()) {\r\n                continue;\r\n            }\r\n            const damping = body.GetWorldVector(\r\n            b2Mat22.MulMV(\r\n                this.T,\r\n                body.GetLocalVector(\r\n                body.GetLinearVelocity(),\r\n                b2Vec2.s_t0),\r\n                b2Vec2.s_t1),\r\n            b2TensorDampingController.Step_s_damping);\r\n            //    body->SetLinearVelocity(body->GetLinearVelocity() + timestep * damping);\r\n            body.SetLinearVelocity(b2Vec2.AddVV(body.GetLinearVelocity(), b2Vec2.MulSV(timestep, damping, b2Vec2.s_t0), b2Vec2.s_t1));\r\n        }\r\n    }\r\n    private static Step_s_damping = new b2Vec2();\r\n\r\n    public Draw(draw: b2Draw) {}\r\n\r\n    /**\r\n     * Sets damping independantly along the x and y axes\r\n     */\r\n    public SetAxisAligned(xDamping: number, yDamping: number) {\r\n      this.T.ex.x = (-xDamping);\r\n      this.T.ex.y = 0;\r\n      this.T.ey.x = 0;\r\n      this.T.ey.y = (-yDamping);\r\n      if (xDamping > 0 || yDamping > 0) {\r\n        this.maxTimestep = 1 / b2Max(xDamping, yDamping);\r\n      } else {\r\n        this.maxTimestep = 0;\r\n      }\r\n    }\r\n}\r\n\r\n// #endif\r\n"]}},"error":null,"hash":"e0cb4fef76170923f8aa17e638632f68","cacheData":{"env":{}}}