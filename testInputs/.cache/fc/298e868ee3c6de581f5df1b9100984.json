{"id":"../node_modules/box2d.package.ts/Controllers/b2GravityController.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"./b2Controller","loc":{"line":31,"column":29},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Controllers\\b2GravityController.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Controllers\\b2Controller.ts"},{"name":"../Common/b2Settings","loc":{"line":32,"column":27},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Controllers\\b2GravityController.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Settings.ts"},{"name":"../Common/b2Math","loc":{"line":33,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Controllers\\b2GravityController.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\n// #if B2_ENABLE_CONTROLLER\r\nvar b2Controller_1 = require(\"./b2Controller\");\r\nvar b2Settings_1 = require(\"../Common/b2Settings\");\r\nvar b2Math_1 = require(\"../Common/b2Math\");\r\n/**\r\n * Applies simplified gravity between every pair of bodies\r\n */\r\nvar b2GravityController = /** @class */ (function (_super) {\r\n    __extends(b2GravityController, _super);\r\n    function b2GravityController() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Specifies the strength of the gravitiation force\r\n         */\r\n        _this.G = 1;\r\n        /**\r\n         * If true, gravity is proportional to r^-2, otherwise r^-1\r\n         */\r\n        _this.invSqr = true;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @see b2Controller::Step\r\n     */\r\n    b2GravityController.prototype.Step = function (step) {\r\n        if (this.invSqr) {\r\n            for (var i = this.m_bodyList; i; i = i.nextBody) {\r\n                var body1 = i.body;\r\n                var p1 = body1.GetWorldCenter();\r\n                var mass1 = body1.GetMass();\r\n                for (var j = this.m_bodyList; j && j !== i; j = j.nextBody) {\r\n                    var body2 = j.body;\r\n                    var p2 = body2.GetWorldCenter();\r\n                    var mass2 = body2.GetMass();\r\n                    var dx = p2.x - p1.x;\r\n                    var dy = p2.y - p1.y;\r\n                    var r2 = dx * dx + dy * dy;\r\n                    if (r2 < b2Settings_1.b2_epsilon) {\r\n                        continue;\r\n                    }\r\n                    var f = b2GravityController.Step_s_f.Set(dx, dy);\r\n                    f.SelfMul(this.G / r2 / b2Math_1.b2Sqrt(r2) * mass1 * mass2);\r\n                    if (body1.IsAwake()) {\r\n                        body1.ApplyForce(f, p1);\r\n                    }\r\n                    if (body2.IsAwake()) {\r\n                        body2.ApplyForce(f.SelfMul(-1), p2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = this.m_bodyList; i; i = i.nextBody) {\r\n                var body1 = i.body;\r\n                var p1 = body1.GetWorldCenter();\r\n                var mass1 = body1.GetMass();\r\n                for (var j = this.m_bodyList; j && j !== i; j = j.nextBody) {\r\n                    var body2 = j.body;\r\n                    var p2 = body2.GetWorldCenter();\r\n                    var mass2 = body2.GetMass();\r\n                    var dx = p2.x - p1.x;\r\n                    var dy = p2.y - p1.y;\r\n                    var r2 = dx * dx + dy * dy;\r\n                    if (r2 < b2Settings_1.b2_epsilon) {\r\n                        continue;\r\n                    }\r\n                    var f = b2GravityController.Step_s_f.Set(dx, dy);\r\n                    f.SelfMul(this.G / r2 * mass1 * mass2);\r\n                    if (body1.IsAwake()) {\r\n                        body1.ApplyForce(f, p1);\r\n                    }\r\n                    if (body2.IsAwake()) {\r\n                        body2.ApplyForce(f.SelfMul(-1), p2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    b2GravityController.prototype.Draw = function (draw) { };\r\n    b2GravityController.Step_s_f = new b2Math_1.b2Vec2();\r\n    return b2GravityController;\r\n}(b2Controller_1.b2Controller));\r\nexports.b2GravityController = b2GravityController;\r\n// #endif\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2GravityController.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Controllers/b2GravityController.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2006-2009 Erin Catto http://www.box2d.org\r\n *\r\n * This software is provided 'as-is', without any express or implied\r\n * warranty.  In no event will the authors be held liable for any damages\r\n * arising from the use of this software.\r\n * Permission is granted to anyone to use this software for any purpose,\r\n * including commercial applications, and to alter it and redistribute it\r\n * freely, subject to the following restrictions:\r\n * 1. The origin of this software must not be misrepresented; you must not\r\n * claim that you wrote the original software. If you use this software\r\n * in a product, an acknowledgment in the product documentation would be\r\n * appreciated but is not required.\r\n * 2. Altered source versions must be plainly marked as such, and must not be\r\n * misrepresented as being the original software.\r\n * 3. This notice may not be removed or altered from any source distribution.\r\n */\r\n\r\n// #if B2_ENABLE_CONTROLLER\r\n\r\nimport { b2Controller } from \"./b2Controller\";\r\nimport { b2TimeStep } from \"../Dynamics/b2TimeStep\";\r\nimport { b2_epsilon } from \"../Common/b2Settings\";\r\nimport { b2Sqrt, b2Vec2 } from \"../Common/b2Math\";\r\nimport { b2Draw } from \"../Common/b2Draw\";\r\n\r\n/**\r\n * Applies simplified gravity between every pair of bodies\r\n */\r\nexport class b2GravityController extends b2Controller {\r\n  /**\r\n   * Specifies the strength of the gravitiation force\r\n   */\r\n  public G = 1;\r\n  /**\r\n   * If true, gravity is proportional to r^-2, otherwise r^-1\r\n   */\r\n  public invSqr = true;\r\n\r\n  /**\r\n   * @see b2Controller::Step\r\n   */\r\n  public Step(step: b2TimeStep) {\r\n    if (this.invSqr) {\r\n      for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n        const body1 = i.body;\r\n        const p1 = body1.GetWorldCenter();\r\n        const mass1 = body1.GetMass();\r\n        for (let j = this.m_bodyList; j && j !== i; j = j.nextBody) {\r\n          const body2 = j.body;\r\n          const p2 = body2.GetWorldCenter();\r\n          const mass2 = body2.GetMass();\r\n          const dx = p2.x - p1.x;\r\n          const dy = p2.y - p1.y;\r\n          const r2 = dx * dx + dy * dy;\r\n          if (r2 < b2_epsilon) {\r\n            continue;\r\n          }\r\n          const f = b2GravityController.Step_s_f.Set(dx, dy);\r\n          f.SelfMul(this.G / r2 / b2Sqrt(r2) * mass1 * mass2);\r\n          if (body1.IsAwake()) {\r\n            body1.ApplyForce(f, p1);\r\n          }\r\n          if (body2.IsAwake()) {\r\n            body2.ApplyForce(f.SelfMul(-1), p2);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = this.m_bodyList; i; i = i.nextBody) {\r\n        const body1 = i.body;\r\n        const p1 = body1.GetWorldCenter();\r\n        const mass1 = body1.GetMass();\r\n        for (let j = this.m_bodyList; j && j !== i; j = j.nextBody) {\r\n          const body2 = j.body;\r\n          const p2 = body2.GetWorldCenter();\r\n          const mass2 = body2.GetMass();\r\n          const dx = p2.x - p1.x;\r\n          const dy = p2.y - p1.y;\r\n          const r2 = dx * dx + dy * dy;\r\n          if (r2 < b2_epsilon) {\r\n            continue;\r\n          }\r\n          const f = b2GravityController.Step_s_f.Set(dx, dy);\r\n          f.SelfMul(this.G / r2 * mass1 * mass2);\r\n          if (body1.IsAwake()) {\r\n            body1.ApplyForce(f, p1);\r\n          }\r\n          if (body2.IsAwake()) {\r\n            body2.ApplyForce(f.SelfMul(-1), p2);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  private static Step_s_f = new b2Vec2();\r\n\r\n  public Draw(draw: b2Draw) { }\r\n}\r\n\r\n// #endif\r\n"]}},"error":null,"hash":"30589723de9a8ed962d4f310cc2f315a","cacheData":{"env":{}}}