{"id":"../node_modules/box2d.package.ts/Dynamics/Joints/b2MouseJoint.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"../../Common/b2Settings","loc":{"line":32,"column":27},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2MouseJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Settings.ts"},{"name":"../../Common/b2Math","loc":{"line":33,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2MouseJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"},{"name":"./b2Joint","loc":{"line":34,"column":24},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2MouseJoint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2Joint.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nexports.__esModule = true;\r\n// DEBUG: import { b2Assert, b2_epsilon } from \"../../Common/b2Settings\";\r\n// DEBUG: import { b2IsValid } from \"../../Common/b2Math\";\r\nvar b2Settings_1 = require(\"../../Common/b2Settings\");\r\nvar b2Math_1 = require(\"../../Common/b2Math\");\r\nvar b2Joint_1 = require(\"./b2Joint\");\r\n/// Mouse joint definition. This requires a world target point,\r\n/// tuning parameters, and the time step.\r\nvar b2MouseJointDef = /** @class */ (function (_super) {\r\n    __extends(b2MouseJointDef, _super);\r\n    function b2MouseJointDef() {\r\n        var _this = _super.call(this, b2Joint_1.b2JointType.e_mouseJoint) || this;\r\n        _this.target = new b2Math_1.b2Vec2();\r\n        _this.maxForce = 0;\r\n        _this.frequencyHz = 5;\r\n        _this.dampingRatio = 0.7;\r\n        return _this;\r\n    }\r\n    return b2MouseJointDef;\r\n}(b2Joint_1.b2JointDef));\r\nexports.b2MouseJointDef = b2MouseJointDef;\r\nvar b2MouseJoint = /** @class */ (function (_super) {\r\n    __extends(b2MouseJoint, _super);\r\n    function b2MouseJoint(def) {\r\n        var _this = _super.call(this, def) || this;\r\n        _this.m_localAnchorB = new b2Math_1.b2Vec2();\r\n        _this.m_targetA = new b2Math_1.b2Vec2();\r\n        _this.m_frequencyHz = 0;\r\n        _this.m_dampingRatio = 0;\r\n        _this.m_beta = 0;\r\n        // Solver shared\r\n        _this.m_impulse = new b2Math_1.b2Vec2();\r\n        _this.m_maxForce = 0;\r\n        _this.m_gamma = 0;\r\n        // Solver temp\r\n        _this.m_indexA = 0;\r\n        _this.m_indexB = 0;\r\n        _this.m_rB = new b2Math_1.b2Vec2();\r\n        _this.m_localCenterB = new b2Math_1.b2Vec2();\r\n        _this.m_invMassB = 0;\r\n        _this.m_invIB = 0;\r\n        _this.m_mass = new b2Math_1.b2Mat22();\r\n        _this.m_C = new b2Math_1.b2Vec2();\r\n        _this.m_qB = new b2Math_1.b2Rot();\r\n        _this.m_lalcB = new b2Math_1.b2Vec2();\r\n        _this.m_K = new b2Math_1.b2Mat22();\r\n        _this.m_targetA.Copy(b2Settings_1.b2Maybe(def.target, b2Math_1.b2Vec2.ZERO));\r\n        // DEBUG: b2Assert(this.m_targetA.IsValid());\r\n        b2Math_1.b2Transform.MulTXV(_this.m_bodyB.GetTransform(), _this.m_targetA, _this.m_localAnchorB);\r\n        _this.m_maxForce = b2Settings_1.b2Maybe(def.maxForce, 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_maxForce) && this.m_maxForce >= 0);\r\n        _this.m_impulse.SetZero();\r\n        _this.m_frequencyHz = b2Settings_1.b2Maybe(def.frequencyHz, 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_frequencyHz) && this.m_frequencyHz >= 0);\r\n        _this.m_dampingRatio = b2Settings_1.b2Maybe(def.dampingRatio, 0);\r\n        // DEBUG: b2Assert(b2IsValid(this.m_dampingRatio) && this.m_dampingRatio >= 0);\r\n        _this.m_beta = 0;\r\n        _this.m_gamma = 0;\r\n        return _this;\r\n    }\r\n    b2MouseJoint.prototype.SetTarget = function (target) {\r\n        if (!this.m_bodyB.IsAwake()) {\r\n            this.m_bodyB.SetAwake(true);\r\n        }\r\n        this.m_targetA.Copy(target);\r\n    };\r\n    b2MouseJoint.prototype.GetTarget = function () {\r\n        return this.m_targetA;\r\n    };\r\n    b2MouseJoint.prototype.SetMaxForce = function (maxForce) {\r\n        this.m_maxForce = maxForce;\r\n    };\r\n    b2MouseJoint.prototype.GetMaxForce = function () {\r\n        return this.m_maxForce;\r\n    };\r\n    b2MouseJoint.prototype.SetFrequency = function (hz) {\r\n        this.m_frequencyHz = hz;\r\n    };\r\n    b2MouseJoint.prototype.GetFrequency = function () {\r\n        return this.m_frequencyHz;\r\n    };\r\n    b2MouseJoint.prototype.SetDampingRatio = function (ratio) {\r\n        this.m_dampingRatio = ratio;\r\n    };\r\n    b2MouseJoint.prototype.GetDampingRatio = function () {\r\n        return this.m_dampingRatio;\r\n    };\r\n    b2MouseJoint.prototype.InitVelocityConstraints = function (data) {\r\n        this.m_indexB = this.m_bodyB.m_islandIndex;\r\n        this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n        this.m_invMassB = this.m_bodyB.m_invMass;\r\n        this.m_invIB = this.m_bodyB.m_invI;\r\n        var cB = data.positions[this.m_indexB].c;\r\n        var aB = data.positions[this.m_indexB].a;\r\n        var vB = data.velocities[this.m_indexB].v;\r\n        var wB = data.velocities[this.m_indexB].w;\r\n        var qB = this.m_qB.SetAngle(aB);\r\n        var mass = this.m_bodyB.GetMass();\r\n        // Frequency\r\n        var omega = 2 * b2Settings_1.b2_pi * this.m_frequencyHz;\r\n        // Damping coefficient\r\n        var d = 2 * mass * this.m_dampingRatio * omega;\r\n        // Spring stiffness\r\n        var k = mass * (omega * omega);\r\n        // magic formulas\r\n        // gamma has units of inverse mass.\r\n        // beta has units of inverse time.\r\n        var h = data.step.dt;\r\n        // DEBUG: b2Assert(d + h * k > b2_epsilon);\r\n        this.m_gamma = h * (d + h * k);\r\n        if (this.m_gamma !== 0) {\r\n            this.m_gamma = 1 / this.m_gamma;\r\n        }\r\n        this.m_beta = h * k * this.m_gamma;\r\n        // Compute the effective mass matrix.\r\n        b2Math_1.b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n        b2Math_1.b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n        // K    = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) * invI2 * skew(r2)]\r\n        //      = [1/m1+1/m2     0    ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y -r1.x*r1.y]\r\n        //        [    0     1/m1+1/m2]           [-r1.x*r1.y r1.x*r1.x]           [-r1.x*r1.y r1.x*r1.x]\r\n        var K = this.m_K;\r\n        K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;\r\n        K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\r\n        K.ey.x = K.ex.y;\r\n        K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;\r\n        K.GetInverse(this.m_mass);\r\n        // m_C = cB + m_rB - m_targetA;\r\n        this.m_C.x = cB.x + this.m_rB.x - this.m_targetA.x;\r\n        this.m_C.y = cB.y + this.m_rB.y - this.m_targetA.y;\r\n        // m_C *= m_beta;\r\n        this.m_C.SelfMul(this.m_beta);\r\n        // Cheat with some damping\r\n        wB *= 0.98;\r\n        if (data.step.warmStarting) {\r\n            this.m_impulse.SelfMul(data.step.dtRatio);\r\n            // vB += m_invMassB * m_impulse;\r\n            vB.x += this.m_invMassB * this.m_impulse.x;\r\n            vB.y += this.m_invMassB * this.m_impulse.y;\r\n            wB += this.m_invIB * b2Math_1.b2Vec2.CrossVV(this.m_rB, this.m_impulse);\r\n        }\r\n        else {\r\n            this.m_impulse.SetZero();\r\n        }\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    };\r\n    b2MouseJoint.prototype.SolveVelocityConstraints = function (data) {\r\n        var vB = data.velocities[this.m_indexB].v;\r\n        var wB = data.velocities[this.m_indexB].w;\r\n        // Cdot = v + cross(w, r)\r\n        // b2Vec2 Cdot = vB + b2Cross(wB, m_rB);\r\n        var Cdot = b2Math_1.b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2MouseJoint.SolveVelocityConstraints_s_Cdot);\r\n        //  b2Vec2 impulse = b2Mul(m_mass, -(Cdot + m_C + m_gamma * m_impulse));\r\n        var impulse = b2Math_1.b2Mat22.MulMV(this.m_mass, b2Math_1.b2Vec2.AddVV(Cdot, b2Math_1.b2Vec2.AddVV(this.m_C, b2Math_1.b2Vec2.MulSV(this.m_gamma, this.m_impulse, b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.s_t0), b2Math_1.b2Vec2.s_t0).SelfNeg(), b2MouseJoint.SolveVelocityConstraints_s_impulse);\r\n        // b2Vec2 oldImpulse = m_impulse;\r\n        var oldImpulse = b2MouseJoint.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);\r\n        // m_impulse += impulse;\r\n        this.m_impulse.SelfAdd(impulse);\r\n        var maxImpulse = data.step.dt * this.m_maxForce;\r\n        if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {\r\n            this.m_impulse.SelfMul(maxImpulse / this.m_impulse.Length());\r\n        }\r\n        // impulse = m_impulse - oldImpulse;\r\n        b2Math_1.b2Vec2.SubVV(this.m_impulse, oldImpulse, impulse);\r\n        // vB += m_invMassB * impulse;\r\n        vB.SelfMulAdd(this.m_invMassB, impulse);\r\n        wB += this.m_invIB * b2Math_1.b2Vec2.CrossVV(this.m_rB, impulse);\r\n        // data.velocities[this.m_indexB].v = vB;\r\n        data.velocities[this.m_indexB].w = wB;\r\n    };\r\n    b2MouseJoint.prototype.SolvePositionConstraints = function (data) {\r\n        return true;\r\n    };\r\n    b2MouseJoint.prototype.GetAnchorA = function (out) {\r\n        out.x = this.m_targetA.x;\r\n        out.y = this.m_targetA.y;\r\n        return out;\r\n    };\r\n    b2MouseJoint.prototype.GetAnchorB = function (out) {\r\n        return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n    };\r\n    b2MouseJoint.prototype.GetReactionForce = function (inv_dt, out) {\r\n        return b2Math_1.b2Vec2.MulSV(inv_dt, this.m_impulse, out);\r\n    };\r\n    b2MouseJoint.prototype.GetReactionTorque = function (inv_dt) {\r\n        return 0;\r\n    };\r\n    b2MouseJoint.prototype.Dump = function (log) {\r\n        log(\"Mouse joint dumping is not supported.\\n\");\r\n    };\r\n    b2MouseJoint.prototype.ShiftOrigin = function (newOrigin) {\r\n        this.m_targetA.SelfSub(newOrigin);\r\n    };\r\n    b2MouseJoint.SolveVelocityConstraints_s_Cdot = new b2Math_1.b2Vec2();\r\n    b2MouseJoint.SolveVelocityConstraints_s_impulse = new b2Math_1.b2Vec2();\r\n    b2MouseJoint.SolveVelocityConstraints_s_oldImpulse = new b2Math_1.b2Vec2();\r\n    return b2MouseJoint;\r\n}(b2Joint_1.b2Joint));\r\nexports.b2MouseJoint = b2MouseJoint;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2MouseJoint.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Dynamics/Joints/b2MouseJoint.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\n// DEBUG: import { b2Assert, b2_epsilon } from \"../../Common/b2Settings\";\r\n// DEBUG: import { b2IsValid } from \"../../Common/b2Math\";\r\nimport { b2_pi, b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, b2Mat22, b2Rot, b2Transform, XY } from \"../../Common/b2Math\";\r\nimport { b2Joint, b2JointDef, b2JointType, b2IJointDef } from \"./b2Joint\";\r\nimport { b2SolverData } from \"../b2TimeStep\";\r\n\r\nexport interface b2IMouseJointDef extends b2IJointDef {\r\n  target?: XY;\r\n\r\n  maxForce?: number;\r\n\r\n  frequencyHz?: number;\r\n\r\n  dampingRatio?: number;\r\n}\r\n\r\n/// Mouse joint definition. This requires a world target point,\r\n/// tuning parameters, and the time step.\r\nexport class b2MouseJointDef extends b2JointDef implements b2IMouseJointDef {\r\n  public readonly target: b2Vec2 = new b2Vec2();\r\n\r\n  public maxForce: number = 0;\r\n\r\n  public frequencyHz: number = 5;\r\n\r\n  public dampingRatio: number = 0.7;\r\n\r\n  constructor() {\r\n    super(b2JointType.e_mouseJoint);\r\n  }\r\n}\r\n\r\nexport class b2MouseJoint extends b2Joint {\r\n  public readonly m_localAnchorB: b2Vec2 = new b2Vec2();\r\n  public readonly m_targetA: b2Vec2 = new b2Vec2();\r\n  public m_frequencyHz: number = 0;\r\n  public m_dampingRatio: number = 0;\r\n  public m_beta: number = 0;\r\n\r\n  // Solver shared\r\n  public readonly m_impulse: b2Vec2 = new b2Vec2();\r\n  public m_maxForce: number = 0;\r\n  public m_gamma: number = 0;\r\n\r\n  // Solver temp\r\n  public m_indexA: number = 0;\r\n  public m_indexB: number = 0;\r\n  public readonly m_rB: b2Vec2 = new b2Vec2();\r\n  public readonly m_localCenterB: b2Vec2 = new b2Vec2();\r\n  public m_invMassB: number = 0;\r\n  public m_invIB: number = 0;\r\n  public readonly m_mass: b2Mat22 = new b2Mat22();\r\n  public readonly m_C: b2Vec2 = new b2Vec2();\r\n  public readonly m_qB: b2Rot = new b2Rot();\r\n  public readonly m_lalcB: b2Vec2 = new b2Vec2();\r\n  public readonly m_K: b2Mat22 = new b2Mat22();\r\n\r\n  constructor(def: b2IMouseJointDef) {\r\n    super(def);\r\n\r\n    this.m_targetA.Copy(b2Maybe(def.target, b2Vec2.ZERO));\r\n    // DEBUG: b2Assert(this.m_targetA.IsValid());\r\n    b2Transform.MulTXV(this.m_bodyB.GetTransform(), this.m_targetA, this.m_localAnchorB);\r\n\r\n    this.m_maxForce = b2Maybe(def.maxForce, 0);\r\n    // DEBUG: b2Assert(b2IsValid(this.m_maxForce) && this.m_maxForce >= 0);\r\n    this.m_impulse.SetZero();\r\n\r\n    this.m_frequencyHz = b2Maybe(def.frequencyHz, 0);\r\n    // DEBUG: b2Assert(b2IsValid(this.m_frequencyHz) && this.m_frequencyHz >= 0);\r\n    this.m_dampingRatio = b2Maybe(def.dampingRatio, 0);\r\n    // DEBUG: b2Assert(b2IsValid(this.m_dampingRatio) && this.m_dampingRatio >= 0);\r\n\r\n    this.m_beta = 0;\r\n    this.m_gamma = 0;\r\n  }\r\n\r\n  public SetTarget(target: b2Vec2): void {\r\n    if (!this.m_bodyB.IsAwake()) {\r\n      this.m_bodyB.SetAwake(true);\r\n    }\r\n    this.m_targetA.Copy(target);\r\n  }\r\n\r\n  public GetTarget() {\r\n    return this.m_targetA;\r\n  }\r\n\r\n  public SetMaxForce(maxForce: number): void {\r\n    this.m_maxForce = maxForce;\r\n  }\r\n\r\n  public GetMaxForce() {\r\n    return this.m_maxForce;\r\n  }\r\n\r\n  public SetFrequency(hz: number): void {\r\n    this.m_frequencyHz = hz;\r\n  }\r\n\r\n  public GetFrequency() {\r\n    return this.m_frequencyHz;\r\n  }\r\n\r\n  public SetDampingRatio(ratio: number) {\r\n    this.m_dampingRatio = ratio;\r\n  }\r\n\r\n  public GetDampingRatio() {\r\n    return this.m_dampingRatio;\r\n  }\r\n\r\n  public InitVelocityConstraints(data: b2SolverData): void {\r\n    this.m_indexB = this.m_bodyB.m_islandIndex;\r\n    this.m_localCenterB.Copy(this.m_bodyB.m_sweep.localCenter);\r\n    this.m_invMassB = this.m_bodyB.m_invMass;\r\n    this.m_invIB = this.m_bodyB.m_invI;\r\n\r\n    const cB: b2Vec2 = data.positions[this.m_indexB].c;\r\n    const aB: number = data.positions[this.m_indexB].a;\r\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\r\n    let wB: number = data.velocities[this.m_indexB].w;\r\n\r\n    const qB = this.m_qB.SetAngle(aB);\r\n\r\n    const mass: number = this.m_bodyB.GetMass();\r\n\r\n    // Frequency\r\n    const omega: number = 2 * b2_pi * this.m_frequencyHz;\r\n\r\n    // Damping coefficient\r\n    const d: number = 2 * mass * this.m_dampingRatio * omega;\r\n\r\n    // Spring stiffness\r\n    const k: number = mass * (omega * omega);\r\n\r\n    // magic formulas\r\n    // gamma has units of inverse mass.\r\n    // beta has units of inverse time.\r\n    const h: number = data.step.dt;\r\n    // DEBUG: b2Assert(d + h * k > b2_epsilon);\r\n    this.m_gamma = h * (d + h * k);\r\n    if (this.m_gamma !== 0) {\r\n      this.m_gamma = 1 / this.m_gamma;\r\n    }\r\n    this.m_beta = h * k * this.m_gamma;\r\n\r\n    // Compute the effective mass matrix.\r\n    b2Vec2.SubVV(this.m_localAnchorB, this.m_localCenterB, this.m_lalcB);\r\n    b2Rot.MulRV(qB, this.m_lalcB, this.m_rB);\r\n\r\n    // K    = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) * invI2 * skew(r2)]\r\n    //      = [1/m1+1/m2     0    ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y -r1.x*r1.y]\r\n    //        [    0     1/m1+1/m2]           [-r1.x*r1.y r1.x*r1.x]           [-r1.x*r1.y r1.x*r1.x]\r\n    const K = this.m_K;\r\n    K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y + this.m_gamma;\r\n    K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\r\n    K.ey.x = K.ex.y;\r\n    K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x + this.m_gamma;\r\n\r\n    K.GetInverse(this.m_mass);\r\n\r\n    // m_C = cB + m_rB - m_targetA;\r\n    this.m_C.x = cB.x + this.m_rB.x - this.m_targetA.x;\r\n    this.m_C.y = cB.y + this.m_rB.y - this.m_targetA.y;\r\n    // m_C *= m_beta;\r\n    this.m_C.SelfMul(this.m_beta);\r\n\r\n    // Cheat with some damping\r\n    wB *= 0.98;\r\n\r\n    if (data.step.warmStarting) {\r\n      this.m_impulse.SelfMul(data.step.dtRatio);\r\n      // vB += m_invMassB * m_impulse;\r\n      vB.x += this.m_invMassB * this.m_impulse.x;\r\n      vB.y += this.m_invMassB * this.m_impulse.y;\r\n      wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, this.m_impulse);\r\n    } else {\r\n      this.m_impulse.SetZero();\r\n    }\r\n\r\n    // data.velocities[this.m_indexB].v = vB;\r\n    data.velocities[this.m_indexB].w = wB;\r\n  }\r\n\r\n  private static SolveVelocityConstraints_s_Cdot = new b2Vec2();\r\n  private static SolveVelocityConstraints_s_impulse = new b2Vec2();\r\n  private static SolveVelocityConstraints_s_oldImpulse = new b2Vec2();\r\n  public SolveVelocityConstraints(data: b2SolverData): void {\r\n    const vB: b2Vec2 = data.velocities[this.m_indexB].v;\r\n    let wB: number = data.velocities[this.m_indexB].w;\r\n\r\n    // Cdot = v + cross(w, r)\r\n    // b2Vec2 Cdot = vB + b2Cross(wB, m_rB);\r\n    const Cdot: b2Vec2 = b2Vec2.AddVCrossSV(vB, wB, this.m_rB, b2MouseJoint.SolveVelocityConstraints_s_Cdot);\r\n    //  b2Vec2 impulse = b2Mul(m_mass, -(Cdot + m_C + m_gamma * m_impulse));\r\n    const impulse: b2Vec2 = b2Mat22.MulMV(\r\n      this.m_mass,\r\n      b2Vec2.AddVV(\r\n        Cdot,\r\n        b2Vec2.AddVV(this.m_C,\r\n          b2Vec2.MulSV(this.m_gamma, this.m_impulse, b2Vec2.s_t0),\r\n          b2Vec2.s_t0),\r\n        b2Vec2.s_t0).SelfNeg(),\r\n      b2MouseJoint.SolveVelocityConstraints_s_impulse);\r\n\r\n    // b2Vec2 oldImpulse = m_impulse;\r\n    const oldImpulse = b2MouseJoint.SolveVelocityConstraints_s_oldImpulse.Copy(this.m_impulse);\r\n    // m_impulse += impulse;\r\n    this.m_impulse.SelfAdd(impulse);\r\n    const maxImpulse: number = data.step.dt * this.m_maxForce;\r\n    if (this.m_impulse.LengthSquared() > maxImpulse * maxImpulse) {\r\n      this.m_impulse.SelfMul(maxImpulse / this.m_impulse.Length());\r\n    }\r\n    // impulse = m_impulse - oldImpulse;\r\n    b2Vec2.SubVV(this.m_impulse, oldImpulse, impulse);\r\n\r\n    // vB += m_invMassB * impulse;\r\n    vB.SelfMulAdd(this.m_invMassB, impulse);\r\n    wB += this.m_invIB * b2Vec2.CrossVV(this.m_rB, impulse);\r\n\r\n    // data.velocities[this.m_indexB].v = vB;\r\n    data.velocities[this.m_indexB].w = wB;\r\n  }\r\n\r\n  public SolvePositionConstraints(data: b2SolverData): boolean {\r\n    return true;\r\n  }\r\n\r\n  public GetAnchorA<T extends XY>(out: T): T {\r\n    out.x = this.m_targetA.x;\r\n    out.y = this.m_targetA.y;\r\n    return out;\r\n  }\r\n\r\n  public GetAnchorB<T extends XY>(out: T): T {\r\n    return this.m_bodyB.GetWorldPoint(this.m_localAnchorB, out);\r\n  }\r\n\r\n  public GetReactionForce<T extends XY>(inv_dt: number, out: T): T {\r\n    return b2Vec2.MulSV(inv_dt, this.m_impulse, out);\r\n  }\r\n\r\n  public GetReactionTorque(inv_dt: number): number {\r\n    return 0;\r\n  }\r\n\r\n  public Dump(log: (format: string, ...args: any[]) => void) {\r\n    log(\"Mouse joint dumping is not supported.\\n\");\r\n  }\r\n\r\n  public ShiftOrigin(newOrigin: b2Vec2) {\r\n    this.m_targetA.SelfSub(newOrigin);\r\n  }\r\n}\r\n"]}},"error":null,"hash":"376a6a5e24a575afb6241314f0f2320e","cacheData":{"env":{}}}