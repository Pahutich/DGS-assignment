{"id":"../node_modules/box2d.package.ts/Dynamics/Joints/b2Joint.ts","dependencies":[{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\package.json","includedInParent":true,"mtime":1586335198964},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\.babelrc","includedInParent":true,"mtime":1586259187841},{"name":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\package.json","includedInParent":true,"mtime":1586252018883},{"name":"../../Common/b2Settings","loc":{"line":21,"column":27},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2Joint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Settings.ts"},{"name":"../../Common/b2Math","loc":{"line":22,"column":23},"parent":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Dynamics\\Joints\\b2Joint.ts","resolved":"C:\\Users\\ricardo\\Desktop\\testInputs\\node_modules\\box2d.package.ts\\Common\\b2Math.ts"}],"generated":{"js":"\"use strict\";\r\n/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\nexports.__esModule = true;\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nvar b2Settings_1 = require(\"../../Common/b2Settings\");\r\nvar b2Math_1 = require(\"../../Common/b2Math\");\r\nvar b2JointType;\r\n(function (b2JointType) {\r\n    b2JointType[b2JointType[\"e_unknownJoint\"] = 0] = \"e_unknownJoint\";\r\n    b2JointType[b2JointType[\"e_revoluteJoint\"] = 1] = \"e_revoluteJoint\";\r\n    b2JointType[b2JointType[\"e_prismaticJoint\"] = 2] = \"e_prismaticJoint\";\r\n    b2JointType[b2JointType[\"e_distanceJoint\"] = 3] = \"e_distanceJoint\";\r\n    b2JointType[b2JointType[\"e_pulleyJoint\"] = 4] = \"e_pulleyJoint\";\r\n    b2JointType[b2JointType[\"e_mouseJoint\"] = 5] = \"e_mouseJoint\";\r\n    b2JointType[b2JointType[\"e_gearJoint\"] = 6] = \"e_gearJoint\";\r\n    b2JointType[b2JointType[\"e_wheelJoint\"] = 7] = \"e_wheelJoint\";\r\n    b2JointType[b2JointType[\"e_weldJoint\"] = 8] = \"e_weldJoint\";\r\n    b2JointType[b2JointType[\"e_frictionJoint\"] = 9] = \"e_frictionJoint\";\r\n    b2JointType[b2JointType[\"e_ropeJoint\"] = 10] = \"e_ropeJoint\";\r\n    b2JointType[b2JointType[\"e_motorJoint\"] = 11] = \"e_motorJoint\";\r\n    b2JointType[b2JointType[\"e_areaJoint\"] = 12] = \"e_areaJoint\";\r\n})(b2JointType = exports.b2JointType || (exports.b2JointType = {}));\r\nvar b2LimitState;\r\n(function (b2LimitState) {\r\n    b2LimitState[b2LimitState[\"e_inactiveLimit\"] = 0] = \"e_inactiveLimit\";\r\n    b2LimitState[b2LimitState[\"e_atLowerLimit\"] = 1] = \"e_atLowerLimit\";\r\n    b2LimitState[b2LimitState[\"e_atUpperLimit\"] = 2] = \"e_atUpperLimit\";\r\n    b2LimitState[b2LimitState[\"e_equalLimits\"] = 3] = \"e_equalLimits\";\r\n})(b2LimitState = exports.b2LimitState || (exports.b2LimitState = {}));\r\nvar b2Jacobian = /** @class */ (function () {\r\n    function b2Jacobian() {\r\n        this.linear = new b2Math_1.b2Vec2();\r\n        this.angularA = 0;\r\n        this.angularB = 0;\r\n    }\r\n    b2Jacobian.prototype.SetZero = function () {\r\n        this.linear.SetZero();\r\n        this.angularA = 0;\r\n        this.angularB = 0;\r\n        return this;\r\n    };\r\n    b2Jacobian.prototype.Set = function (x, a1, a2) {\r\n        this.linear.Copy(x);\r\n        this.angularA = a1;\r\n        this.angularB = a2;\r\n        return this;\r\n    };\r\n    return b2Jacobian;\r\n}());\r\nexports.b2Jacobian = b2Jacobian;\r\n/// A joint edge is used to connect bodies and joints together\r\n/// in a joint graph where each body is a node and each joint\r\n/// is an edge. A joint edge belongs to a doubly linked list\r\n/// maintained in each attached body. Each joint has two joint\r\n/// nodes, one for each attached body.\r\nvar b2JointEdge = /** @class */ (function () {\r\n    function b2JointEdge(joint) {\r\n        this._other = null; ///< provides quick access to the other body attached.\r\n        this.prev = null; ///< the previous joint edge in the body's joint list\r\n        this.next = null; ///< the next joint edge in the body's joint list\r\n        this.joint = joint;\r\n    }\r\n    Object.defineProperty(b2JointEdge.prototype, \"other\", {\r\n        get: function () {\r\n            if (this._other === null) {\r\n                throw new Error();\r\n            }\r\n            return this._other;\r\n        },\r\n        set: function (value) {\r\n            if (this._other !== null) {\r\n                throw new Error();\r\n            }\r\n            this._other = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    b2JointEdge.prototype.Reset = function () {\r\n        this._other = null;\r\n        this.prev = null;\r\n        this.next = null;\r\n    };\r\n    return b2JointEdge;\r\n}());\r\nexports.b2JointEdge = b2JointEdge;\r\n/// Joint definitions are used to construct joints.\r\nvar b2JointDef = /** @class */ (function () {\r\n    function b2JointDef(type) {\r\n        /// The joint type is set automatically for concrete joint types.\r\n        this.type = b2JointType.e_unknownJoint;\r\n        /// Use this to attach application specific data to your joints.\r\n        this.userData = null;\r\n        /// Set this flag to true if the attached bodies should collide.\r\n        this.collideConnected = false;\r\n        this.type = type;\r\n    }\r\n    return b2JointDef;\r\n}());\r\nexports.b2JointDef = b2JointDef;\r\n/// The base joint class. Joints are used to constraint two bodies together in\r\n/// various fashions. Some joints also feature limits and motors.\r\nvar b2Joint = /** @class */ (function () {\r\n    function b2Joint(def) {\r\n        // DEBUG: b2Assert(def.bodyA !== def.bodyB);\r\n        this.m_type = b2JointType.e_unknownJoint;\r\n        this.m_prev = null;\r\n        this.m_next = null;\r\n        this.m_edgeA = new b2JointEdge(this);\r\n        this.m_edgeB = new b2JointEdge(this);\r\n        this.m_index = 0;\r\n        this.m_islandFlag = false;\r\n        this.m_collideConnected = false;\r\n        this.m_userData = null;\r\n        this.m_type = def.type;\r\n        this.m_edgeA.other = def.bodyB;\r\n        this.m_edgeB.other = def.bodyA;\r\n        this.m_bodyA = def.bodyA;\r\n        this.m_bodyB = def.bodyB;\r\n        this.m_collideConnected = b2Settings_1.b2Maybe(def.collideConnected, false);\r\n        this.m_userData = b2Settings_1.b2Maybe(def.userData, null);\r\n    }\r\n    /// Get the type of the concrete joint.\r\n    b2Joint.prototype.GetType = function () {\r\n        return this.m_type;\r\n    };\r\n    /// Get the first body attached to this joint.\r\n    b2Joint.prototype.GetBodyA = function () {\r\n        return this.m_bodyA;\r\n    };\r\n    /// Get the second body attached to this joint.\r\n    b2Joint.prototype.GetBodyB = function () {\r\n        return this.m_bodyB;\r\n    };\r\n    /// Get the next joint the world joint list.\r\n    b2Joint.prototype.GetNext = function () {\r\n        return this.m_next;\r\n    };\r\n    /// Get the user data pointer.\r\n    b2Joint.prototype.GetUserData = function () {\r\n        return this.m_userData;\r\n    };\r\n    /// Set the user data pointer.\r\n    b2Joint.prototype.SetUserData = function (data) {\r\n        this.m_userData = data;\r\n    };\r\n    /// Short-cut function to determine if either body is inactive.\r\n    b2Joint.prototype.IsActive = function () {\r\n        return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();\r\n    };\r\n    /// Get collide connected.\r\n    /// Note: modifying the collide connect flag won't work correctly because\r\n    /// the flag is only checked when fixture AABBs begin to overlap.\r\n    b2Joint.prototype.GetCollideConnected = function () {\r\n        return this.m_collideConnected;\r\n    };\r\n    /// Dump this joint to the log file.\r\n    b2Joint.prototype.Dump = function (log) {\r\n        log(\"// Dump is not supported for this joint type.\\n\");\r\n    };\r\n    /// Shift the origin for any points stored in world coordinates.\r\n    b2Joint.prototype.ShiftOrigin = function (newOrigin) {\r\n    };\r\n    return b2Joint;\r\n}());\r\nexports.b2Joint = b2Joint;\r\n"},"sourceMaps":{"js":{"version":3,"file":"b2Joint.js","sourceRoot":"","sources":["../node_modules/box2d.package.ts/Dynamics/Joints/b2Joint.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n* Copyright (c) 2006-2007 Erin Catto http://www.box2d.org\r\n*\r\n* This software is provided 'as-is', without any express or implied\r\n* warranty.  In no event will the authors be held liable for any damages\r\n* arising from the use of this software.\r\n* Permission is granted to anyone to use this software for any purpose,\r\n* including commercial applications, and to alter it and redistribute it\r\n* freely, subject to the following restrictions:\r\n* 1. The origin of this software must not be misrepresented; you must not\r\n* claim that you wrote the original software. If you use this software\r\n* in a product, an acknowledgment in the product documentation would be\r\n* appreciated but is not required.\r\n* 2. Altered source versions must be plainly marked as such, and must not be\r\n* misrepresented as being the original software.\r\n* 3. This notice may not be removed or altered from any source distribution.\r\n*/\r\n\r\n// DEBUG: import { b2Assert } from \"../../Common/b2Settings\";\r\nimport { b2Maybe } from \"../../Common/b2Settings\";\r\nimport { b2Vec2, XY } from \"../../Common/b2Math\";\r\nimport { b2Body } from \"../b2Body\";\r\nimport { b2SolverData } from \"../b2TimeStep\";\r\n\r\nexport enum b2JointType {\r\n  e_unknownJoint = 0,\r\n  e_revoluteJoint = 1,\r\n  e_prismaticJoint = 2,\r\n  e_distanceJoint = 3,\r\n  e_pulleyJoint = 4,\r\n  e_mouseJoint = 5,\r\n  e_gearJoint = 6,\r\n  e_wheelJoint = 7,\r\n  e_weldJoint = 8,\r\n  e_frictionJoint = 9,\r\n  e_ropeJoint = 10,\r\n  e_motorJoint = 11,\r\n  e_areaJoint = 12,\r\n}\r\n\r\nexport enum b2LimitState {\r\n  e_inactiveLimit = 0,\r\n  e_atLowerLimit = 1,\r\n  e_atUpperLimit = 2,\r\n  e_equalLimits = 3,\r\n}\r\n\r\nexport class b2Jacobian {\r\n  public readonly linear: b2Vec2 = new b2Vec2();\r\n  public angularA: number = 0;\r\n  public angularB: number = 0;\r\n\r\n  public SetZero(): b2Jacobian {\r\n    this.linear.SetZero();\r\n    this.angularA = 0;\r\n    this.angularB = 0;\r\n    return this;\r\n  }\r\n\r\n  public Set(x: XY, a1: number, a2: number): b2Jacobian {\r\n    this.linear.Copy(x);\r\n    this.angularA = a1;\r\n    this.angularB = a2;\r\n    return this;\r\n  }\r\n}\r\n\r\n/// A joint edge is used to connect bodies and joints together\r\n/// in a joint graph where each body is a node and each joint\r\n/// is an edge. A joint edge belongs to a doubly linked list\r\n/// maintained in each attached body. Each joint has two joint\r\n/// nodes, one for each attached body.\r\nexport class b2JointEdge {\r\n  private _other: b2Body | null = null; ///< provides quick access to the other body attached.\r\n  public get other(): b2Body {\r\n    if (this._other === null) { throw new Error(); }\r\n    return this._other;\r\n  }\r\n  public set other(value: b2Body) {\r\n    if (this._other !== null) { throw new Error(); }\r\n    this._other = value;\r\n  }\r\n  public readonly joint: b2Joint;    ///< the joint\r\n  public prev: b2JointEdge | null = null;  ///< the previous joint edge in the body's joint list\r\n  public next: b2JointEdge | null = null;  ///< the next joint edge in the body's joint list\r\n  constructor(joint: b2Joint) {\r\n    this.joint = joint;\r\n  }\r\n  public Reset(): void {\r\n    this._other = null;\r\n    this.prev = null;\r\n    this.next = null;\r\n  }\r\n}\r\n\r\n/// Joint definitions are used to construct joints.\r\nexport interface b2IJointDef {\r\n  /// The joint type is set automatically for concrete joint types.\r\n  type: b2JointType;\r\n\r\n  /// Use this to attach application specific data to your joints.\r\n  userData?: any;\r\n\r\n  /// The first attached body.\r\n  bodyA: b2Body;\r\n\r\n  /// The second attached body.\r\n  bodyB: b2Body;\r\n\r\n  /// Set this flag to true if the attached bodies should collide.\r\n  collideConnected?: boolean;\r\n}\r\n\r\n/// Joint definitions are used to construct joints.\r\nexport abstract class b2JointDef implements b2IJointDef {\r\n  /// The joint type is set automatically for concrete joint types.\r\n  public readonly type: b2JointType = b2JointType.e_unknownJoint;\r\n\r\n  /// Use this to attach application specific data to your joints.\r\n  public userData: any = null;\r\n\r\n  /// The first attached body.\r\n  public bodyA!: b2Body;\r\n\r\n  /// The second attached body.\r\n  public bodyB!: b2Body;\r\n\r\n  /// Set this flag to true if the attached bodies should collide.\r\n  public collideConnected: boolean = false;\r\n\r\n  constructor(type: b2JointType) {\r\n    this.type = type;\r\n  }\r\n}\r\n\r\n/// The base joint class. Joints are used to constraint two bodies together in\r\n/// various fashions. Some joints also feature limits and motors.\r\nexport abstract class b2Joint {\r\n  public readonly m_type: b2JointType = b2JointType.e_unknownJoint;\r\n  public m_prev: b2Joint | null = null;\r\n  public m_next: b2Joint | null = null;\r\n  public readonly m_edgeA: b2JointEdge = new b2JointEdge(this);\r\n  public readonly m_edgeB: b2JointEdge = new b2JointEdge(this);\r\n  public m_bodyA: b2Body;\r\n  public m_bodyB: b2Body;\r\n\r\n  public m_index: number = 0;\r\n\r\n  public m_islandFlag: boolean = false;\r\n  public m_collideConnected: boolean = false;\r\n\r\n  public m_userData: any = null;\r\n\r\n  constructor(def: b2IJointDef) {\r\n    // DEBUG: b2Assert(def.bodyA !== def.bodyB);\r\n\r\n    this.m_type = def.type;\r\n    this.m_edgeA.other = def.bodyB;\r\n    this.m_edgeB.other = def.bodyA;\r\n    this.m_bodyA = def.bodyA;\r\n    this.m_bodyB = def.bodyB;\r\n\r\n    this.m_collideConnected = b2Maybe(def.collideConnected, false);\r\n\r\n    this.m_userData = b2Maybe(def.userData, null);\r\n  }\r\n\r\n  /// Get the type of the concrete joint.\r\n  public GetType(): b2JointType {\r\n    return this.m_type;\r\n  }\r\n\r\n  /// Get the first body attached to this joint.\r\n  public GetBodyA(): b2Body {\r\n    return this.m_bodyA;\r\n  }\r\n\r\n  /// Get the second body attached to this joint.\r\n  public GetBodyB(): b2Body {\r\n    return this.m_bodyB;\r\n  }\r\n\r\n  /// Get the anchor point on bodyA in world coordinates.\r\n  public abstract GetAnchorA<T extends XY>(out: T): T;\r\n\r\n  /// Get the anchor point on bodyB in world coordinates.\r\n  public abstract GetAnchorB<T extends XY>(out: T): T;\r\n\r\n  /// Get the reaction force on bodyB at the joint anchor in Newtons.\r\n  public abstract GetReactionForce<T extends XY>(inv_dt: number, out: T): T;\r\n\r\n  /// Get the reaction torque on bodyB in N*m.\r\n  public abstract GetReactionTorque(inv_dt: number): number;\r\n\r\n  /// Get the next joint the world joint list.\r\n  public GetNext(): b2Joint | null {\r\n    return this.m_next;\r\n  }\r\n\r\n  /// Get the user data pointer.\r\n  public GetUserData(): any {\r\n    return this.m_userData;\r\n  }\r\n\r\n  /// Set the user data pointer.\r\n  public SetUserData(data: any): void {\r\n    this.m_userData = data;\r\n  }\r\n\r\n  /// Short-cut function to determine if either body is inactive.\r\n  public IsActive(): boolean {\r\n    return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();\r\n  }\r\n\r\n  /// Get collide connected.\r\n  /// Note: modifying the collide connect flag won't work correctly because\r\n  /// the flag is only checked when fixture AABBs begin to overlap.\r\n  public GetCollideConnected(): boolean {\r\n    return this.m_collideConnected;\r\n  }\r\n\r\n  /// Dump this joint to the log file.\r\n  public Dump(log: (format: string, ...args: any[]) => void): void {\r\n    log(\"// Dump is not supported for this joint type.\\n\");\r\n  }\r\n\r\n  /// Shift the origin for any points stored in world coordinates.\r\n  public ShiftOrigin(newOrigin: XY): void {\r\n  }\r\n\r\n  public abstract InitVelocityConstraints(data: b2SolverData): void;\r\n\r\n  public abstract SolveVelocityConstraints(data: b2SolverData): void;\r\n\r\n  // This returns true if the position errors are within tolerance.\r\n  public abstract SolvePositionConstraints(data: b2SolverData): boolean;\r\n}\r\n"]}},"error":null,"hash":"931ada6002dcac461f279e33513317cb","cacheData":{"env":{}}}